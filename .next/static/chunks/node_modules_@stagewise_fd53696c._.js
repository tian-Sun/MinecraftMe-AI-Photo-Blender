(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@stagewise/toolbar/dist/jsx-runtime-Bf2kozQ6.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "E": (()=>E),
    "G": (()=>G),
    "H": (()=>H),
    "J": (()=>J),
    "K": (()=>K),
    "_": (()=>_),
    "a": (()=>l),
    "b": (()=>b),
    "c": (()=>a),
    "k": (()=>k),
    "l": (()=>l$1),
    "s": (()=>s),
    "t": (()=>t$1),
    "u": (()=>u),
    "x": (()=>x)
});
var n$1, l$1, u$1, t$1, i$1, r, o$1, e, f$1, c$1, s$1, a$1, h, p$1 = {}, y = [], v = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, w = Array.isArray;
function d(n2, l2) {
    for(var u2 in l2)n2[u2] = l2[u2];
    return n2;
}
function g(n2) {
    n2 && n2.parentNode && n2.parentNode.removeChild(n2);
}
function _(l2, u2, t2) {
    var i2, r2, o2, e2 = {};
    for(o2 in u2)"key" == o2 ? i2 = u2[o2] : "ref" == o2 ? r2 = u2[o2] : e2[o2] = u2[o2];
    if (arguments.length > 2 && (e2.children = arguments.length > 3 ? n$1.call(arguments, 2) : t2), "function" == typeof l2 && null != l2.defaultProps) for(o2 in l2.defaultProps)null == e2[o2] && (e2[o2] = l2.defaultProps[o2]);
    return m(l2, e2, i2, r2, null);
}
function m(n2, t2, i2, r2, o2) {
    var e2 = {
        type: n2,
        props: t2,
        key: i2,
        ref: r2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __c: null,
        constructor: void 0,
        __v: null == o2 ? ++u$1 : o2,
        __i: -1,
        __u: 0
    };
    return null == o2 && null != l$1.vnode && l$1.vnode(e2), e2;
}
function b() {
    return {
        current: null
    };
}
function k(n2) {
    return n2.children;
}
function x(n2, l2) {
    this.props = n2, this.context = l2;
}
function S(n2, l2) {
    if (null == l2) return n2.__ ? S(n2.__, n2.__i + 1) : null;
    for(var u2; l2 < n2.__k.length; l2++)if (null != (u2 = n2.__k[l2]) && null != u2.__e) return u2.__e;
    return "function" == typeof n2.type ? S(n2) : null;
}
function C(n2) {
    var l2, u2;
    if (null != (n2 = n2.__) && null != n2.__c) {
        for(n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
            n2.__e = n2.__c.base = u2.__e;
            break;
        }
        return C(n2);
    }
}
function M(n2) {
    (!n2.__d && (n2.__d = true) && i$1.push(n2) && !$.__r++ || r != l$1.debounceRendering) && ((r = l$1.debounceRendering) || o$1)($);
}
function $() {
    for(var n2, u2, t2, r2, o2, f2, c2, s2 = 1; i$1.length;)i$1.length > s2 && i$1.sort(e), n2 = i$1.shift(), s2 = i$1.length, n2.__d && (t2 = void 0, o2 = (r2 = (u2 = n2).__v).__e, f2 = [], c2 = [], u2.__P && ((t2 = d({}, r2)).__v = r2.__v + 1, l$1.vnode && l$1.vnode(t2), O(u2.__P, t2, r2, u2.__n, u2.__P.namespaceURI, 32 & r2.__u ? [
        o2
    ] : null, f2, null == o2 ? S(r2) : o2, !!(32 & r2.__u), c2), t2.__v = r2.__v, t2.__.__k[t2.__i] = t2, z(f2, t2, c2), t2.__e != o2 && C(t2)));
    $.__r = 0;
}
function I(n2, l2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
    var a2, h2, v2, w2, d2, g2, _2 = t2 && t2.__k || y, m2 = l2.length;
    for(f2 = P(u2, l2, _2, f2, m2), a2 = 0; a2 < m2; a2++)null != (v2 = u2.__k[a2]) && (h2 = -1 == v2.__i ? p$1 : _2[v2.__i] || p$1, v2.__i = a2, g2 = O(n2, v2, h2, i2, r2, o2, e2, f2, c2, s2), w2 = v2.__e, v2.ref && h2.ref != v2.ref && (h2.ref && q(h2.ref, null, v2), s2.push(v2.ref, v2.__c || w2, v2)), null == d2 && null != w2 && (d2 = w2), 4 & v2.__u || h2.__k === v2.__k ? f2 = A(v2, f2, n2) : "function" == typeof v2.type && void 0 !== g2 ? f2 = g2 : w2 && (f2 = w2.nextSibling), v2.__u &= -7);
    return u2.__e = d2, f2;
}
function P(n2, l2, u2, t2, i2) {
    var r2, o2, e2, f2, c2, s2 = u2.length, a2 = s2, h2 = 0;
    for(n2.__k = new Array(i2), r2 = 0; r2 < i2; r2++)null != (o2 = l2[r2]) && "boolean" != typeof o2 && "function" != typeof o2 ? (f2 = r2 + h2, (o2 = n2.__k[r2] = "string" == typeof o2 || "number" == typeof o2 || "bigint" == typeof o2 || o2.constructor == String ? m(null, o2, null, null, null) : w(o2) ? m(k, {
        children: o2
    }, null, null, null) : null == o2.constructor && o2.__b > 0 ? m(o2.type, o2.props, o2.key, o2.ref ? o2.ref : null, o2.__v) : o2).__ = n2, o2.__b = n2.__b + 1, e2 = null, -1 != (c2 = o2.__i = L(o2, u2, f2, a2)) && (a2--, (e2 = u2[c2]) && (e2.__u |= 2)), null == e2 || null == e2.__v ? (-1 == c2 && (i2 > s2 ? h2-- : i2 < s2 && h2++), "function" != typeof o2.type && (o2.__u |= 4)) : c2 != f2 && (c2 == f2 - 1 ? h2-- : c2 == f2 + 1 ? h2++ : (c2 > f2 ? h2-- : h2++, o2.__u |= 4))) : n2.__k[r2] = null;
    if (a2) for(r2 = 0; r2 < s2; r2++)null != (e2 = u2[r2]) && 0 == (2 & e2.__u) && (e2.__e == t2 && (t2 = S(e2)), B(e2, e2));
    return t2;
}
function A(n2, l2, u2) {
    var t2, i2;
    if ("function" == typeof n2.type) {
        for(t2 = n2.__k, i2 = 0; t2 && i2 < t2.length; i2++)t2[i2] && (t2[i2].__ = n2, l2 = A(t2[i2], l2, u2));
        return l2;
    }
    n2.__e != l2 && (l2 && n2.type && !u2.contains(l2) && (l2 = S(n2)), u2.insertBefore(n2.__e, l2 || null), l2 = n2.__e);
    do {
        l2 = l2 && l2.nextSibling;
    }while (null != l2 && 8 == l2.nodeType)
    return l2;
}
function H(n2, l2) {
    return l2 = l2 || [], null == n2 || "boolean" == typeof n2 || (w(n2) ? n2.some(function(n3) {
        H(n3, l2);
    }) : l2.push(n2)), l2;
}
function L(n2, l2, u2, t2) {
    var i2, r2, o2 = n2.key, e2 = n2.type, f2 = l2[u2];
    if (null === f2 && null == n2.key || f2 && o2 == f2.key && e2 == f2.type && 0 == (2 & f2.__u)) return u2;
    if (t2 > (null != f2 && 0 == (2 & f2.__u) ? 1 : 0)) for(i2 = u2 - 1, r2 = u2 + 1; i2 >= 0 || r2 < l2.length;){
        if (i2 >= 0) {
            if ((f2 = l2[i2]) && 0 == (2 & f2.__u) && o2 == f2.key && e2 == f2.type) return i2;
            i2--;
        }
        if (r2 < l2.length) {
            if ((f2 = l2[r2]) && 0 == (2 & f2.__u) && o2 == f2.key && e2 == f2.type) return r2;
            r2++;
        }
    }
    return -1;
}
function T(n2, l2, u2) {
    "-" == l2[0] ? n2.setProperty(l2, null == u2 ? "" : u2) : n2[l2] = null == u2 ? "" : "number" != typeof u2 || v.test(l2) ? u2 : u2 + "px";
}
function j(n2, l2, u2, t2, i2) {
    var r2;
    n: if ("style" == l2) if ("string" == typeof u2) n2.style.cssText = u2;
    else {
        if ("string" == typeof t2 && (n2.style.cssText = t2 = ""), t2) for(l2 in t2)u2 && l2 in u2 || T(n2.style, l2, "");
        if (u2) for(l2 in u2)t2 && u2[l2] == t2[l2] || T(n2.style, l2, u2[l2]);
    }
    else if ("o" == l2[0] && "n" == l2[1]) r2 = l2 != (l2 = l2.replace(f$1, "$1")), l2 = l2.toLowerCase() in n2 || "onFocusOut" == l2 || "onFocusIn" == l2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u2, u2 ? t2 ? u2.u = t2.u : (u2.u = c$1, n2.addEventListener(l2, r2 ? a$1 : s$1, r2)) : n2.removeEventListener(l2, r2 ? a$1 : s$1, r2);
    else {
        if ("http://www.w3.org/2000/svg" == i2) l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" != l2 && "height" != l2 && "href" != l2 && "list" != l2 && "form" != l2 && "tabIndex" != l2 && "download" != l2 && "rowSpan" != l2 && "colSpan" != l2 && "role" != l2 && "popover" != l2 && l2 in n2) try {
            n2[l2] = null == u2 ? "" : u2;
            break n;
        } catch (n3) {}
        "function" == typeof u2 || (null == u2 || false === u2 && "-" != l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, "popover" == l2 && 1 == u2 ? "" : u2));
    }
}
function F(n2) {
    return function(u2) {
        if (this.l) {
            var t2 = this.l[u2.type + n2];
            if (null == u2.t) u2.t = c$1++;
            else if (u2.t < t2.u) return;
            return t2(l$1.event ? l$1.event(u2) : u2);
        }
    };
}
function O(n2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
    var a2, h2, p2, y2, v2, _2, m2, b2, S2, C2, M2, $2, P2, A2, H2, L2, T2, j2 = u2.type;
    if (null != u2.constructor) return null;
    128 & t2.__u && (c2 = !!(32 & t2.__u), o2 = [
        f2 = u2.__e = t2.__e
    ]), (a2 = l$1.__b) && a2(u2);
    n: if ("function" == typeof j2) try {
        if (b2 = u2.props, S2 = "prototype" in j2 && j2.prototype.render, C2 = (a2 = j2.contextType) && i2[a2.__c], M2 = a2 ? C2 ? C2.props.value : a2.__ : i2, t2.__c ? m2 = (h2 = u2.__c = t2.__c).__ = h2.__E : (S2 ? u2.__c = h2 = new j2(b2, M2) : (u2.__c = h2 = new x(b2, M2), h2.constructor = j2, h2.render = D), C2 && C2.sub(h2), h2.props = b2, h2.state || (h2.state = {}), h2.context = M2, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), S2 && null == h2.__s && (h2.__s = h2.state), S2 && null != j2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = d({}, h2.__s)), d(h2.__s, j2.getDerivedStateFromProps(b2, h2.__s))), y2 = h2.props, v2 = h2.state, h2.__v = u2, p2) S2 && null == j2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), S2 && null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
        else {
            if (S2 && null == j2.getDerivedStateFromProps && b2 !== y2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(b2, M2), !h2.__e && null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(b2, h2.__s, M2) || u2.__v == t2.__v) {
                for(u2.__v != t2.__v && (h2.props = b2, h2.state = h2.__s, h2.__d = false), u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.some(function(n3) {
                    n3 && (n3.__ = u2);
                }), $2 = 0; $2 < h2._sb.length; $2++)h2.__h.push(h2._sb[$2]);
                h2._sb = [], h2.__h.length && e2.push(h2);
                break n;
            }
            null != h2.componentWillUpdate && h2.componentWillUpdate(b2, h2.__s, M2), S2 && null != h2.componentDidUpdate && h2.__h.push(function() {
                h2.componentDidUpdate(y2, v2, _2);
            });
        }
        if (h2.context = M2, h2.props = b2, h2.__P = n2, h2.__e = false, P2 = l$1.__r, A2 = 0, S2) {
            for(h2.state = h2.__s, h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), H2 = 0; H2 < h2._sb.length; H2++)h2.__h.push(h2._sb[H2]);
            h2._sb = [];
        } else do {
            h2.__d = false, P2 && P2(u2), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
        }while (h2.__d && ++A2 < 25)
        h2.state = h2.__s, null != h2.getChildContext && (i2 = d(d({}, i2), h2.getChildContext())), S2 && !p2 && null != h2.getSnapshotBeforeUpdate && (_2 = h2.getSnapshotBeforeUpdate(y2, v2)), L2 = a2, null != a2 && a2.type === k && null == a2.key && (L2 = N(a2.props.children)), f2 = I(n2, w(L2) ? L2 : [
            L2
        ], u2, t2, i2, r2, o2, e2, f2, c2, s2), h2.base = u2.__e, u2.__u &= -161, h2.__h.length && e2.push(h2), m2 && (h2.__E = h2.__ = null);
    } catch (n3) {
        if (u2.__v = null, c2 || null != o2) if (n3.then) {
            for(u2.__u |= c2 ? 160 : 128; f2 && 8 == f2.nodeType && f2.nextSibling;)f2 = f2.nextSibling;
            o2[o2.indexOf(f2)] = null, u2.__e = f2;
        } else for(T2 = o2.length; T2--;)g(o2[T2]);
        else u2.__e = t2.__e, u2.__k = t2.__k;
        l$1.__e(n3, u2, t2);
    }
    else null == o2 && u2.__v == t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : f2 = u2.__e = V(t2.__e, u2, t2, i2, r2, o2, e2, c2, s2);
    return (a2 = l$1.diffed) && a2(u2), 128 & u2.__u ? void 0 : f2;
}
function z(n2, u2, t2) {
    for(var i2 = 0; i2 < t2.length; i2++)q(t2[i2], t2[++i2], t2[++i2]);
    l$1.__c && l$1.__c(u2, n2), n2.some(function(u3) {
        try {
            n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
                n3.call(u3);
            });
        } catch (n3) {
            l$1.__e(n3, u3.__v);
        }
    });
}
function N(n2) {
    return "object" != typeof n2 || null == n2 || n2.__b && n2.__b > 0 ? n2 : w(n2) ? n2.map(N) : d({}, n2);
}
function V(u2, t2, i2, r2, o2, e2, f2, c2, s2) {
    var a2, h2, y2, v2, d2, _2, m2, b2 = i2.props, k2 = t2.props, x2 = t2.type;
    if ("svg" == x2 ? o2 = "http://www.w3.org/2000/svg" : "math" == x2 ? o2 = "http://www.w3.org/1998/Math/MathML" : o2 || (o2 = "http://www.w3.org/1999/xhtml"), null != e2) {
        for(a2 = 0; a2 < e2.length; a2++)if ((d2 = e2[a2]) && "setAttribute" in d2 == !!x2 && (x2 ? d2.localName == x2 : 3 == d2.nodeType)) {
            u2 = d2, e2[a2] = null;
            break;
        }
    }
    if (null == u2) {
        if (null == x2) return document.createTextNode(k2);
        u2 = document.createElementNS(o2, x2, k2.is && k2), c2 && (l$1.__m && l$1.__m(t2, e2), c2 = false), e2 = null;
    }
    if (null == x2) b2 === k2 || c2 && u2.data == k2 || (u2.data = k2);
    else {
        if (e2 = e2 && n$1.call(u2.childNodes), b2 = i2.props || p$1, !c2 && null != e2) for(b2 = {}, a2 = 0; a2 < u2.attributes.length; a2++)b2[(d2 = u2.attributes[a2]).name] = d2.value;
        for(a2 in b2)if (d2 = b2[a2], "children" == a2) ;
        else if ("dangerouslySetInnerHTML" == a2) y2 = d2;
        else if (!(a2 in k2)) {
            if ("value" == a2 && "defaultValue" in k2 || "checked" == a2 && "defaultChecked" in k2) continue;
            j(u2, a2, null, d2, o2);
        }
        for(a2 in k2)d2 = k2[a2], "children" == a2 ? v2 = d2 : "dangerouslySetInnerHTML" == a2 ? h2 = d2 : "value" == a2 ? _2 = d2 : "checked" == a2 ? m2 = d2 : c2 && "function" != typeof d2 || b2[a2] === d2 || j(u2, a2, d2, b2[a2], o2);
        if (h2) c2 || y2 && (h2.__html == y2.__html || h2.__html == u2.innerHTML) || (u2.innerHTML = h2.__html), t2.__k = [];
        else if (y2 && (u2.innerHTML = ""), I("template" == t2.type ? u2.content : u2, w(v2) ? v2 : [
            v2
        ], t2, i2, r2, "foreignObject" == x2 ? "http://www.w3.org/1999/xhtml" : o2, e2, f2, e2 ? e2[0] : i2.__k && S(i2, 0), c2, s2), null != e2) for(a2 = e2.length; a2--;)g(e2[a2]);
        c2 || (a2 = "value", "progress" == x2 && null == _2 ? u2.removeAttribute("value") : null != _2 && (_2 !== u2[a2] || "progress" == x2 && !_2 || "option" == x2 && _2 != b2[a2]) && j(u2, a2, _2, b2[a2], o2), a2 = "checked", null != m2 && m2 != u2[a2] && j(u2, a2, m2, b2[a2], o2));
    }
    return u2;
}
function q(n2, u2, t2) {
    try {
        if ("function" == typeof n2) {
            var i2 = "function" == typeof n2.__u;
            i2 && n2.__u(), i2 && null == u2 || (n2.__u = n2(u2));
        } else n2.current = u2;
    } catch (n3) {
        l$1.__e(n3, t2);
    }
}
function B(n2, u2, t2) {
    var i2, r2;
    if (l$1.unmount && l$1.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current != n2.__e || q(i2, null, u2)), null != (i2 = n2.__c)) {
        if (i2.componentWillUnmount) try {
            i2.componentWillUnmount();
        } catch (n3) {
            l$1.__e(n3, u2);
        }
        i2.base = i2.__P = null;
    }
    if (i2 = n2.__k) for(r2 = 0; r2 < i2.length; r2++)i2[r2] && B(i2[r2], u2, t2 || "function" != typeof n2.type);
    t2 || g(n2.__e), n2.__c = n2.__ = n2.__e = void 0;
}
function D(n2, l2, u2) {
    return this.constructor(n2, u2);
}
function E(u2, t2, i2) {
    var r2, o2, e2, f2;
    t2 == document && (t2 = document.documentElement), l$1.__ && l$1.__(u2, t2), o2 = (r2 = "function" == typeof i2) ? null : i2 && i2.__k || t2.__k, e2 = [], f2 = [], O(t2, u2 = (!r2 && i2 || t2).__k = _(k, null, [
        u2
    ]), o2 || p$1, p$1, t2.namespaceURI, !r2 && i2 ? [
        i2
    ] : o2 ? null : t2.firstChild ? n$1.call(t2.childNodes) : null, e2, !r2 && i2 ? i2 : o2 ? o2.__e : t2.firstChild, r2, f2), z(e2, u2, f2);
}
function G(n2, l2) {
    E(n2, l2, G);
}
function J(l2, u2, t2) {
    var i2, r2, o2, e2, f2 = d({}, l2.props);
    for(o2 in l2.type && l2.type.defaultProps && (e2 = l2.type.defaultProps), u2)"key" == o2 ? i2 = u2[o2] : "ref" == o2 ? r2 = u2[o2] : f2[o2] = null == u2[o2] && null != e2 ? e2[o2] : u2[o2];
    return arguments.length > 2 && (f2.children = arguments.length > 3 ? n$1.call(arguments, 2) : t2), m(l2.type, f2, i2 || l2.key, r2 || l2.ref, null);
}
function K(n2) {
    function l2(n3) {
        var u2, t2;
        return this.getChildContext || (u2 = /* @__PURE__ */ new Set(), (t2 = {})[l2.__c] = this, this.getChildContext = function() {
            return t2;
        }, this.componentWillUnmount = function() {
            u2 = null;
        }, this.shouldComponentUpdate = function(n4) {
            this.props.value != n4.value && u2.forEach(function(n5) {
                n5.__e = true, M(n5);
            });
        }, this.sub = function(n4) {
            u2.add(n4);
            var l3 = n4.componentWillUnmount;
            n4.componentWillUnmount = function() {
                u2 && u2.delete(n4), l3 && l3.call(n4);
            };
        }), n3.children;
    }
    return l2.__c = "__cC" + h++, l2.__ = n2, l2.Provider = l2.__l = (l2.Consumer = function(n3, l3) {
        return n3.children(l3);
    }).contextType = l2, l2;
}
n$1 = y.slice, l$1 = {
    __e: function(n2, l2, u2, t2) {
        for(var i2, r2, o2; l2 = l2.__;)if ((i2 = l2.__c) && !i2.__) try {
            if ((r2 = i2.constructor) && null != r2.getDerivedStateFromError && (i2.setState(r2.getDerivedStateFromError(n2)), o2 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t2 || {}), o2 = i2.__d), o2) return i2.__E = i2;
        } catch (l3) {
            n2 = l3;
        }
        throw n2;
    }
}, u$1 = 0, t$1 = function(n2) {
    return null != n2 && null == n2.constructor;
}, x.prototype.setState = function(n2, l2) {
    var u2;
    u2 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n2 && (n2 = n2(d({}, u2), this.props)), n2 && d(u2, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M(this));
}, x.prototype.forceUpdate = function(n2) {
    this.__v && (this.__e = true, n2 && this.__h.push(n2), M(this));
}, x.prototype.render = k, i$1 = [], o$1 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n2, l2) {
    return n2.__v.__b - l2.__v.__b;
}, $.__r = 0, f$1 = /(PointerCapture)$|Capture$/i, c$1 = 0, s$1 = F(false), a$1 = F(true), h = 0;
var t = /["&<]/;
function n(r2) {
    if (0 === r2.length || false === t.test(r2)) return r2;
    for(var e2 = 0, n2 = 0, o2 = "", f2 = ""; n2 < r2.length; n2++){
        switch(r2.charCodeAt(n2)){
            case 34:
                f2 = "&quot;";
                break;
            case 38:
                f2 = "&amp;";
                break;
            case 60:
                f2 = "&lt;";
                break;
            default:
                continue;
        }
        n2 !== e2 && (o2 += r2.slice(e2, n2)), o2 += f2, e2 = n2 + 1;
    }
    return n2 !== e2 && (o2 += r2.slice(e2, n2)), o2;
}
var o = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, f = 0, i = Array.isArray;
function u(e2, t2, n2, o2, i2, u2) {
    t2 || (t2 = {});
    var a2, c2, p2 = t2;
    if ("ref" in p2) for(c2 in p2 = {}, t2)"ref" == c2 ? a2 = t2[c2] : p2[c2] = t2[c2];
    var l2 = {
        type: e2,
        props: p2,
        key: n2,
        ref: a2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __c: null,
        constructor: void 0,
        __v: --f,
        __i: -1,
        __u: 0,
        __source: i2,
        __self: u2
    };
    if ("function" == typeof e2 && (a2 = e2.defaultProps)) for(c2 in a2)void 0 === p2[c2] && (p2[c2] = a2[c2]);
    return l$1.vnode && l$1.vnode(l2), l2;
}
function a(r2) {
    var t2 = u(k, {
        tpl: r2,
        exprs: [].slice.call(arguments, 1)
    });
    return t2.key = t2.__v, t2;
}
var c = {}, p = /[A-Z]/g;
function l(e2, t2) {
    if (l$1.attr) {
        var f2 = l$1.attr(e2, t2);
        if ("string" == typeof f2) return f2;
    }
    if ("ref" === e2 || "key" === e2) return "";
    if ("style" === e2 && "object" == typeof t2) {
        var i2 = "";
        for(var u2 in t2){
            var a2 = t2[u2];
            if (null != a2 && "" !== a2) {
                var l2 = "-" == u2[0] ? u2 : c[u2] || (c[u2] = u2.replace(p, "-$&").toLowerCase()), s2 = ";";
                "number" != typeof a2 || l2.startsWith("--") || o.test(l2) || (s2 = "px;"), i2 = i2 + l2 + ":" + a2 + s2;
            }
        }
        return e2 + '="' + i2 + '"';
    }
    return null == t2 || false === t2 || "function" == typeof t2 || "object" == typeof t2 ? "" : true === t2 ? e2 : e2 + '="' + n(t2) + '"';
}
function s(r2) {
    if (null == r2 || "boolean" == typeof r2 || "function" == typeof r2) return null;
    if ("object" == typeof r2) {
        if (void 0 === r2.constructor) return r2;
        if (i(r2)) {
            for(var e2 = 0; e2 < r2.length; e2++)r2[e2] = s(r2[e2]);
            return r2;
        }
    }
    return n("" + r2);
}
;
}}),
"[project]/node_modules/@stagewise/toolbar/dist/panel-Ci3s5SA7.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "A": (()=>A$1),
    "C": (()=>ConfigProvider),
    "D": (()=>D),
    "H": (()=>HotkeyActions),
    "P": (()=>Panel),
    "R": (()=>Rn),
    "S": (()=>SRPCBridgeProvider),
    "T": (()=>T$1),
    "V": (()=>VSCodeProvider),
    "_": (()=>_),
    "a": (()=>cn),
    "b": (()=>useVSCode),
    "c": (()=>clsx),
    "d": (()=>d),
    "e": (()=>useSRPCBridge),
    "f": (()=>PluginProvider),
    "g": (()=>_n),
    "h": (()=>hotkeyActionDefinitions),
    "i": (()=>g$1),
    "j": (()=>getElementAtPoint),
    "k": (()=>companionAnchorTagName),
    "m": (()=>mn),
    "q": (()=>q$1),
    "u": (()=>usePlugins),
    "x": (()=>x$1),
    "y": (()=>y)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@stagewise/toolbar/dist/jsx-runtime-Bf2kozQ6.js [app-client] (ecmascript)");
;
var t, r$1, u, i, o = 0, f = [], c = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"], e = c.__b, a = c.__r, v = c.diffed, l = c.__c, m = c.unmount, s = c.__;
function p(n, t2) {
    c.__h && c.__h(r$1, n, o || t2), o = 0;
    var u2 = r$1.__H || (r$1.__H = {
        __: [],
        __h: []
    });
    return n >= u2.__.length && u2.__.push({}), u2.__[n];
}
function d(n) {
    return o = 1, h(D$1, n);
}
function h(n, u2, i2) {
    var o2 = p(t++, 2);
    if (o2.t = n, !o2.__c && (o2.__ = [
        i2 ? i2(u2) : D$1(void 0, u2),
        function(n2) {
            var t2 = o2.__N ? o2.__N[0] : o2.__[0], r2 = o2.t(t2, n2);
            t2 !== r2 && (o2.__N = [
                r2,
                o2.__[1]
            ], o2.__c.setState({}));
        }
    ], o2.__c = r$1, !r$1.__f)) {
        var f2 = function(n2, t2, r2) {
            if (!o2.__c.__H) return true;
            var u3 = o2.__c.__H.__.filter(function(n3) {
                return !!n3.__c;
            });
            if (u3.every(function(n3) {
                return !n3.__N;
            })) return !c2 || c2.call(this, n2, t2, r2);
            var i3 = o2.__c.props !== n2;
            return u3.forEach(function(n3) {
                if (n3.__N) {
                    var t3 = n3.__[0];
                    n3.__ = n3.__N, n3.__N = void 0, t3 !== n3.__[0] && (i3 = true);
                }
            }), c2 && c2.call(this, n2, t2, r2) || i3;
        };
        r$1.__f = true;
        var c2 = r$1.shouldComponentUpdate, e2 = r$1.componentWillUpdate;
        r$1.componentWillUpdate = function(n2, t2, r2) {
            if (this.__e) {
                var u3 = c2;
                c2 = void 0, f2(n2, t2, r2), c2 = u3;
            }
            e2 && e2.call(this, n2, t2, r2);
        }, r$1.shouldComponentUpdate = f2;
    }
    return o2.__N || o2.__;
}
function y(n, u2) {
    var i2 = p(t++, 3);
    !c.__s && C$1(i2.__H, u2) && (i2.__ = n, i2.u = u2, r$1.__H.__h.push(i2));
}
function _(n, u2) {
    var i2 = p(t++, 4);
    !c.__s && C$1(i2.__H, u2) && (i2.__ = n, i2.u = u2, r$1.__h.push(i2));
}
function A$1(n) {
    return o = 5, T$1(function() {
        return {
            current: n
        };
    }, []);
}
function F$1(n, t2, r2) {
    o = 6, _(function() {
        if ("function" == typeof n) {
            var r3 = n(t2());
            return function() {
                n(null), r3 && "function" == typeof r3 && r3();
            };
        }
        if (n) return n.current = t2(), function() {
            return n.current = null;
        };
    }, null == r2 ? r2 : r2.concat(n));
}
function T$1(n, r2) {
    var u2 = p(t++, 7);
    return C$1(u2.__H, r2) && (u2.__ = n(), u2.__H = r2, u2.__h = n), u2.__;
}
function q$1(n, t2) {
    return o = 8, T$1(function() {
        return n;
    }, t2);
}
function x$1(n) {
    var u2 = r$1.context[n.__c], i2 = p(t++, 9);
    return i2.c = n, u2 ? (null == i2.__ && (i2.__ = true, u2.sub(r$1)), u2.props.value) : n.__;
}
function P$1(n, t2) {
    c.useDebugValue && c.useDebugValue(t2 ? t2(n) : n);
}
function g$1() {
    var n = p(t++, 11);
    if (!n.__) {
        for(var u2 = r$1.__v; null !== u2 && !u2.__m && null !== u2.__;)u2 = u2.__;
        var i2 = u2.__m || (u2.__m = [
            0,
            0
        ]);
        n.__ = "P" + i2[0] + "-" + i2[1]++;
    }
    return n.__;
}
function j$1() {
    for(var n; n = f.shift();)if (n.__P && n.__H) try {
        n.__H.__h.forEach(z$2), n.__H.__h.forEach(B$1), n.__H.__h = [];
    } catch (t2) {
        n.__H.__h = [], c.__e(t2, n.__v);
    }
}
c.__b = function(n) {
    r$1 = null, e && e(n);
}, c.__ = function(n, t2) {
    n && t2.__k && t2.__k.__m && (n.__m = t2.__k.__m), s && s(n, t2);
}, c.__r = function(n) {
    a && a(n), t = 0;
    var i2 = (r$1 = n.__c).__H;
    i2 && (u === r$1 ? (i2.__h = [], r$1.__h = [], i2.__.forEach(function(n2) {
        n2.__N && (n2.__ = n2.__N), n2.u = n2.__N = void 0;
    })) : (i2.__h.forEach(z$2), i2.__h.forEach(B$1), i2.__h = [], t = 0)), u = r$1;
}, c.diffed = function(n) {
    v && v(n);
    var t2 = n.__c;
    t2 && t2.__H && (t2.__H.__h.length && (1 !== f.push(t2) && i === c.requestAnimationFrame || ((i = c.requestAnimationFrame) || w$1)(j$1)), t2.__H.__.forEach(function(n2) {
        n2.u && (n2.__H = n2.u), n2.u = void 0;
    })), u = r$1 = null;
}, c.__c = function(n, t2) {
    t2.some(function(n2) {
        try {
            n2.__h.forEach(z$2), n2.__h = n2.__h.filter(function(n3) {
                return !n3.__ || B$1(n3);
            });
        } catch (r2) {
            t2.some(function(n3) {
                n3.__h && (n3.__h = []);
            }), t2 = [], c.__e(r2, n2.__v);
        }
    }), l && l(n, t2);
}, c.unmount = function(n) {
    m && m(n);
    var t2, r2 = n.__c;
    r2 && r2.__H && (r2.__H.__.forEach(function(n2) {
        try {
            z$2(n2);
        } catch (n3) {
            t2 = n3;
        }
    }), r2.__H = void 0, t2 && c.__e(t2, r2.__v));
};
var k$1 = "function" == typeof requestAnimationFrame;
function w$1(n) {
    var t2, r2 = function() {
        clearTimeout(u2), k$1 && cancelAnimationFrame(t2), setTimeout(n);
    }, u2 = setTimeout(r2, 100);
    k$1 && (t2 = requestAnimationFrame(r2));
}
function z$2(n) {
    var t2 = r$1, u2 = n.__c;
    "function" == typeof u2 && (n.__c = void 0, u2()), r$1 = t2;
}
function B$1(n) {
    var t2 = r$1;
    n.__c = n.__(), r$1 = t2;
}
function C$1(n, t2) {
    return !n || n.length !== t2.length || t2.some(function(t3, r2) {
        return t3 !== n[r2];
    });
}
function D$1(n, t2) {
    return "function" == typeof t2 ? t2(n) : t2;
}
function g(n, t2) {
    for(var e2 in t2)n[e2] = t2[e2];
    return n;
}
function E(n, t2) {
    for(var e2 in n)if ("__source" !== e2 && !(e2 in t2)) return true;
    for(var r2 in t2)if ("__source" !== r2 && n[r2] !== t2[r2]) return true;
    return false;
}
function C(n, t2) {
    var e2 = t2(), r2 = d({
        t: {
            __: e2,
            u: t2
        }
    }), u2 = r2[0].t, o2 = r2[1];
    return _(function() {
        u2.__ = e2, u2.u = t2, x(u2) && o2({
            t: u2
        });
    }, [
        n,
        e2,
        t2
    ]), y(function() {
        return x(u2) && o2({
            t: u2
        }), n(function() {
            x(u2) && o2({
                t: u2
            });
        });
    }, [
        n
    ]), e2;
}
function x(n) {
    var t2, e2, r2 = n.u, u2 = n.__;
    try {
        var o2 = r2();
        return !((t2 = u2) === (e2 = o2) && (0 !== t2 || 1 / t2 == 1 / e2) || t2 != t2 && e2 != e2);
    } catch (n2) {
        return true;
    }
}
function R(n) {
    n();
}
function w(n) {
    return n;
}
function k() {
    return [
        false,
        R
    ];
}
var I = _;
function N(n, t2) {
    this.props = n, this.context = t2;
}
function M(n, e2) {
    function r2(n2) {
        var t2 = this.props.ref, r3 = t2 == n2.ref;
        return !r3 && t2 && (t2.call ? t2(null) : t2.current = null), e2 ? !e2(this.props, n2) || !r3 : E(this.props, n2);
    }
    function u2(e3) {
        return this.shouldComponentUpdate = r2, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(n, e3);
    }
    return u2.displayName = "Memo(" + (n.displayName || n.name) + ")", u2.prototype.isReactComponent = true, u2.__f = true, u2;
}
(N.prototype = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"]()).isPureReactComponent = true, N.prototype.shouldComponentUpdate = function(n, t2) {
    return E(this.props, n) || E(this.state, t2);
};
var T = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__b;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__b = function(n) {
    n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), T && T(n);
};
var A = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function D(n) {
    function t2(t3) {
        var e2 = g({}, t3);
        return delete e2.ref, n(e2, t3.ref || null);
    }
    return t2.$$typeof = A, t2.render = t2, t2.prototype.isReactComponent = t2.__f = true, t2.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t2;
}
var L = function(n, t2) {
    return null == n ? null : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(n).map(t2));
}, O = {
    map: L,
    forEach: L,
    count: function(n) {
        return n ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(n).length : 0;
    },
    only: function(n) {
        var t2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(n);
        if (1 !== t2.length) throw "Children.only";
        return t2[0];
    },
    toArray: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"]
}, F = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__e;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__e = function(n, t2, e2, r2) {
    if (n.then) {
        for(var u2, o2 = t2; o2 = o2.__;)if ((u2 = o2.__c) && u2.__c) return null == t2.__e && (t2.__e = e2.__e, t2.__k = e2.__k), u2.__c(n, t2);
    }
    F(n, t2, e2, r2);
};
var U = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].unmount;
function V(n, t2, e2) {
    return n && (n.__c && n.__c.__H && (n.__c.__H.__.forEach(function(n2) {
        "function" == typeof n2.__c && n2.__c();
    }), n.__c.__H = null), null != (n = g({}, n)).__c && (n.__c.__P === e2 && (n.__c.__P = t2), n.__c.__e = true, n.__c = null), n.__k = n.__k && n.__k.map(function(n2) {
        return V(n2, t2, e2);
    })), n;
}
function W(n, t2, e2) {
    return n && e2 && (n.__v = null, n.__k = n.__k && n.__k.map(function(n2) {
        return W(n2, t2, e2);
    }), n.__c && n.__c.__P === t2 && (n.__e && e2.appendChild(n.__e), n.__c.__e = true, n.__c.__P = e2)), n;
}
function P() {
    this.__u = 0, this.o = null, this.__b = null;
}
function j(n) {
    var t2 = n.__.__c;
    return t2 && t2.__a && t2.__a(n);
}
function z$1(n) {
    var e2, r2, u2;
    function o2(o3) {
        if (e2 || (e2 = n()).then(function(n2) {
            r2 = n2.default || n2;
        }, function(n2) {
            u2 = n2;
        }), u2) throw u2;
        if (!r2) throw e2;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(r2, o3);
    }
    return o2.displayName = "Lazy", o2.__f = true, o2;
}
function B() {
    this.i = null, this.l = null;
}
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].unmount = function(n) {
    var t2 = n.__c;
    t2 && t2.__R && t2.__R(), t2 && 32 & n.__u && (n.type = null), U && U(n);
}, (P.prototype = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"]()).__c = function(n, t2) {
    var e2 = t2.__c, r2 = this;
    null == r2.o && (r2.o = []), r2.o.push(e2);
    var u2 = j(r2.__v), o2 = false, i2 = function() {
        o2 || (o2 = true, e2.__R = null, u2 ? u2(l2) : l2());
    };
    e2.__R = i2;
    var l2 = function() {
        if (!--r2.__u) {
            if (r2.state.__a) {
                var n2 = r2.state.__a;
                r2.__v.__k[0] = W(n2, n2.__c.__P, n2.__c.__O);
            }
            var t3;
            for(r2.setState({
                __a: r2.__b = null
            }); t3 = r2.o.pop();)t3.forceUpdate();
        }
    };
    r2.__u++ || 32 & t2.__u || r2.setState({
        __a: r2.__b = r2.__v.__k[0]
    }), n.then(i2, i2);
}, P.prototype.componentWillUnmount = function() {
    this.o = [];
}, P.prototype.render = function(n, e2) {
    if (this.__b) {
        if (this.__v.__k) {
            var r2 = document.createElement("div"), o2 = this.__v.__k[0].__c;
            this.__v.__k[0] = V(this.__b, r2, o2.__O = o2.__P);
        }
        this.__b = null;
    }
    var i2 = e2.__a && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], null, n.fallback);
    return i2 && (i2.__u &= -33), [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], null, e2.__a ? null : n.children),
        i2
    ];
};
var H = function(n, t2, e2) {
    if (++e2[1] === e2[0] && n.l.delete(t2), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.l.size)) for(e2 = n.i; e2;){
        for(; e2.length > 3;)e2.pop()();
        if (e2[1] < e2[0]) break;
        n.i = e2 = e2[2];
    }
};
function Z(n) {
    return this.getChildContext = function() {
        return n.context;
    }, n.children;
}
function Y(n) {
    var e2 = this, r2 = n.h;
    if (e2.componentWillUnmount = function() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])(null, e2.v), e2.v = null, e2.h = null;
    }, e2.h && e2.h !== r2 && e2.componentWillUnmount(), !e2.v) {
        for(var u2 = e2.__v; null !== u2 && !u2.__m && null !== u2.__;)u2 = u2.__;
        e2.h = r2, e2.v = {
            nodeType: 1,
            parentNode: r2,
            childNodes: [],
            __k: {
                __m: u2.__m
            },
            contains: function() {
                return true;
            },
            appendChild: function(n2) {
                this.childNodes.push(n2), e2.h.appendChild(n2);
            },
            insertBefore: function(n2, t2) {
                this.childNodes.push(n2), e2.h.insertBefore(n2, t2);
            },
            removeChild: function(n2) {
                this.childNodes.splice(this.childNodes.indexOf(n2) >>> 1, 1), e2.h.removeChild(n2);
            }
        };
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(Z, {
        context: e2.context
    }, n.__v), e2.v);
}
function $(n, e2) {
    var r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(Y, {
        __v: n,
        h: e2
    });
    return r2.containerInfo = e2, r2;
}
(B.prototype = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"]()).__a = function(n) {
    var t2 = this, e2 = j(t2.__v), r2 = t2.l.get(n);
    return r2[0]++, function(u2) {
        var o2 = function() {
            t2.props.revealOrder ? (r2.push(u2), H(t2, n, r2)) : u2();
        };
        e2 ? e2(o2) : o2();
    };
}, B.prototype.render = function(n) {
    this.i = null, this.l = /* @__PURE__ */ new Map();
    var t2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(n.children);
    n.revealOrder && "b" === n.revealOrder[0] && t2.reverse();
    for(var e2 = t2.length; e2--;)this.l.set(t2[e2], this.i = [
        1,
        0,
        this.i
    ]);
    return n.children;
}, B.prototype.componentDidUpdate = B.prototype.componentDidMount = function() {
    var n = this;
    this.l.forEach(function(t2, e2) {
        H(n, e2, t2);
    });
};
var q = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, G = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, J = /^on(Ani|Tra|Tou|BeforeInp|Compo)/, K = /[A-Z0-9]/g, Q = "undefined" != typeof document, X = function(n) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n);
};
function nn(n, t2, e2) {
    return null == t2.__k && (t2.textContent = ""), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])(n, t2), "function" == typeof e2 && e2(), n ? n.__c : null;
}
function tn(n, t2, e2) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"])(n, t2), "function" == typeof e2 && e2(), n ? n.__c : null;
}
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"].prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(t2) {
    Object.defineProperty(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"].prototype, t2, {
        configurable: true,
        get: function() {
            return this["UNSAFE_" + t2];
        },
        set: function(n) {
            Object.defineProperty(this, t2, {
                configurable: true,
                writable: true,
                value: n
            });
        }
    });
});
var en = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].event;
function rn() {}
function un() {
    return this.cancelBubble;
}
function on() {
    return this.defaultPrevented;
}
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].event = function(n) {
    return en && (n = en(n)), n.persist = rn, n.isPropagationStopped = un, n.isDefaultPrevented = on, n.nativeEvent = n;
};
var ln, cn$1 = {
    enumerable: false,
    configurable: true,
    get: function() {
        return this.class;
    }
}, fn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].vnode;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].vnode = function(n) {
    "string" == typeof n.type && function(n2) {
        var t2 = n2.props, e2 = n2.type, u2 = {}, o2 = -1 === e2.indexOf("-");
        for(var i2 in t2){
            var l2 = t2[i2];
            if (!("value" === i2 && "defaultValue" in t2 && null == l2 || Q && "children" === i2 && "noscript" === e2 || "class" === i2 || "className" === i2)) {
                var c2 = i2.toLowerCase();
                "defaultValue" === i2 && "value" in t2 && null == t2.value ? i2 = "value" : "download" === i2 && true === l2 ? l2 = "" : "translate" === c2 && "no" === l2 ? l2 = false : "o" === c2[0] && "n" === c2[1] ? "ondoubleclick" === c2 ? i2 = "ondblclick" : "onchange" !== c2 || "input" !== e2 && "textarea" !== e2 || X(t2.type) ? "onfocus" === c2 ? i2 = "onfocusin" : "onblur" === c2 ? i2 = "onfocusout" : J.test(i2) && (i2 = c2) : c2 = i2 = "oninput" : o2 && G.test(i2) ? i2 = i2.replace(K, "-$&").toLowerCase() : null === l2 && (l2 = void 0), "oninput" === c2 && u2[i2 = c2] && (i2 = "oninputCapture"), u2[i2] = l2;
            }
        }
        "select" == e2 && u2.multiple && Array.isArray(u2.value) && (u2.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(t2.children).forEach(function(n3) {
            n3.props.selected = -1 != u2.value.indexOf(n3.props.value);
        })), "select" == e2 && null != u2.defaultValue && (u2.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(t2.children).forEach(function(n3) {
            n3.props.selected = u2.multiple ? -1 != u2.defaultValue.indexOf(n3.props.value) : u2.defaultValue == n3.props.value;
        })), t2.class && !t2.className ? (u2.class = t2.class, Object.defineProperty(u2, "className", cn$1)) : (t2.className && !t2.class || t2.class && t2.className) && (u2.class = u2.className = t2.className), n2.props = u2;
    }(n), n.$$typeof = q, fn && fn(n);
};
var an = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__r;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].__r = function(n) {
    an && an(n), ln = n.__c;
};
var sn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].diffed;
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"].diffed = function(n) {
    sn && sn(n);
    var t2 = n.props, e2 = n.__e;
    null != e2 && "textarea" === n.type && "value" in t2 && t2.value !== e2.value && (e2.value = null == t2.value ? "" : t2.value), ln = null;
};
var hn = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n) {
                return ln.__n[n.__c].props.value;
            },
            useCallback: q$1,
            useContext: x$1,
            useDebugValue: P$1,
            useDeferredValue: w,
            useEffect: y,
            useId: g$1,
            useImperativeHandle: F$1,
            useInsertionEffect: I,
            useLayoutEffect: _,
            useMemo: T$1,
            useReducer: h,
            useRef: A$1,
            useState: d,
            useSyncExternalStore: C,
            useTransition: k
        }
    }
};
function dn(n) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"].bind(null, n);
}
function mn(n) {
    return !!n && n.$$typeof === q;
}
function pn(n) {
    return mn(n) && n.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"];
}
function yn(n) {
    return !!n && !!n.displayName && ("string" == typeof n.displayName || n.displayName instanceof String) && n.displayName.startsWith("Memo(");
}
function _n(n) {
    return mn(n) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["J"].apply(null, arguments) : n;
}
function bn(n) {
    return !!n.__k && ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])(null, n), true);
}
function Sn(n) {
    return n && (n.base || 1 === n.nodeType && n) || null;
}
var gn = function(n, t2) {
    return n(t2);
}, En = function(n, t2) {
    return n(t2);
}, Cn = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], xn = mn, Rn = {
    useState: d,
    useId: g$1,
    useReducer: h,
    useEffect: y,
    useLayoutEffect: _,
    useInsertionEffect: I,
    useTransition: k,
    useDeferredValue: w,
    useSyncExternalStore: C,
    startTransition: R,
    useRef: A$1,
    useImperativeHandle: F$1,
    useMemo: T$1,
    useCallback: q$1,
    useContext: x$1,
    useDebugValue: P$1,
    version: "18.3.1",
    Children: O,
    render: nn,
    hydrate: tn,
    unmountComponentAtNode: bn,
    createPortal: $,
    createElement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"],
    createContext: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"],
    createFactory: dn,
    cloneElement: _n,
    createRef: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"],
    Fragment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"],
    isValidElement: mn,
    isElement: xn,
    isFragment: pn,
    isMemo: yn,
    findDOMNode: Sn,
    Component: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"],
    PureComponent: N,
    memo: M,
    forwardRef: D,
    flushSync: En,
    unstable_batchedUpdates: gn,
    StrictMode: Cn,
    Suspense: P,
    SuspenseList: B,
    lazy: z$1,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: hn
};
var DEFAULT_OPTIONS = {
    maxReconnectAttempts: 5,
    reconnectDelay: 1e3,
    requestTimeout: 3e4
};
var WebSocketRpcBridge = class {
    constructor(options = {}){
        this.ws = null;
        this.pendingRequests = /* @__PURE__ */ new Map();
        this.reconnectAttempts = 0;
        this.methods = {};
        this.isIntentionalClose = false;
        this.options = {
            ...DEFAULT_OPTIONS,
            ...options
        };
    }
    /**
   * Register RPC method handlers
   * @param methodHandlers Object containing method handlers
   */ register(methodHandlers) {
        Object.entries(methodHandlers).forEach(([methodName, handler])=>{
            this.methods[methodName] = {
                handler
            };
        });
    }
    /**
   * Generic method to call a remote procedure with support for streaming updates
   * @param method Method name to call
   * @param payload Request payload
   * @param onUpdate Optional callback for progress updates
   * @returns Promise resolving with the response
   */ callMethod(method, payload, onUpdate) {
        if (!this.ws) {
            throw new Error("WebSocket is not connected");
        }
        const id = crypto.randomUUID();
        const requestMessage = {
            id,
            messageType: "request",
            method,
            payload
        };
        return new Promise((resolve, reject)=>{
            var _a;
            const timeout = setTimeout(()=>{
                this.pendingRequests.delete(id);
                reject(new Error(`Request timed out: ${method}`));
            }, this.options.requestTimeout);
            this.pendingRequests.set(id, {
                resolve,
                reject,
                timeout,
                onUpdate
            });
            (_a = this.ws) == null ? void 0 : _a.send(JSON.stringify(requestMessage));
        });
    }
    /**
   * Sets up WebSocket event handlers
   * @param ws WebSocket instance
   */ setupWebSocketHandlers(ws) {
        ws.onmessage = (event)=>{
            try {
                const message = JSON.parse(event.data);
                this.handleMessage(message);
            } catch (error) {
                console.error("Error handling WebSocket message:", error);
            }
        };
        ws.onclose = ()=>{
            this.handleDisconnect();
        };
        ws.onerror = (event)=>{
            console.error("WebSocket error:", event);
        };
    }
    /**
   * Handles incoming WebSocket messages
   * @param message The message to handle
   */ handleMessage(message) {
        const { messageType, id } = message;
        switch(messageType){
            case "request":
                this.handleRequest(message);
                break;
            case "response":
                this.handleResponse(id, message.payload);
                break;
            case "update":
                this.handleUpdate(id, message.payload);
                break;
            case "error":
                this.handleError(id, message.error.message);
                break;
            default:
                console.warn(`Unknown message type: ${messageType}`);
        }
    }
    /**
   * Handle incoming requests by invoking the registered method
   * @param message Request message
   */ async handleRequest(message) {
        const { id, method, payload } = message;
        if (!method) {
            this.sendError(id, "Method name is required");
            return;
        }
        const methodDef = this.methods[method];
        if (!methodDef) {
            this.sendError(id, `Method not found: ${method}`);
            return;
        }
        try {
            const sendUpdate = (update)=>{
                this.sendUpdate(id, method, update);
            };
            const result = await methodDef.handler(payload, sendUpdate);
            this.sendResponse(id, method, result);
        } catch (error) {
            this.sendError(id, error instanceof Error ? error.message : String(error));
        }
    }
    /**
   * Handle response messages by resolving the pending request
   * @param id Request ID
   * @param payload Response payload
   */ handleResponse(id, payload) {
        const pendingRequest = this.pendingRequests.get(id);
        if (!pendingRequest) {
            console.warn(`Received response for unknown request ID: ${id}`);
            return;
        }
        clearTimeout(pendingRequest.timeout);
        this.pendingRequests.delete(id);
        pendingRequest.resolve(payload);
    }
    /**
   * Handle update messages by calling the update callback
   * @param id Request ID
   * @param payload Update payload
   */ handleUpdate(id, payload) {
        const pendingRequest = this.pendingRequests.get(id);
        if (!pendingRequest || !pendingRequest.onUpdate) {
            console.warn(`Received update for unknown request ID: ${id}`);
            return;
        }
        pendingRequest.onUpdate(payload);
    }
    /**
   * Handle error messages by rejecting the pending request
   * @param id Request ID
   * @param error Error message
   */ handleError(id, error) {
        const pendingRequest = this.pendingRequests.get(id);
        if (!pendingRequest) {
            console.warn(`Received error for unknown request ID: ${id}`);
            return;
        }
        clearTimeout(pendingRequest.timeout);
        this.pendingRequests.delete(id);
        pendingRequest.reject(new Error(error));
    }
    /**
   * Send a response message
   * @param id Request ID
   * @param method Method name
   * @param payload Response payload
   */ sendResponse(id, method, payload) {
        if (!this.ws) {
            throw new Error("WebSocket is not connected");
        }
        const responseMessage = {
            id,
            messageType: "response",
            method,
            payload
        };
        this.ws.send(JSON.stringify(responseMessage));
    }
    /**
   * Send an update message for streaming
   * @param id Request ID
   * @param method Method name
   * @param payload Update payload
   */ sendUpdate(id, method, payload) {
        if (!this.ws) {
            throw new Error("WebSocket is not connected");
        }
        const updateMessage = {
            id,
            messageType: "update",
            method,
            payload
        };
        this.ws.send(JSON.stringify(updateMessage));
    }
    /**
   * Send an error message
   * @param id Request ID
   * @param errorMessage Error message
   */ sendError(id, errorMessage) {
        if (!this.ws) {
            throw new Error("WebSocket is not connected");
        }
        const errorResponse = {
            id,
            messageType: "error",
            error: {
                message: errorMessage
            }
        };
        this.ws.send(JSON.stringify(errorResponse));
    }
    /**
   * Handle disconnection by attempting to reconnect
   */ handleDisconnect() {
        if (this.isIntentionalClose) {
            console.log("WebSocket closed intentionally, not attempting to reconnect");
            this.clearPendingRequests(new Error("Connection closed by user"));
            return;
        }
        if (this.reconnectAttempts < this.options.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.options.maxReconnectAttempts})...`);
            setTimeout(()=>this.reconnect(), this.options.reconnectDelay * this.reconnectAttempts);
        } else {
            console.error("Max reconnection attempts reached");
            this.clearPendingRequests(new Error("Connection closed"));
        }
    }
    /**
   * Clear all pending requests with an error
   * @param error Error to reject with
   */ clearPendingRequests(error) {
        this.pendingRequests.forEach(({ reject })=>{
            reject(error);
        });
        this.pendingRequests.clear();
    }
    /**
   * Close the WebSocket connection
   * @returns Promise that resolves when the connection is closed
   */ async close() {
        this.isIntentionalClose = true;
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.clearPendingRequests(new Error("Connection closed by user"));
    }
};
function createBridgeContract(contract2) {
    return contract2;
}
function validateWithZod(schema, data, context, silent = false) {
    const result = schema.safeParse(data);
    if (!result.success) {
        const error = new Error(`Validation failed for ${context}: ${result.error.message}`);
        if (silent) {
            console.error(error);
            return data;
        }
        throw error;
    }
    return result.data;
}
var ZodTypedBridge = class {
    constructor(bridge, contract2){
        this.bridge = bridge;
        this.contract = contract2;
        this.call = new Proxy({}, {
            get: (target, prop)=>{
                return (request, options)=>{
                    return this.callMethod(prop, request, options);
                };
            }
        });
    }
    async callMethod(method, request, options) {
        const methodContract = this.contract.consumes[method];
        if (!methodContract) {
            throw new Error(`Method ${String(method)} not found in contract`);
        }
        const validatedRequest = validateWithZod(methodContract.request, request, `request for method ${String(method)}`);
        const onUpdate = (options == null ? void 0 : options.onUpdate) && methodContract.update ? (update)=>{
            var _a;
            if (!methodContract.update) return;
            try {
                const validatedUpdate = validateWithZod(methodContract.update, update, `update for method ${String(method)}`, true);
                (_a = options.onUpdate) == null ? void 0 : _a.call(options, validatedUpdate);
            } catch (error) {
                console.error("Update validation failed:", error);
            }
        } : void 0;
        const response = await this.bridge.callMethod(method, validatedRequest, onUpdate);
        return validateWithZod(methodContract.response, response, `response for method ${String(method)}`);
    }
    register(implementations) {
        const wrappedImplementations = {};
        for (const [method, implementation] of Object.entries(implementations)){
            const methodContract = this.contract.serves[method];
            if (!methodContract) {
                throw new Error(`Method ${method} not found in contract`);
            }
            wrappedImplementations[method] = async (request, sendUpdate)=>{
                const validatedRequest = validateWithZod(methodContract.request, request, `request for method ${method}`);
                const wrappedSendUpdate = methodContract.update && sendUpdate ? (update)=>{
                    if (!methodContract.update) return;
                    try {
                        const validatedUpdate = validateWithZod(methodContract.update, update, `update for method ${method}`, true);
                        sendUpdate(validatedUpdate);
                    } catch (error) {
                        console.error("Update validation failed:", error);
                    }
                } : void 0;
                const response = await implementation(validatedRequest, {
                    sendUpdate: wrappedSendUpdate
                });
                return validateWithZod(methodContract.response, response, `response for method ${method}`);
            };
        }
        this.bridge.register(wrappedImplementations);
    }
    async close() {
        await this.bridge.close();
    }
};
var ClientBridge = class extends WebSocketRpcBridge {
    constructor(url, options){
        super(options);
        this.reconnectTimer = null;
        this.url = url;
    }
    call(method, payload, onUpdate) {
        return this.callMethod(method, payload, onUpdate);
    }
    reconnect() {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
        }
        this.reconnectTimer = setTimeout(async ()=>{
            try {
                await this.connect();
            } catch (error) {
                this.reconnect();
            }
        }, this.options.reconnectDelay);
    }
    connect() {
        return new Promise((resolve, reject)=>{
            try {
                const ws = new window.WebSocket(this.url);
                ws.onopen = ()=>{
                    this.ws = ws;
                    this.setupWebSocketHandlers(ws);
                    resolve();
                };
                ws.onerror = ()=>{
                    reject(new Error("Failed to connect to WebSocket server"));
                };
            } catch (error) {
                reject(error);
            }
        });
    }
};
var ZodClient = class extends ZodTypedBridge {
    constructor(url, contract2, options){
        super(new ClientBridge(url, options), {
            serves: contract2.client || {},
            consumes: contract2.server || {}
        });
    }
    connect() {
        return this.bridge.connect();
    }
};
function createSRPCClientBridge(url, contract2, options) {
    return new ZodClient(url, contract2, options);
}
var util;
(function(util2) {
    util2.assertEqual = (val)=>val;
    function assertIs(_arg) {}
    util2.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items){
            obj[item] = item;
        }
        return obj;
    };
    util2.getValidEnumValues = (obj)=>{
        const validKeys = util2.objectKeys(obj).filter((k2)=>typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys){
            filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
    };
    util2.objectValues = (obj)=>{
        return util2.objectKeys(obj).map(function(e2) {
            return obj[e2];
        });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj)=>Object.keys(obj) : (object)=>{
        const keys = [];
        for(const key in object){
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    util2.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_2, value)=>{
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
const getParsedType = (data)=>{
    const t2 = typeof data;
    switch(t2){
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};
const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
]);
const quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    get errors() {
        return this.issues;
    }
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
        } else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                } else {
                    let curr = fieldErrors;
                    let i2 = 0;
                    while(i2 < issue.path.length){
                        const el = issue.path[i2];
                        const terminal = i2 === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                        } else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i2++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    static assert(value) {
        if (!(value instanceof ZodError)) {
            throw new Error(`Not a ZodError: ${value}`);
        }
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues){
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
                formErrors.push(mapper(sub));
            }
        }
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues)=>{
    const error = new ZodError(issues);
    return error;
};
const errorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            } else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                } else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                } else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                } else {
                    util.assertNever(issue.validation);
                }
            } else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            } else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return {
        message
    };
};
let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}
const makeIssue = (params)=>{
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    if (issueData.message !== void 0) {
        return {
            ...issueData,
            path: fullPath,
            message: issueData.message
        };
    }
    let errorMessage = "";
    const maps = errorMaps.filter((m2)=>!!m2).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: errorMessage
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const overrideMap = getErrorMap();
    const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            // contextual error map is first priority
            ctx.schemaErrorMap,
            // then schema-bound map if available
            overrideMap,
            // then global override map
            overrideMap === errorMap ? void 0 : errorMap
        ].filter((x2)=>!!x2)
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results){
            if (s2.status === "aborted") return INVALID;
            if (s2.status === "dirty") status.dirty();
            arrayValue.push(s2.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
                key,
                value
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key, value } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
}
const INVALID = Object.freeze({
    status: "aborted"
});
const DIRTY = (value)=>({
        status: "dirty",
        value
    });
const OK = (value)=>({
        status: "valid",
        value
    });
const isAborted = (x2)=>x2.status === "aborted";
const isDirty = (x2)=>x2.status === "dirty";
const isValid = (x2)=>x2.status === "valid";
const isAsync = (x2)=>typeof Promise !== "undefined" && x2 instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f2) {
    if (typeof state === "function" ? receiver !== state || true : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
    if (typeof state === "function" ? receiver !== state || true : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return state.set(receiver, value), value;
}
typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e2 = new Error(message);
    return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
};
var errorUtil;
(function(errorUtil2) {
    errorUtil2.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil2.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache, _ZodNativeEnum_cache;
class ParseInputLazyPath {
    constructor(parent, value, path, key){
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            } else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result)=>{
    if (isValid(result)) {
        return {
            success: true,
            data: result.value
        };
    } else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error () {
                if (this._error) return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            }
        };
    }
};
function processCreateParams(params) {
    if (!params) return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2) return {
        errorMap: errorMap2,
        description
    };
    const customMap = (iss, ctx)=>{
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
            return {
                message: message !== null && message !== void 0 ? message : ctx.defaultError
            };
        }
        if (typeof ctx.data === "undefined") {
            return {
                message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError
            };
        }
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        return {
            message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
class ZodType {
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult(ctx, result);
    }
    "~validate"(data) {
        var _a, _b;
        const ctx = {
            common: {
                issues: [],
                async: !!this["~standard"].async
            },
            path: [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        if (!this["~standard"].async) {
            try {
                const result = this._parseSync({
                    data,
                    path: [],
                    parent: ctx
                });
                return isValid(result) ? {
                    value: result.value
                } : {
                    issues: ctx.common.issues
                };
            } catch (err) {
                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
                    this["~standard"].async = true;
                }
                ctx.common = {
                    issues: [],
                    async: true
                };
            }
        }
        return this._parseAsync({
            data,
            path: [],
            parent: ctx
        }).then((result)=>isValid(result) ? {
                value: result.value
            } : {
                issues: ctx.common.issues
            });
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") {
                return {
                    message
                };
            } else if (typeof message === "function") {
                return message(val);
            } else {
                return message;
            }
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data)=>{
                    if (!data) {
                        setError();
                        return false;
                    } else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            } else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    constructor(def){
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
            version: 1,
            vendor: "zod",
            validate: (data)=>this["~validate"](data)
        };
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([
            this,
            option
        ], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(void 0).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
    let secondsRegexSource = `[0-5]\\d`;
    if (args.precision) {
        secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
    } else if (args.precision == null) {
        secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
    }
    const secondsQuantifier = args.precision ? "+" : "?";
    return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt)) return false;
    try {
        const [header] = jwt.split(".");
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null) return false;
        if (!decoded.typ || !decoded.alg) return false;
        if (alg && decoded.alg !== alg) return false;
        return true;
    } catch (_a) {
        return false;
    }
}
function isValidCidr(ip, version) {
    if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message
                        });
                    } else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message
                        });
                    }
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "nanoid") {
                if (!nanoidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "nanoid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") {
                try {
                    new URL(input.data);
                } catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") {
                input.data = input.data.trim();
            } else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            includes: check.value,
                            position: check.position
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            } else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            } else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "date") {
                const regex = dateRegex;
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "date",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "time") {
                const regex = timeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "time",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "duration") {
                if (!durationRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "duration",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "jwt") {
                if (!isValidJWT(input.data, check.alg)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "jwt",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cidr") {
                if (!isValidCidr(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cidr",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64") {
                if (!base64Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "base64",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64url") {
                if (!base64urlRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "base64url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _regex(regex, validation, message) {
        return this.refinement((data)=>regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil.errToObj(message)
        });
    }
    emoji(message) {
        return this._addCheck({
            kind: "emoji",
            ...errorUtil.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil.errToObj(message)
        });
    }
    nanoid(message) {
        return this._addCheck({
            kind: "nanoid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid2(message) {
        return this._addCheck({
            kind: "cuid2",
            ...errorUtil.errToObj(message)
        });
    }
    ulid(message) {
        return this._addCheck({
            kind: "ulid",
            ...errorUtil.errToObj(message)
        });
    }
    base64(message) {
        return this._addCheck({
            kind: "base64",
            ...errorUtil.errToObj(message)
        });
    }
    base64url(message) {
        return this._addCheck({
            kind: "base64url",
            ...errorUtil.errToObj(message)
        });
    }
    jwt(options) {
        return this._addCheck({
            kind: "jwt",
            ...errorUtil.errToObj(options)
        });
    }
    ip(options) {
        return this._addCheck({
            kind: "ip",
            ...errorUtil.errToObj(options)
        });
    }
    cidr(options) {
        return this._addCheck({
            kind: "cidr",
            ...errorUtil.errToObj(options)
        });
    }
    datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                local: false,
                message: options
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    date(message) {
        return this._addCheck({
            kind: "date",
            message
        });
    }
    time(options) {
        if (typeof options === "string") {
            return this._addCheck({
                kind: "time",
                precision: null,
                message: options
            });
        }
        return this._addCheck({
            kind: "time",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    duration(message) {
        return this._addCheck({
            kind: "duration",
            ...errorUtil.errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil.errToObj(message)
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message)
        });
    }
    /**
   * Equivalent to `.min(1)`
   */ nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "trim"
                }
            ]
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toLowerCase"
                }
            ]
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toUpperCase"
                }
            ]
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch)=>ch.kind === "datetime");
    }
    get isDate() {
        return !!this._def.checks.find((ch)=>ch.kind === "date");
    }
    get isTime() {
        return !!this._def.checks.find((ch)=>ch.kind === "time");
    }
    get isDuration() {
        return !!this._def.checks.find((ch)=>ch.kind === "duration");
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch)=>ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isNANOID() {
        return !!this._def.checks.find((ch)=>ch.kind === "nanoid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch)=>ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch)=>ch.kind === "ip");
    }
    get isCIDR() {
        return !!this._def.checks.find((ch)=>ch.kind === "cidr");
    }
    get isBase64() {
        return !!this._def.checks.find((ch)=>ch.kind === "base64");
    }
    get isBase64url() {
        return !!this._def.checks.find((ch)=>ch.kind === "base64url");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params)=>{
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message)
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message)
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
                return true;
            } else if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            } else if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params)=>{
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodBigInt extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            try {
                input.data = BigInt(input.data);
            } catch (_a) {
                return this._getInvalidInput(input);
            }
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.bigint,
            received: ctx.parsedType
        });
        return INVALID;
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params)=>{
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params)=>{
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_date
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params)=>{
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params)=>{
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params)=>{
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params)=>{
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
    });
};
class ZodAny extends ZodType {
    constructor(){
        super(...arguments);
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params)=>{
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
    });
};
class ZodUnknown extends ZodType {
    constructor(){
        super(...arguments);
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params)=>{
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
        });
        return INVALID;
    }
}
ZodNever.create = (params)=>{
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params)=>{
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: tooSmall ? def.exactLength.value : void 0,
                    maximum: tooBig ? def.exactLength.value : void 0,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([
                ...ctx.data
            ].map((item, i2)=>{
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
            })).then((result2)=>{
                return ParseStatus.mergeArray(status, result2);
            });
        }
        const result = [
            ...ctx.data
        ].map((item, i2)=>{
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil.toString(message)
            }
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: {
                value: len,
                message: errorUtil.toString(message)
            }
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params)=>{
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element)
        });
    } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));
    } else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for(const key in ctx.data){
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys){
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys){
                    pairs.push({
                        key: {
                            status: "valid",
                            value: key
                        },
                        value: {
                            status: "valid",
                            value: ctx.data[key]
                        }
                    });
                }
            } else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys){
                const value = ctx.data[key];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                    alwaysSet: key in ctx.data
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve().then(async ()=>{
                const syncPairs = [];
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    syncPairs.push({
                        key,
                        value,
                        alwaysSet: pair.alwaysSet
                    });
                }
                return syncPairs;
            }).then((syncPairs)=>{
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        } else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: ()=>({
                    ...this._def.shape(),
                    ...augmentation
                })
        });
    }
    /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */ merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>({
                    ...this._def.shape(),
                    ...merging._def.shape()
                }),
            typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key)=>{
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    /**
   * @deprecated
   */ deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            } else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            } else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while(newField instanceof ZodOptional){
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.strictCreate = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.lazycreate = (shape, params)=>{
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            for (const result of results){
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results){
                if (result.result.status === "dirty") {
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option)=>{
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx
                    }),
                    ctx: childCtx
                };
            })).then(handleResults);
        } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") {
                    return result;
                } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                        result,
                        ctx: childCtx
                    };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues2)=>new ZodError(issues2));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params)=>{
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
    });
};
const getDiscriminator = (type)=>{
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
        return [
            type.value
        ];
    } else if (type instanceof ZodEnum) {
        return type.options;
    } else if (type instanceof ZodNativeEnum) {
        return util.objectValues(type.enum);
    } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
        return [
            void 0
        ];
    } else if (type instanceof ZodNull) {
        return [
            null
        ];
    } else if (type instanceof ZodOptional) {
        return [
            void 0,
            ...getDiscriminator(type.unwrap())
        ];
    } else if (type instanceof ZodNullable) {
        return [
            null,
            ...getDiscriminator(type.unwrap())
        ];
    } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
    } else {
        return [];
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [
                    discriminator
                ]
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        } else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */ static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options){
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues.length) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues){
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params)
        });
    }
}
function mergeValues(a2, b2) {
    const aType = getParsedType(a2);
    const bType = getParsedType(b2);
    if (a2 === b2) {
        return {
            valid: true,
            data: a2
        };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b2);
        const sharedKeys = util.objectKeys(a2).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a2,
            ...b2
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues(a2[key], b2[key]);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a2.length !== b2.length) {
            return {
                valid: false
            };
        }
        const newArray = [];
        for(let index = 0; index < a2.length; index++){
            const itemA = a2[index];
            const itemB = b2[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newArray.push(sharedValue.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b2) {
        return {
            valid: true,
            data: a2
        };
    } else {
        return {
            valid: false
        };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                })
            ]).then(([left, right])=>handleParsed(left, right));
        } else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }));
        }
    }
}
ZodIntersection.create = (left, right, params)=>{
    return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            status.dirty();
        }
        const items = [
            ...ctx.data
        ].map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x2)=>!!x2);
        if (ctx.common.async) {
            return Promise.all(items).then((results)=>{
                return ParseStatus.mergeArray(status, results);
            });
        } else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest
        });
    }
}
ZodTuple.create = (schemas, params)=>{
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data){
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third)
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap
            };
        }
    }
}
ZodMap.create = (keyType, valueType, params)=>{
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2){
                if (element.status === "aborted") return INVALID;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i2)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements2)=>finalizeSet(elements2));
        } else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params)=>{
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
    });
};
class ZodFunction extends ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x2)=>!!x2),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x2)=>!!x2),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn2 = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            const me = this;
            return OK(async function(...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e2)=>{
                    error.addIssue(makeArgsIssue(args, e2));
                    throw error;
                });
                const result = await Reflect.apply(fn2, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e2)=>{
                    error.addIssue(makeReturnsIssue(result, e2));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            const me = this;
            return OK(function(...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([
                        makeArgsIssue(args, parsedArgs.error)
                    ]);
                }
                const result = Reflect.apply(fn2, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([
                        makeReturnsIssue(result, parsedReturns.error)
                    ]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
}
ZodLazy.create = (getter, params)=>{
    return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params)=>{
    return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
    });
}
class ZodEnum extends ZodType {
    constructor(){
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
    }
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache)) {
            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values));
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache).has(input.data)) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
            ...this._def,
            ...newDef
        });
    }
    exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {
            ...this._def,
            ...newDef
        });
    }
}
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    constructor(){
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
    }
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache)) {
            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)));
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(input.data)) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum.create = (values, params)=>{
    return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
}
ZodPromise.create = (schema, params)=>{
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                } else {
                    status.dirty();
                }
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.async) {
                return Promise.resolve(processed).then(async (processed2)=>{
                    if (status.value === "aborted") return INVALID;
                    const result = await this._def.schema._parseAsync({
                        data: processed2,
                        path: ctx.path,
                        parent: ctx
                    });
                    if (result.status === "aborted") return INVALID;
                    if (result.status === "dirty") return DIRTY(result.value);
                    if (status.value === "dirty") return DIRTY(result.value);
                    return result;
                });
            } else {
                if (status.value === "aborted") return INVALID;
                const result = this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
                if (result.status === "aborted") return INVALID;
                if (result.status === "dirty") return DIRTY(result.value);
                if (status.value === "dirty") return DIRTY(result.value);
                return result;
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((inner)=>{
                    if (inner.status === "aborted") return INVALID;
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(()=>{
                        return {
                            status: status.value,
                            value: inner.value
                        };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return {
                    status: status.value,
                    value: result
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((base)=>{
                    if (!isValid(base)) return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                            status: status.value,
                            value: result
                        }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params)=>{
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(void 0);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params)=>{
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params)=>{
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : ()=>params.default,
        ...processCreateParams(params)
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: []
            }
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx
            }
        });
        if (isAsync(result)) {
            return result.then((result2)=>{
                return {
                    status: "valid",
                    value: result2.status === "valid" ? result2.value : this._def.catchValue({
                        get error () {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data
                    })
                };
            });
        } else {
            return {
                status: "valid",
                value: result.status === "valid" ? result.value : this._def.catchValue({
                    get error () {
                        return new ZodError(newCtx.common.issues);
                    },
                    input: newCtx.data
                })
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params)=>{
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : ()=>params.catch,
        ...processCreateParams(params)
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
}
ZodNaN.create = (params)=>{
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async ()=>{
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inResult.status === "aborted") return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                } else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx
                    });
                }
            };
            return handleAsync();
        } else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
            if (inResult.status === "aborted") return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value
                };
            } else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                });
            }
        }
    }
    static create(a2, b2) {
        return new ZodPipeline({
            in: a2,
            out: b2,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data)=>{
            if (isValid(data)) {
                data.value = Object.freeze(data.value);
            }
            return data;
        };
        return isAsync(result) ? result.then((data)=>freeze(data)) : freeze(result);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodReadonly.create = (type, params)=>{
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
    });
};
function cleanParams(params, data) {
    const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? {
        message: params
    } : params;
    const p22 = typeof p2 === "string" ? {
        message: p2
    } : p2;
    return p22;
}
function custom(check, _params = {}, fatal) {
    if (check) return ZodAny.create().superRefine((data, ctx)=>{
        var _a, _b;
        const r2 = check(data);
        if (r2 instanceof Promise) {
            return r2.then((r3)=>{
                var _a2, _b2;
                if (!r3) {
                    const params = cleanParams(_params, data);
                    const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
                    ctx.addIssue({
                        code: "custom",
                        ...params,
                        fatal: _fatal
                    });
                }
            });
        }
        if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            ctx.addIssue({
                code: "custom",
                ...params,
                fatal: _fatal
            });
        }
        return;
    });
    return ZodAny.create();
}
const late = {
    object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom((data)=>data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = ()=>stringType().optional();
const onumber = ()=>numberType().optional();
const oboolean = ()=>booleanType().optional();
const coerce = {
    string: (arg)=>ZodString.create({
            ...arg,
            coerce: true
        }),
    number: (arg)=>ZodNumber.create({
            ...arg,
            coerce: true
        }),
    boolean: (arg)=>ZodBoolean.create({
            ...arg,
            coerce: true
        }),
    bigint: (arg)=>ZodBigInt.create({
            ...arg,
            coerce: true
        }),
    date: (arg)=>ZodDate.create({
            ...arg,
            coerce: true
        })
};
const NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util () {
        return util;
    },
    get objectUtil () {
        return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    datetimeRegex,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
});
var DEFAULT_PORT = 5746;
var PING_ENDPOINT = "/ping/stagewise";
var PING_RESPONSE = "stagewise";
var contract = createBridgeContract({
    server: {
        getSessionInfo: {
            request: z.object({}),
            response: z.object({
                sessionId: z.string().optional(),
                appName: z.string().describe('The name of the application, e.g. "VS Code" or "Cursor"'),
                displayName: z.string().describe("Human-readable window identifier for UI display"),
                port: z.number().describe("Port number this VS Code instance is running on")
            }),
            update: z.object({})
        },
        triggerAgentPrompt: {
            request: z.object({
                sessionId: z.string().optional(),
                prompt: z.string(),
                model: z.string().optional().describe("The model to use for the agent prompt"),
                files: z.array(z.string()).optional().describe("Link project files to the agent prompt"),
                mode: z.enum([
                    "agent",
                    "ask",
                    "manual"
                ]).optional().describe("The mode to use for the agent prompt"),
                images: z.array(z.string()).optional().describe("Upload files like images, videos, etc.")
            }),
            response: z.object({
                sessionId: z.string().optional(),
                result: z.object({
                    success: z.boolean(),
                    error: z.string().optional(),
                    output: z.string().optional()
                })
            }),
            update: z.object({
                sessionId: z.string().optional(),
                updateText: z.string()
            })
        }
    }
});
async function findPort(maxAttempts = 10, timeout = 300) {
    for(let attempt = 0; attempt < maxAttempts; attempt++){
        const port = DEFAULT_PORT + attempt;
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(()=>controller.abort(), timeout);
            try {
                const response = await fetch(`http://localhost:${port}${PING_ENDPOINT}`, {
                    signal: controller.signal
                });
                clearTimeout(timeoutId);
                if (response.ok) {
                    const text = await response.text();
                    if (text === PING_RESPONSE) {
                        return port;
                    }
                }
            } catch (error) {
                clearTimeout(timeoutId);
                continue;
            }
        } catch (error) {
            continue;
        }
    }
    return null;
}
async function discoverVSCodeWindows(maxAttempts = 10, timeout = 300) {
    const windows = [];
    for(let attempt = 0; attempt < maxAttempts; attempt++){
        const port = DEFAULT_PORT + attempt;
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(()=>controller.abort(), timeout);
            const response = await fetch(`http://localhost:${port}${PING_ENDPOINT}`, {
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            if (response.ok && await response.text() === PING_RESPONSE) {
                try {
                    const bridge = createSRPCClientBridge(`ws://localhost:${port}`, contract);
                    await bridge.connect();
                    const sessionInfo = await bridge.call.getSessionInfo({}, {
                        onUpdate: ()=>{}
                    });
                    windows.push(sessionInfo);
                    await bridge.close();
                } catch (error) {
                    console.warn(`Failed to get session info from port ${port}:`, error);
                }
            }
        } catch (error) {
            continue;
        }
    }
    return windows;
}
const SRPCBridgeContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])({
    bridge: null,
    isConnecting: false,
    error: null
});
function SRPCBridgeProvider({ children }) {
    const [state, setState] = d({
        bridge: null,
        isConnecting: true,
        error: null
    });
    y(()=>{
        async function initializeBridge() {
            try {
                const port = await findPort();
                const bridge = createSRPCClientBridge(`ws://localhost:${port}`, contract);
                await bridge.connect();
                setState({
                    bridge,
                    isConnecting: false,
                    error: null
                });
            } catch (error) {
                setState({
                    bridge: null,
                    isConnecting: false,
                    error: error instanceof Error ? error : new Error(String(error))
                });
            }
        }
        initializeBridge();
    }, []);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(SRPCBridgeContext.Provider, {
        value: state,
        children
    });
}
function useSRPCBridge() {
    const context = x$1(SRPCBridgeContext);
    if (!context) {
        throw new Error("useSRPCBridge must be used within an SRPCBridgeProvider");
    }
    return context;
}
const VSCodeContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])({
    windows: [],
    isDiscovering: false,
    discoveryError: null,
    selectedSession: void 0,
    discover: async ()=>{},
    selectSession: ()=>{},
    refreshSession: async ()=>{},
    appName: void 0
});
function VSCodeProvider({ children }) {
    const [windows, setWindows] = d([]);
    const [isDiscovering, setIsDiscovering] = d(false);
    const [discoveryError, setDiscoveryError] = d(null);
    const [selectedSessionId, setSelectedSessionId] = d(void 0);
    const discover = async ()=>{
        setIsDiscovering(true);
        setDiscoveryError(null);
        try {
            const discoveredWindows = await discoverVSCodeWindows();
            setWindows(discoveredWindows);
            if (selectedSessionId && !discoveredWindows.some((w2)=>w2.sessionId === selectedSessionId)) {
                setSelectedSessionId(void 0);
            }
        } catch (err) {
            setDiscoveryError(err instanceof Error ? err.message : "Failed to discover windows");
        } finally{
            setIsDiscovering(false);
        }
    };
    const selectSession = (sessionId)=>{
        setSelectedSessionId(sessionId);
    };
    const refreshSession = async ()=>{
        if (selectedSessionId) {
            await discover();
        }
    };
    y(()=>{
        discover();
    }, []);
    const selectedSession = selectedSessionId ? windows.find((w2)=>w2.sessionId === selectedSessionId) : void 0;
    const value = {
        windows,
        isDiscovering,
        discoveryError,
        selectedSession,
        discover,
        selectSession,
        refreshSession,
        appName: selectedSession == null ? void 0 : selectedSession.appName
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(VSCodeContext.Provider, {
        value,
        children
    });
}
function useVSCode() {
    return x$1(VSCodeContext);
}
const ConfigContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])({
    config: void 0
});
function ConfigProvider({ children, config }) {
    const value = T$1(()=>{
        return {
            config
        };
    }, [
        config
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ConfigContext.Provider, {
        value,
        children
    });
}
function useConfig() {
    return x$1(ConfigContext);
}
const PluginContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])({
    plugins: [],
    toolbarContext: {
        sendPrompt: ()=>{}
    }
});
function PluginProvider({ children }) {
    const { bridge } = useSRPCBridge();
    const { selectedSession } = useVSCode();
    const { config } = useConfig();
    const plugins = (config == null ? void 0 : config.plugins) || [];
    const toolbarContext = T$1(()=>{
        return {
            sendPrompt: async (prompt)=>{
                if (!bridge) throw new Error("No connection to the agent");
                await bridge.call.triggerAgentPrompt(typeof prompt === "string" ? {
                    prompt,
                    ...selectedSession && {
                        sessionId: selectedSession.sessionId
                    }
                } : {
                    prompt: prompt.prompt,
                    model: prompt.model,
                    files: prompt.files,
                    images: prompt.images,
                    mode: prompt.mode,
                    ...selectedSession && {
                        sessionId: selectedSession.sessionId
                    }
                }, {
                    onUpdate: (update)=>{}
                });
            }
        };
    }, [
        bridge,
        selectedSession
    ]);
    const pluginsLoadedRef = A$1(false);
    y(()=>{
        if (pluginsLoadedRef.current) return;
        pluginsLoadedRef.current = true;
        plugins.forEach((plugin)=>{
            var _a;
            (_a = plugin.onLoad) == null ? void 0 : _a.call(plugin, toolbarContext);
        });
    }, [
        plugins,
        toolbarContext
    ]);
    const value = T$1(()=>{
        return {
            plugins,
            toolbarContext
        };
    }, [
        plugins,
        toolbarContext
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(PluginContext.Provider, {
        value,
        children
    });
}
function usePlugins() {
    return x$1(PluginContext);
}
function r(e2) {
    var t2, f2, n = "";
    if ("string" == typeof e2 || "number" == typeof e2) n += e2;
    else if ("object" == typeof e2) if (Array.isArray(e2)) {
        var o2 = e2.length;
        for(t2 = 0; t2 < o2; t2++)e2[t2] && (f2 = r(e2[t2])) && (n && (n += " "), n += f2);
    } else for(f2 in e2)e2[f2] && (n && (n += " "), n += f2);
    return n;
}
function clsx() {
    for(var e2, t2, f2 = 0, n = "", o2 = arguments.length; f2 < o2; f2++)(e2 = arguments[f2]) && (t2 = r(e2)) && (n && (n += " "), n += t2);
    return n;
}
const CLASS_PART_SEPARATOR = "-";
const createClassGroupUtils = (config)=>{
    const classMap = createClassMap(config);
    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;
    const getClassGroupId = (className)=>{
        const classParts = className.split(CLASS_PART_SEPARATOR);
        if (classParts[0] === "" && classParts.length !== 1) {
            classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    };
    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
            return [
                ...conflicts,
                ...conflictingClassGroupModifiers[classGroupId]
            ];
        }
        return conflicts;
    };
    return {
        getClassGroupId,
        getConflictingClassGroupIds
    };
};
const getGroupRecursive = (classParts, classPartObject)=>{
    var _a;
    if (classParts.length === 0) {
        return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
    if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
        return void 0;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return (_a = classPartObject.validators.find(({ validator })=>validator(classRest))) == null ? void 0 : _a.classGroupId;
};
const arbitraryPropertyRegex = /^\[(.+)\]$/;
const getGroupIdForArbitraryProperty = (className)=>{
    if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
        if (property) {
            return "arbitrary.." + property;
        }
    }
};
const createClassMap = (config)=>{
    const { theme, classGroups } = config;
    const classMap = {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
    };
    for(const classGroupId in classGroups){
        processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
    }
    return classMap;
};
const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{
    classGroup.forEach((classDefinition)=>{
        if (typeof classDefinition === "string") {
            const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
            classPartObjectToEdit.classGroupId = classGroupId;
            return;
        }
        if (typeof classDefinition === "function") {
            if (isThemeGetter(classDefinition)) {
                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
                return;
            }
            classPartObject.validators.push({
                validator: classDefinition,
                classGroupId
            });
            return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup2])=>{
            processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
        });
    });
};
const getPart = (classPartObject, path)=>{
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{
        if (!currentClassPartObject.nextPart.has(pathPart)) {
            currentClassPartObject.nextPart.set(pathPart, {
                nextPart: /* @__PURE__ */ new Map(),
                validators: []
            });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
};
const isThemeGetter = (func)=>func.isThemeGetter;
const createLruCache = (maxCacheSize)=>{
    if (maxCacheSize < 1) {
        return {
            get: ()=>void 0,
            set: ()=>{}
        };
    }
    let cacheSize = 0;
    let cache = /* @__PURE__ */ new Map();
    let previousCache = /* @__PURE__ */ new Map();
    const update = (key, value)=>{
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
            cacheSize = 0;
            previousCache = cache;
            cache = /* @__PURE__ */ new Map();
        }
    };
    return {
        get (key) {
            let value = cache.get(key);
            if (value !== void 0) {
                return value;
            }
            if ((value = previousCache.get(key)) !== void 0) {
                update(key, value);
                return value;
            }
        },
        set (key, value) {
            if (cache.has(key)) {
                cache.set(key, value);
            } else {
                update(key, value);
            }
        }
    };
};
const IMPORTANT_MODIFIER = "!";
const MODIFIER_SEPARATOR = ":";
const MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
const createParseClassName = (config)=>{
    const { prefix, experimentalParseClassName } = config;
    let parseClassName = (className)=>{
        const modifiers = [];
        let bracketDepth = 0;
        let parenDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for(let index = 0; index < className.length; index++){
            let currentCharacter = className[index];
            if (bracketDepth === 0 && parenDepth === 0) {
                if (currentCharacter === MODIFIER_SEPARATOR) {
                    modifiers.push(className.slice(modifierStart, index));
                    modifierStart = index + MODIFIER_SEPARATOR_LENGTH;
                    continue;
                }
                if (currentCharacter === "/") {
                    postfixModifierPosition = index;
                    continue;
                }
            }
            if (currentCharacter === "[") {
                bracketDepth++;
            } else if (currentCharacter === "]") {
                bracketDepth--;
            } else if (currentCharacter === "(") {
                parenDepth++;
            } else if (currentCharacter === ")") {
                parenDepth--;
            }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
        const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
        return {
            modifiers,
            hasImportantModifier,
            baseClassName,
            maybePostfixModifierPosition
        };
    };
    if (prefix) {
        const fullPrefix = prefix + MODIFIER_SEPARATOR;
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
                isExternal: true,
                modifiers: [],
                hasImportantModifier: false,
                baseClassName: className,
                maybePostfixModifierPosition: void 0
            };
    }
    if (experimentalParseClassName) {
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>experimentalParseClassName({
                className,
                parseClassName: parseClassNameOriginal
            });
    }
    return parseClassName;
};
const stripImportantModifier = (baseClassName)=>{
    if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(0, baseClassName.length - 1);
    }
    if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(1);
    }
    return baseClassName;
};
const createSortModifiers = (config)=>{
    const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier)=>[
            modifier,
            true
        ]));
    const sortModifiers = (modifiers)=>{
        if (modifiers.length <= 1) {
            return modifiers;
        }
        const sortedModifiers = [];
        let unsortedModifiers = [];
        modifiers.forEach((modifier)=>{
            const isPositionSensitive = modifier[0] === "[" || orderSensitiveModifiers[modifier];
            if (isPositionSensitive) {
                sortedModifiers.push(...unsortedModifiers.sort(), modifier);
                unsortedModifiers = [];
            } else {
                unsortedModifiers.push(modifier);
            }
        });
        sortedModifiers.push(...unsortedModifiers.sort());
        return sortedModifiers;
    };
    return sortModifiers;
};
const createConfigUtils = (config)=>({
        cache: createLruCache(config.cacheSize),
        parseClassName: createParseClassName(config),
        sortModifiers: createSortModifiers(config),
        ...createClassGroupUtils(config)
    });
const SPLIT_CLASSES_REGEX = /\s+/;
const mergeClassList = (classList, configUtils)=>{
    const { parseClassName, getClassGroupId, getConflictingClassGroupIds, sortModifiers } = configUtils;
    const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result = "";
    for(let index = classNames.length - 1; index >= 0; index -= 1){
        const originalClassName = classNames[index];
        const { isExternal, modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);
        if (isExternal) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
        }
        let hasPostfixModifier = !!maybePostfixModifierPosition;
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
            if (!hasPostfixModifier) {
                result = originalClassName + (result.length > 0 ? " " + result : result);
                continue;
            }
            classGroupId = getClassGroupId(baseClassName);
            if (!classGroupId) {
                result = originalClassName + (result.length > 0 ? " " + result : result);
                continue;
            }
            hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(":");
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
            continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for(let i2 = 0; i2 < conflictGroups.length; ++i2){
            const group = conflictGroups[i2];
            classGroupsInConflict.push(modifierId + group);
        }
        result = originalClassName + (result.length > 0 ? " " + result : result);
    }
    return result;
};
function twJoin() {
    let index = 0;
    let argument;
    let resolvedValue;
    let string = "";
    while(index < arguments.length){
        if (argument = arguments[index++]) {
            if (resolvedValue = toValue(argument)) {
                string && (string += " ");
                string += resolvedValue;
            }
        }
    }
    return string;
}
const toValue = (mix)=>{
    if (typeof mix === "string") {
        return mix;
    }
    let resolvedValue;
    let string = "";
    for(let k2 = 0; k2 < mix.length; k2++){
        if (mix[k2]) {
            if (resolvedValue = toValue(mix[k2])) {
                string && (string += " ");
                string += resolvedValue;
            }
        }
    }
    return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
            return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
    }
    return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
    };
}
const fromTheme = (key)=>{
    const themeGetter = (theme)=>theme[key] || [];
    themeGetter.isThemeGetter = true;
    return themeGetter;
};
const arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
const arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
const fractionRegex = /^\d+\/\d+$/;
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
const isFraction = (value)=>fractionRegex.test(value);
const isNumber = (value)=>!!value && !Number.isNaN(Number(value));
const isInteger = (value)=>!!value && Number.isInteger(Number(value));
const isPercent = (value)=>value.endsWith("%") && isNumber(value.slice(0, -1));
const isTshirtSize = (value)=>tshirtUnitRegex.test(value);
const isAny = ()=>true;
const isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
const isNever = ()=>false;
const isShadow = (value)=>shadowRegex.test(value);
const isImage = (value)=>imageRegex.test(value);
const isAnyNonArbitrary = (value)=>!isArbitraryValue(value) && !isArbitraryVariable(value);
const isArbitrarySize = (value)=>getIsArbitraryValue(value, isLabelSize, isNever);
const isArbitraryValue = (value)=>arbitraryValueRegex.test(value);
const isArbitraryLength = (value)=>getIsArbitraryValue(value, isLabelLength, isLengthOnly);
const isArbitraryNumber = (value)=>getIsArbitraryValue(value, isLabelNumber, isNumber);
const isArbitraryPosition = (value)=>getIsArbitraryValue(value, isLabelPosition, isNever);
const isArbitraryImage = (value)=>getIsArbitraryValue(value, isLabelImage, isImage);
const isArbitraryShadow = (value)=>getIsArbitraryValue(value, isLabelShadow, isShadow);
const isArbitraryVariable = (value)=>arbitraryVariableRegex.test(value);
const isArbitraryVariableLength = (value)=>getIsArbitraryVariable(value, isLabelLength);
const isArbitraryVariableFamilyName = (value)=>getIsArbitraryVariable(value, isLabelFamilyName);
const isArbitraryVariablePosition = (value)=>getIsArbitraryVariable(value, isLabelPosition);
const isArbitraryVariableSize = (value)=>getIsArbitraryVariable(value, isLabelSize);
const isArbitraryVariableImage = (value)=>getIsArbitraryVariable(value, isLabelImage);
const isArbitraryVariableShadow = (value)=>getIsArbitraryVariable(value, isLabelShadow, true);
const getIsArbitraryValue = (value, testLabel, testValue)=>{
    const result = arbitraryValueRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return testValue(result[2]);
    }
    return false;
};
const getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false)=>{
    const result = arbitraryVariableRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return shouldMatchNoLabel;
    }
    return false;
};
const isLabelPosition = (label)=>label === "position" || label === "percentage";
const isLabelImage = (label)=>label === "image" || label === "url";
const isLabelSize = (label)=>label === "length" || label === "size" || label === "bg-size";
const isLabelLength = (label)=>label === "length";
const isLabelNumber = (label)=>label === "number";
const isLabelFamilyName = (label)=>label === "family-name";
const isLabelShadow = (label)=>label === "shadow";
const getDefaultConfig = ()=>{
    const themeColor = fromTheme("color");
    const themeFont = fromTheme("font");
    const themeText = fromTheme("text");
    const themeFontWeight = fromTheme("font-weight");
    const themeTracking = fromTheme("tracking");
    const themeLeading = fromTheme("leading");
    const themeBreakpoint = fromTheme("breakpoint");
    const themeContainer = fromTheme("container");
    const themeSpacing = fromTheme("spacing");
    const themeRadius = fromTheme("radius");
    const themeShadow = fromTheme("shadow");
    const themeInsetShadow = fromTheme("inset-shadow");
    const themeTextShadow = fromTheme("text-shadow");
    const themeDropShadow = fromTheme("drop-shadow");
    const themeBlur = fromTheme("blur");
    const themePerspective = fromTheme("perspective");
    const themeAspect = fromTheme("aspect");
    const themeEase = fromTheme("ease");
    const themeAnimate = fromTheme("animate");
    const scaleBreak = ()=>[
            "auto",
            "avoid",
            "all",
            "avoid-page",
            "page",
            "left",
            "right",
            "column"
        ];
    const scalePosition = ()=>[
            "center",
            "top",
            "bottom",
            "left",
            "right",
            "top-left",
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            "left-top",
            "top-right",
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            "right-top",
            "bottom-right",
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            "right-bottom",
            "bottom-left",
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            "left-bottom"
        ];
    const scalePositionWithArbitrary = ()=>[
            ...scalePosition(),
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleOverflow = ()=>[
            "auto",
            "hidden",
            "clip",
            "visible",
            "scroll"
        ];
    const scaleOverscroll = ()=>[
            "auto",
            "contain",
            "none"
        ];
    const scaleUnambiguousSpacing = ()=>[
            isArbitraryVariable,
            isArbitraryValue,
            themeSpacing
        ];
    const scaleInset = ()=>[
            isFraction,
            "full",
            "auto",
            ...scaleUnambiguousSpacing()
        ];
    const scaleGridTemplateColsRows = ()=>[
            isInteger,
            "none",
            "subgrid",
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartAndEnd = ()=>[
            "auto",
            {
                span: [
                    "full",
                    isInteger,
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            },
            isInteger,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartOrEnd = ()=>[
            isInteger,
            "auto",
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridAutoColsRows = ()=>[
            "auto",
            "min",
            "max",
            "fr",
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleAlignPrimaryAxis = ()=>[
            "start",
            "end",
            "center",
            "between",
            "around",
            "evenly",
            "stretch",
            "baseline",
            "center-safe",
            "end-safe"
        ];
    const scaleAlignSecondaryAxis = ()=>[
            "start",
            "end",
            "center",
            "stretch",
            "center-safe",
            "end-safe"
        ];
    const scaleMargin = ()=>[
            "auto",
            ...scaleUnambiguousSpacing()
        ];
    const scaleSizing = ()=>[
            isFraction,
            "auto",
            "full",
            "dvw",
            "dvh",
            "lvw",
            "lvh",
            "svw",
            "svh",
            "min",
            "max",
            "fit",
            ...scaleUnambiguousSpacing()
        ];
    const scaleColor = ()=>[
            themeColor,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBgPosition = ()=>[
            ...scalePosition(),
            isArbitraryVariablePosition,
            isArbitraryPosition,
            {
                position: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleBgRepeat = ()=>[
            "no-repeat",
            {
                repeat: [
                    "",
                    "x",
                    "y",
                    "space",
                    "round"
                ]
            }
        ];
    const scaleBgSize = ()=>[
            "auto",
            "cover",
            "contain",
            isArbitraryVariableSize,
            isArbitrarySize,
            {
                size: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleGradientStopPosition = ()=>[
            isPercent,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleRadius = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            "full",
            themeRadius,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBorderWidth = ()=>[
            "",
            isNumber,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleLineStyle = ()=>[
            "solid",
            "dashed",
            "dotted",
            "double"
        ];
    const scaleBlendMode = ()=>[
            "normal",
            "multiply",
            "screen",
            "overlay",
            "darken",
            "lighten",
            "color-dodge",
            "color-burn",
            "hard-light",
            "soft-light",
            "difference",
            "exclusion",
            "hue",
            "saturation",
            "color",
            "luminosity"
        ];
    const scaleMaskImagePosition = ()=>[
            isNumber,
            isPercent,
            isArbitraryVariablePosition,
            isArbitraryPosition
        ];
    const scaleBlur = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            themeBlur,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleRotate = ()=>[
            "none",
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleScale = ()=>[
            "none",
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleSkew = ()=>[
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleTranslate = ()=>[
            isFraction,
            "full",
            ...scaleUnambiguousSpacing()
        ];
    return {
        cacheSize: 500,
        theme: {
            animate: [
                "spin",
                "ping",
                "pulse",
                "bounce"
            ],
            aspect: [
                "video"
            ],
            blur: [
                isTshirtSize
            ],
            breakpoint: [
                isTshirtSize
            ],
            color: [
                isAny
            ],
            container: [
                isTshirtSize
            ],
            "drop-shadow": [
                isTshirtSize
            ],
            ease: [
                "in",
                "out",
                "in-out"
            ],
            font: [
                isAnyNonArbitrary
            ],
            "font-weight": [
                "thin",
                "extralight",
                "light",
                "normal",
                "medium",
                "semibold",
                "bold",
                "extrabold",
                "black"
            ],
            "inset-shadow": [
                isTshirtSize
            ],
            leading: [
                "none",
                "tight",
                "snug",
                "normal",
                "relaxed",
                "loose"
            ],
            perspective: [
                "dramatic",
                "near",
                "normal",
                "midrange",
                "distant",
                "none"
            ],
            radius: [
                isTshirtSize
            ],
            shadow: [
                isTshirtSize
            ],
            spacing: [
                "px",
                isNumber
            ],
            text: [
                isTshirtSize
            ],
            "text-shadow": [
                isTshirtSize
            ],
            tracking: [
                "tighter",
                "tight",
                "normal",
                "wide",
                "wider",
                "widest"
            ]
        },
        classGroups: {
            // --------------
            // --- Layout ---
            // --------------
            /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */ aspect: [
                {
                    aspect: [
                        "auto",
                        "square",
                        isFraction,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeAspect
                    ]
                }
            ],
            /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */ container: [
                "container"
            ],
            /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */ columns: [
                {
                    columns: [
                        isNumber,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeContainer
                    ]
                }
            ],
            /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */ "break-after": [
                {
                    "break-after": scaleBreak()
                }
            ],
            /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */ "break-before": [
                {
                    "break-before": scaleBreak()
                }
            ],
            /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */ "break-inside": [
                {
                    "break-inside": [
                        "auto",
                        "avoid",
                        "avoid-page",
                        "avoid-column"
                    ]
                }
            ],
            /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */ "box-decoration": [
                {
                    "box-decoration": [
                        "slice",
                        "clone"
                    ]
                }
            ],
            /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */ box: [
                {
                    box: [
                        "border",
                        "content"
                    ]
                }
            ],
            /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */ display: [
                "block",
                "inline-block",
                "inline",
                "flex",
                "inline-flex",
                "table",
                "inline-table",
                "table-caption",
                "table-cell",
                "table-column",
                "table-column-group",
                "table-footer-group",
                "table-header-group",
                "table-row-group",
                "table-row",
                "flow-root",
                "grid",
                "inline-grid",
                "contents",
                "list-item",
                "hidden"
            ],
            /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */ sr: [
                "sr-only",
                "not-sr-only"
            ],
            /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */ float: [
                {
                    float: [
                        "right",
                        "left",
                        "none",
                        "start",
                        "end"
                    ]
                }
            ],
            /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */ clear: [
                {
                    clear: [
                        "left",
                        "right",
                        "both",
                        "none",
                        "start",
                        "end"
                    ]
                }
            ],
            /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */ isolation: [
                "isolate",
                "isolation-auto"
            ],
            /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */ "object-fit": [
                {
                    object: [
                        "contain",
                        "cover",
                        "fill",
                        "none",
                        "scale-down"
                    ]
                }
            ],
            /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */ "object-position": [
                {
                    object: scalePositionWithArbitrary()
                }
            ],
            /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */ overflow: [
                {
                    overflow: scaleOverflow()
                }
            ],
            /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */ "overflow-x": [
                {
                    "overflow-x": scaleOverflow()
                }
            ],
            /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */ "overflow-y": [
                {
                    "overflow-y": scaleOverflow()
                }
            ],
            /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ overscroll: [
                {
                    overscroll: scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ "overscroll-x": [
                {
                    "overscroll-x": scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ "overscroll-y": [
                {
                    "overscroll-y": scaleOverscroll()
                }
            ],
            /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */ position: [
                "static",
                "fixed",
                "absolute",
                "relative",
                "sticky"
            ],
            /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ inset: [
                {
                    inset: scaleInset()
                }
            ],
            /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ "inset-x": [
                {
                    "inset-x": scaleInset()
                }
            ],
            /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ "inset-y": [
                {
                    "inset-y": scaleInset()
                }
            ],
            /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ start: [
                {
                    start: scaleInset()
                }
            ],
            /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ end: [
                {
                    end: scaleInset()
                }
            ],
            /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ top: [
                {
                    top: scaleInset()
                }
            ],
            /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ right: [
                {
                    right: scaleInset()
                }
            ],
            /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ bottom: [
                {
                    bottom: scaleInset()
                }
            ],
            /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ left: [
                {
                    left: scaleInset()
                }
            ],
            /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */ visibility: [
                "visible",
                "invisible",
                "collapse"
            ],
            /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */ z: [
                {
                    z: [
                        isInteger,
                        "auto",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------------
            // --- Flexbox and Grid ---
            // ------------------------
            /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */ basis: [
                {
                    basis: [
                        isFraction,
                        "full",
                        "auto",
                        themeContainer,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */ "flex-direction": [
                {
                    flex: [
                        "row",
                        "row-reverse",
                        "col",
                        "col-reverse"
                    ]
                }
            ],
            /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */ "flex-wrap": [
                {
                    flex: [
                        "nowrap",
                        "wrap",
                        "wrap-reverse"
                    ]
                }
            ],
            /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */ flex: [
                {
                    flex: [
                        isNumber,
                        isFraction,
                        "auto",
                        "initial",
                        "none",
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */ grow: [
                {
                    grow: [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */ shrink: [
                {
                    shrink: [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */ order: [
                {
                    order: [
                        isInteger,
                        "first",
                        "last",
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */ "grid-cols": [
                {
                    "grid-cols": scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */ "col-start-end": [
                {
                    col: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */ "col-start": [
                {
                    "col-start": scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */ "col-end": [
                {
                    "col-end": scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */ "grid-rows": [
                {
                    "grid-rows": scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */ "row-start-end": [
                {
                    row: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */ "row-start": [
                {
                    "row-start": scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */ "row-end": [
                {
                    "row-end": scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */ "grid-flow": [
                {
                    "grid-flow": [
                        "row",
                        "col",
                        "dense",
                        "row-dense",
                        "col-dense"
                    ]
                }
            ],
            /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */ "auto-cols": [
                {
                    "auto-cols": scaleGridAutoColsRows()
                }
            ],
            /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */ "auto-rows": [
                {
                    "auto-rows": scaleGridAutoColsRows()
                }
            ],
            /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */ gap: [
                {
                    gap: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */ "gap-x": [
                {
                    "gap-x": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */ "gap-y": [
                {
                    "gap-y": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */ "justify-content": [
                {
                    justify: [
                        ...scaleAlignPrimaryAxis(),
                        "normal"
                    ]
                }
            ],
            /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */ "justify-items": [
                {
                    "justify-items": [
                        ...scaleAlignSecondaryAxis(),
                        "normal"
                    ]
                }
            ],
            /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */ "justify-self": [
                {
                    "justify-self": [
                        "auto",
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */ "align-content": [
                {
                    content: [
                        "normal",
                        ...scaleAlignPrimaryAxis()
                    ]
                }
            ],
            /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */ "align-items": [
                {
                    items: [
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                "",
                                "last"
                            ]
                        }
                    ]
                }
            ],
            /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */ "align-self": [
                {
                    self: [
                        "auto",
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                "",
                                "last"
                            ]
                        }
                    ]
                }
            ],
            /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */ "place-content": [
                {
                    "place-content": scaleAlignPrimaryAxis()
                }
            ],
            /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */ "place-items": [
                {
                    "place-items": [
                        ...scaleAlignSecondaryAxis(),
                        "baseline"
                    ]
                }
            ],
            /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */ "place-self": [
                {
                    "place-self": [
                        "auto",
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            // Spacing
            /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */ p: [
                {
                    p: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */ px: [
                {
                    px: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */ py: [
                {
                    py: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */ ps: [
                {
                    ps: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */ pe: [
                {
                    pe: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */ pt: [
                {
                    pt: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */ pr: [
                {
                    pr: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */ pb: [
                {
                    pb: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */ pl: [
                {
                    pl: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */ m: [
                {
                    m: scaleMargin()
                }
            ],
            /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */ mx: [
                {
                    mx: scaleMargin()
                }
            ],
            /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */ my: [
                {
                    my: scaleMargin()
                }
            ],
            /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */ ms: [
                {
                    ms: scaleMargin()
                }
            ],
            /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */ me: [
                {
                    me: scaleMargin()
                }
            ],
            /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */ mt: [
                {
                    mt: scaleMargin()
                }
            ],
            /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */ mr: [
                {
                    mr: scaleMargin()
                }
            ],
            /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */ mb: [
                {
                    mb: scaleMargin()
                }
            ],
            /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */ ml: [
                {
                    ml: scaleMargin()
                }
            ],
            /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ "space-x": [
                {
                    "space-x": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ "space-x-reverse": [
                "space-x-reverse"
            ],
            /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ "space-y": [
                {
                    "space-y": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ "space-y-reverse": [
                "space-y-reverse"
            ],
            // --------------
            // --- Sizing ---
            // --------------
            /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */ size: [
                {
                    size: scaleSizing()
                }
            ],
            /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */ w: [
                {
                    w: [
                        themeContainer,
                        "screen",
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */ "min-w": [
                {
                    "min-w": [
                        themeContainer,
                        "screen",
                        /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ "none",
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */ "max-w": [
                {
                    "max-w": [
                        themeContainer,
                        "screen",
                        "none",
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ "prose",
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ {
                            screen: [
                                themeBreakpoint
                            ]
                        },
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */ h: [
                {
                    h: [
                        "screen",
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */ "min-h": [
                {
                    "min-h": [
                        "screen",
                        "none",
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */ "max-h": [
                {
                    "max-h": [
                        "screen",
                        ...scaleSizing()
                    ]
                }
            ],
            // ------------------
            // --- Typography ---
            // ------------------
            /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */ "font-size": [
                {
                    text: [
                        "base",
                        themeText,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */ "font-smoothing": [
                "antialiased",
                "subpixel-antialiased"
            ],
            /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */ "font-style": [
                "italic",
                "not-italic"
            ],
            /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */ "font-weight": [
                {
                    font: [
                        themeFontWeight,
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */ "font-stretch": [
                {
                    "font-stretch": [
                        "ultra-condensed",
                        "extra-condensed",
                        "condensed",
                        "semi-condensed",
                        "normal",
                        "semi-expanded",
                        "expanded",
                        "extra-expanded",
                        "ultra-expanded",
                        isPercent,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */ "font-family": [
                {
                    font: [
                        isArbitraryVariableFamilyName,
                        isArbitraryValue,
                        themeFont
                    ]
                }
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-normal": [
                "normal-nums"
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-ordinal": [
                "ordinal"
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-slashed-zero": [
                "slashed-zero"
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-figure": [
                "lining-nums",
                "oldstyle-nums"
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-spacing": [
                "proportional-nums",
                "tabular-nums"
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ "fvn-fraction": [
                "diagonal-fractions",
                "stacked-fractions"
            ],
            /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */ tracking: [
                {
                    tracking: [
                        themeTracking,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */ "line-clamp": [
                {
                    "line-clamp": [
                        isNumber,
                        "none",
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */ leading: [
                {
                    leading: [
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ themeLeading,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */ "list-image": [
                {
                    "list-image": [
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */ "list-style-position": [
                {
                    list: [
                        "inside",
                        "outside"
                    ]
                }
            ],
            /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */ "list-style-type": [
                {
                    list: [
                        "disc",
                        "decimal",
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */ "text-alignment": [
                {
                    text: [
                        "left",
                        "center",
                        "right",
                        "justify",
                        "start",
                        "end"
                    ]
                }
            ],
            /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */ "placeholder-color": [
                {
                    placeholder: scaleColor()
                }
            ],
            /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */ "text-color": [
                {
                    text: scaleColor()
                }
            ],
            /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */ "text-decoration": [
                "underline",
                "overline",
                "line-through",
                "no-underline"
            ],
            /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */ "text-decoration-style": [
                {
                    decoration: [
                        ...scaleLineStyle(),
                        "wavy"
                    ]
                }
            ],
            /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */ "text-decoration-thickness": [
                {
                    decoration: [
                        isNumber,
                        "from-font",
                        "auto",
                        isArbitraryVariable,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */ "text-decoration-color": [
                {
                    decoration: scaleColor()
                }
            ],
            /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */ "underline-offset": [
                {
                    "underline-offset": [
                        isNumber,
                        "auto",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */ "text-transform": [
                "uppercase",
                "lowercase",
                "capitalize",
                "normal-case"
            ],
            /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */ "text-overflow": [
                "truncate",
                "text-ellipsis",
                "text-clip"
            ],
            /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */ "text-wrap": [
                {
                    text: [
                        "wrap",
                        "nowrap",
                        "balance",
                        "pretty"
                    ]
                }
            ],
            /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */ indent: [
                {
                    indent: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */ "vertical-align": [
                {
                    align: [
                        "baseline",
                        "top",
                        "middle",
                        "bottom",
                        "text-top",
                        "text-bottom",
                        "sub",
                        "super",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */ whitespace: [
                {
                    whitespace: [
                        "normal",
                        "nowrap",
                        "pre",
                        "pre-line",
                        "pre-wrap",
                        "break-spaces"
                    ]
                }
            ],
            /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */ break: [
                {
                    break: [
                        "normal",
                        "words",
                        "all",
                        "keep"
                    ]
                }
            ],
            /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */ wrap: [
                {
                    wrap: [
                        "break-word",
                        "anywhere",
                        "normal"
                    ]
                }
            ],
            /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */ hyphens: [
                {
                    hyphens: [
                        "none",
                        "manual",
                        "auto"
                    ]
                }
            ],
            /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */ content: [
                {
                    content: [
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -------------------
            // --- Backgrounds ---
            // -------------------
            /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */ "bg-attachment": [
                {
                    bg: [
                        "fixed",
                        "local",
                        "scroll"
                    ]
                }
            ],
            /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */ "bg-clip": [
                {
                    "bg-clip": [
                        "border",
                        "padding",
                        "content",
                        "text"
                    ]
                }
            ],
            /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */ "bg-origin": [
                {
                    "bg-origin": [
                        "border",
                        "padding",
                        "content"
                    ]
                }
            ],
            /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */ "bg-position": [
                {
                    bg: scaleBgPosition()
                }
            ],
            /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */ "bg-repeat": [
                {
                    bg: scaleBgRepeat()
                }
            ],
            /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */ "bg-size": [
                {
                    bg: scaleBgSize()
                }
            ],
            /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */ "bg-image": [
                {
                    bg: [
                        "none",
                        {
                            linear: [
                                {
                                    to: [
                                        "t",
                                        "tr",
                                        "r",
                                        "br",
                                        "b",
                                        "bl",
                                        "l",
                                        "tl"
                                    ]
                                },
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            radial: [
                                "",
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            conic: [
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ]
                        },
                        isArbitraryVariableImage,
                        isArbitraryImage
                    ]
                }
            ],
            /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */ "bg-color": [
                {
                    bg: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-from-pos": [
                {
                    from: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-via-pos": [
                {
                    via: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-to-pos": [
                {
                    to: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-from": [
                {
                    from: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-via": [
                {
                    via: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ "gradient-to": [
                {
                    to: scaleColor()
                }
            ],
            // ---------------
            // --- Borders ---
            // ---------------
            /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */ rounded: [
                {
                    rounded: scaleRadius()
                }
            ],
            /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-s": [
                {
                    "rounded-s": scaleRadius()
                }
            ],
            /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-e": [
                {
                    "rounded-e": scaleRadius()
                }
            ],
            /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-t": [
                {
                    "rounded-t": scaleRadius()
                }
            ],
            /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-r": [
                {
                    "rounded-r": scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-b": [
                {
                    "rounded-b": scaleRadius()
                }
            ],
            /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-l": [
                {
                    "rounded-l": scaleRadius()
                }
            ],
            /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-ss": [
                {
                    "rounded-ss": scaleRadius()
                }
            ],
            /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-se": [
                {
                    "rounded-se": scaleRadius()
                }
            ],
            /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-ee": [
                {
                    "rounded-ee": scaleRadius()
                }
            ],
            /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-es": [
                {
                    "rounded-es": scaleRadius()
                }
            ],
            /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-tl": [
                {
                    "rounded-tl": scaleRadius()
                }
            ],
            /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-tr": [
                {
                    "rounded-tr": scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-br": [
                {
                    "rounded-br": scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */ "rounded-bl": [
                {
                    "rounded-bl": scaleRadius()
                }
            ],
            /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w": [
                {
                    border: scaleBorderWidth()
                }
            ],
            /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-x": [
                {
                    "border-x": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-y": [
                {
                    "border-y": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-s": [
                {
                    "border-s": scaleBorderWidth()
                }
            ],
            /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-e": [
                {
                    "border-e": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-t": [
                {
                    "border-t": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-r": [
                {
                    "border-r": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-b": [
                {
                    "border-b": scaleBorderWidth()
                }
            ],
            /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */ "border-w-l": [
                {
                    "border-l": scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ "divide-x": [
                {
                    "divide-x": scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ "divide-x-reverse": [
                "divide-x-reverse"
            ],
            /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ "divide-y": [
                {
                    "divide-y": scaleBorderWidth()
                }
            ],
            /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ "divide-y-reverse": [
                "divide-y-reverse"
            ],
            /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */ "border-style": [
                {
                    border: [
                        ...scaleLineStyle(),
                        "hidden",
                        "none"
                    ]
                }
            ],
            /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */ "divide-style": [
                {
                    divide: [
                        ...scaleLineStyle(),
                        "hidden",
                        "none"
                    ]
                }
            ],
            /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color": [
                {
                    border: scaleColor()
                }
            ],
            /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-x": [
                {
                    "border-x": scaleColor()
                }
            ],
            /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-y": [
                {
                    "border-y": scaleColor()
                }
            ],
            /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-s": [
                {
                    "border-s": scaleColor()
                }
            ],
            /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-e": [
                {
                    "border-e": scaleColor()
                }
            ],
            /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-t": [
                {
                    "border-t": scaleColor()
                }
            ],
            /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-r": [
                {
                    "border-r": scaleColor()
                }
            ],
            /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-b": [
                {
                    "border-b": scaleColor()
                }
            ],
            /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */ "border-color-l": [
                {
                    "border-l": scaleColor()
                }
            ],
            /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */ "divide-color": [
                {
                    divide: scaleColor()
                }
            ],
            /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */ "outline-style": [
                {
                    outline: [
                        ...scaleLineStyle(),
                        "none",
                        "hidden"
                    ]
                }
            ],
            /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */ "outline-offset": [
                {
                    "outline-offset": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */ "outline-w": [
                {
                    outline: [
                        "",
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */ "outline-color": [
                {
                    outline: scaleColor()
                }
            ],
            // ---------------
            // --- Effects ---
            // ---------------
            /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */ shadow: [
                {
                    shadow: [
                        // Deprecated since Tailwind CSS v4.0.0
                        "",
                        "none",
                        themeShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */ "shadow-color": [
                {
                    shadow: scaleColor()
                }
            ],
            /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */ "inset-shadow": [
                {
                    "inset-shadow": [
                        "none",
                        themeInsetShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */ "inset-shadow-color": [
                {
                    "inset-shadow": scaleColor()
                }
            ],
            /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */ "ring-w": [
                {
                    ring: scaleBorderWidth()
                }
            ],
            /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ "ring-w-inset": [
                "ring-inset"
            ],
            /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */ "ring-color": [
                {
                    ring: scaleColor()
                }
            ],
            /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ "ring-offset-w": [
                {
                    "ring-offset": [
                        isNumber,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ "ring-offset-color": [
                {
                    "ring-offset": scaleColor()
                }
            ],
            /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */ "inset-ring-w": [
                {
                    "inset-ring": scaleBorderWidth()
                }
            ],
            /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */ "inset-ring-color": [
                {
                    "inset-ring": scaleColor()
                }
            ],
            /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */ "text-shadow": [
                {
                    "text-shadow": [
                        "none",
                        themeTextShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */ "text-shadow-color": [
                {
                    "text-shadow": scaleColor()
                }
            ],
            /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */ opacity: [
                {
                    opacity: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */ "mix-blend": [
                {
                    "mix-blend": [
                        ...scaleBlendMode(),
                        "plus-darker",
                        "plus-lighter"
                    ]
                }
            ],
            /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */ "bg-blend": [
                {
                    "bg-blend": scaleBlendMode()
                }
            ],
            /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */ "mask-clip": [
                {
                    "mask-clip": [
                        "border",
                        "padding",
                        "content",
                        "fill",
                        "stroke",
                        "view"
                    ]
                },
                "mask-no-clip"
            ],
            /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */ "mask-composite": [
                {
                    mask: [
                        "add",
                        "subtract",
                        "intersect",
                        "exclude"
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ "mask-image-linear-pos": [
                {
                    "mask-linear": [
                        isNumber
                    ]
                }
            ],
            "mask-image-linear-from-pos": [
                {
                    "mask-linear-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-linear-to-pos": [
                {
                    "mask-linear-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-linear-from-color": [
                {
                    "mask-linear-from": scaleColor()
                }
            ],
            "mask-image-linear-to-color": [
                {
                    "mask-linear-to": scaleColor()
                }
            ],
            "mask-image-t-from-pos": [
                {
                    "mask-t-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-t-to-pos": [
                {
                    "mask-t-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-t-from-color": [
                {
                    "mask-t-from": scaleColor()
                }
            ],
            "mask-image-t-to-color": [
                {
                    "mask-t-to": scaleColor()
                }
            ],
            "mask-image-r-from-pos": [
                {
                    "mask-r-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-r-to-pos": [
                {
                    "mask-r-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-r-from-color": [
                {
                    "mask-r-from": scaleColor()
                }
            ],
            "mask-image-r-to-color": [
                {
                    "mask-r-to": scaleColor()
                }
            ],
            "mask-image-b-from-pos": [
                {
                    "mask-b-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-b-to-pos": [
                {
                    "mask-b-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-b-from-color": [
                {
                    "mask-b-from": scaleColor()
                }
            ],
            "mask-image-b-to-color": [
                {
                    "mask-b-to": scaleColor()
                }
            ],
            "mask-image-l-from-pos": [
                {
                    "mask-l-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-l-to-pos": [
                {
                    "mask-l-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-l-from-color": [
                {
                    "mask-l-from": scaleColor()
                }
            ],
            "mask-image-l-to-color": [
                {
                    "mask-l-to": scaleColor()
                }
            ],
            "mask-image-x-from-pos": [
                {
                    "mask-x-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-x-to-pos": [
                {
                    "mask-x-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-x-from-color": [
                {
                    "mask-x-from": scaleColor()
                }
            ],
            "mask-image-x-to-color": [
                {
                    "mask-x-to": scaleColor()
                }
            ],
            "mask-image-y-from-pos": [
                {
                    "mask-y-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-y-to-pos": [
                {
                    "mask-y-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-y-from-color": [
                {
                    "mask-y-from": scaleColor()
                }
            ],
            "mask-image-y-to-color": [
                {
                    "mask-y-to": scaleColor()
                }
            ],
            "mask-image-radial": [
                {
                    "mask-radial": [
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            "mask-image-radial-from-pos": [
                {
                    "mask-radial-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-radial-to-pos": [
                {
                    "mask-radial-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-radial-from-color": [
                {
                    "mask-radial-from": scaleColor()
                }
            ],
            "mask-image-radial-to-color": [
                {
                    "mask-radial-to": scaleColor()
                }
            ],
            "mask-image-radial-shape": [
                {
                    "mask-radial": [
                        "circle",
                        "ellipse"
                    ]
                }
            ],
            "mask-image-radial-size": [
                {
                    "mask-radial": [
                        {
                            closest: [
                                "side",
                                "corner"
                            ],
                            farthest: [
                                "side",
                                "corner"
                            ]
                        }
                    ]
                }
            ],
            "mask-image-radial-pos": [
                {
                    "mask-radial-at": scalePosition()
                }
            ],
            "mask-image-conic-pos": [
                {
                    "mask-conic": [
                        isNumber
                    ]
                }
            ],
            "mask-image-conic-from-pos": [
                {
                    "mask-conic-from": scaleMaskImagePosition()
                }
            ],
            "mask-image-conic-to-pos": [
                {
                    "mask-conic-to": scaleMaskImagePosition()
                }
            ],
            "mask-image-conic-from-color": [
                {
                    "mask-conic-from": scaleColor()
                }
            ],
            "mask-image-conic-to-color": [
                {
                    "mask-conic-to": scaleColor()
                }
            ],
            /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */ "mask-mode": [
                {
                    mask: [
                        "alpha",
                        "luminance",
                        "match"
                    ]
                }
            ],
            /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */ "mask-origin": [
                {
                    "mask-origin": [
                        "border",
                        "padding",
                        "content",
                        "fill",
                        "stroke",
                        "view"
                    ]
                }
            ],
            /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */ "mask-position": [
                {
                    mask: scaleBgPosition()
                }
            ],
            /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */ "mask-repeat": [
                {
                    mask: scaleBgRepeat()
                }
            ],
            /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */ "mask-size": [
                {
                    mask: scaleBgSize()
                }
            ],
            /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */ "mask-type": [
                {
                    "mask-type": [
                        "alpha",
                        "luminance"
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ "mask-image": [
                {
                    mask: [
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ---------------
            // --- Filters ---
            // ---------------
            /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */ filter: [
                {
                    filter: [
                        // Deprecated since Tailwind CSS v3.0.0
                        "",
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */ blur: [
                {
                    blur: scaleBlur()
                }
            ],
            /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */ brightness: [
                {
                    brightness: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */ contrast: [
                {
                    contrast: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */ "drop-shadow": [
                {
                    "drop-shadow": [
                        // Deprecated since Tailwind CSS v4.0.0
                        "",
                        "none",
                        themeDropShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */ "drop-shadow-color": [
                {
                    "drop-shadow": scaleColor()
                }
            ],
            /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */ grayscale: [
                {
                    grayscale: [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */ "hue-rotate": [
                {
                    "hue-rotate": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */ invert: [
                {
                    invert: [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */ saturate: [
                {
                    saturate: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */ sepia: [
                {
                    sepia: [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */ "backdrop-filter": [
                {
                    "backdrop-filter": [
                        // Deprecated since Tailwind CSS v3.0.0
                        "",
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */ "backdrop-blur": [
                {
                    "backdrop-blur": scaleBlur()
                }
            ],
            /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */ "backdrop-brightness": [
                {
                    "backdrop-brightness": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */ "backdrop-contrast": [
                {
                    "backdrop-contrast": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */ "backdrop-grayscale": [
                {
                    "backdrop-grayscale": [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */ "backdrop-hue-rotate": [
                {
                    "backdrop-hue-rotate": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */ "backdrop-invert": [
                {
                    "backdrop-invert": [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */ "backdrop-opacity": [
                {
                    "backdrop-opacity": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */ "backdrop-saturate": [
                {
                    "backdrop-saturate": [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */ "backdrop-sepia": [
                {
                    "backdrop-sepia": [
                        "",
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // --------------
            // --- Tables ---
            // --------------
            /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */ "border-collapse": [
                {
                    border: [
                        "collapse",
                        "separate"
                    ]
                }
            ],
            /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */ "border-spacing": [
                {
                    "border-spacing": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */ "border-spacing-x": [
                {
                    "border-spacing-x": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */ "border-spacing-y": [
                {
                    "border-spacing-y": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */ "table-layout": [
                {
                    table: [
                        "auto",
                        "fixed"
                    ]
                }
            ],
            /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */ caption: [
                {
                    caption: [
                        "top",
                        "bottom"
                    ]
                }
            ],
            // ---------------------------------
            // --- Transitions and Animation ---
            // ---------------------------------
            /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */ transition: [
                {
                    transition: [
                        "",
                        "all",
                        "colors",
                        "opacity",
                        "shadow",
                        "transform",
                        "none",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */ "transition-behavior": [
                {
                    transition: [
                        "normal",
                        "discrete"
                    ]
                }
            ],
            /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */ duration: [
                {
                    duration: [
                        isNumber,
                        "initial",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */ ease: [
                {
                    ease: [
                        "linear",
                        "initial",
                        themeEase,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */ delay: [
                {
                    delay: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */ animate: [
                {
                    animate: [
                        "none",
                        themeAnimate,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------
            // --- Transforms ---
            // ------------------
            /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */ backface: [
                {
                    backface: [
                        "hidden",
                        "visible"
                    ]
                }
            ],
            /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */ perspective: [
                {
                    perspective: [
                        themePerspective,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */ "perspective-origin": [
                {
                    "perspective-origin": scalePositionWithArbitrary()
                }
            ],
            /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */ rotate: [
                {
                    rotate: scaleRotate()
                }
            ],
            /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */ "rotate-x": [
                {
                    "rotate-x": scaleRotate()
                }
            ],
            /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */ "rotate-y": [
                {
                    "rotate-y": scaleRotate()
                }
            ],
            /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */ "rotate-z": [
                {
                    "rotate-z": scaleRotate()
                }
            ],
            /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */ scale: [
                {
                    scale: scaleScale()
                }
            ],
            /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */ "scale-x": [
                {
                    "scale-x": scaleScale()
                }
            ],
            /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */ "scale-y": [
                {
                    "scale-y": scaleScale()
                }
            ],
            /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */ "scale-z": [
                {
                    "scale-z": scaleScale()
                }
            ],
            /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */ "scale-3d": [
                "scale-3d"
            ],
            /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */ skew: [
                {
                    skew: scaleSkew()
                }
            ],
            /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */ "skew-x": [
                {
                    "skew-x": scaleSkew()
                }
            ],
            /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */ "skew-y": [
                {
                    "skew-y": scaleSkew()
                }
            ],
            /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */ transform: [
                {
                    transform: [
                        isArbitraryVariable,
                        isArbitraryValue,
                        "",
                        "none",
                        "gpu",
                        "cpu"
                    ]
                }
            ],
            /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */ "transform-origin": [
                {
                    origin: scalePositionWithArbitrary()
                }
            ],
            /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */ "transform-style": [
                {
                    transform: [
                        "3d",
                        "flat"
                    ]
                }
            ],
            /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */ translate: [
                {
                    translate: scaleTranslate()
                }
            ],
            /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */ "translate-x": [
                {
                    "translate-x": scaleTranslate()
                }
            ],
            /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */ "translate-y": [
                {
                    "translate-y": scaleTranslate()
                }
            ],
            /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */ "translate-z": [
                {
                    "translate-z": scaleTranslate()
                }
            ],
            /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */ "translate-none": [
                "translate-none"
            ],
            // ---------------------
            // --- Interactivity ---
            // ---------------------
            /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */ accent: [
                {
                    accent: scaleColor()
                }
            ],
            /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */ appearance: [
                {
                    appearance: [
                        "none",
                        "auto"
                    ]
                }
            ],
            /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */ "caret-color": [
                {
                    caret: scaleColor()
                }
            ],
            /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */ "color-scheme": [
                {
                    scheme: [
                        "normal",
                        "dark",
                        "light",
                        "light-dark",
                        "only-dark",
                        "only-light"
                    ]
                }
            ],
            /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */ cursor: [
                {
                    cursor: [
                        "auto",
                        "default",
                        "pointer",
                        "wait",
                        "text",
                        "move",
                        "help",
                        "not-allowed",
                        "none",
                        "context-menu",
                        "progress",
                        "cell",
                        "crosshair",
                        "vertical-text",
                        "alias",
                        "copy",
                        "no-drop",
                        "grab",
                        "grabbing",
                        "all-scroll",
                        "col-resize",
                        "row-resize",
                        "n-resize",
                        "e-resize",
                        "s-resize",
                        "w-resize",
                        "ne-resize",
                        "nw-resize",
                        "se-resize",
                        "sw-resize",
                        "ew-resize",
                        "ns-resize",
                        "nesw-resize",
                        "nwse-resize",
                        "zoom-in",
                        "zoom-out",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */ "field-sizing": [
                {
                    "field-sizing": [
                        "fixed",
                        "content"
                    ]
                }
            ],
            /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */ "pointer-events": [
                {
                    "pointer-events": [
                        "auto",
                        "none"
                    ]
                }
            ],
            /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */ resize: [
                {
                    resize: [
                        "none",
                        "",
                        "y",
                        "x"
                    ]
                }
            ],
            /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */ "scroll-behavior": [
                {
                    scroll: [
                        "auto",
                        "smooth"
                    ]
                }
            ],
            /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-m": [
                {
                    "scroll-m": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-mx": [
                {
                    "scroll-mx": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-my": [
                {
                    "scroll-my": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-ms": [
                {
                    "scroll-ms": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-me": [
                {
                    "scroll-me": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-mt": [
                {
                    "scroll-mt": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-mr": [
                {
                    "scroll-mr": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-mb": [
                {
                    "scroll-mb": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */ "scroll-ml": [
                {
                    "scroll-ml": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-p": [
                {
                    "scroll-p": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-px": [
                {
                    "scroll-px": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-py": [
                {
                    "scroll-py": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-ps": [
                {
                    "scroll-ps": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-pe": [
                {
                    "scroll-pe": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-pt": [
                {
                    "scroll-pt": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-pr": [
                {
                    "scroll-pr": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-pb": [
                {
                    "scroll-pb": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */ "scroll-pl": [
                {
                    "scroll-pl": scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */ "snap-align": [
                {
                    snap: [
                        "start",
                        "end",
                        "center",
                        "align-none"
                    ]
                }
            ],
            /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */ "snap-stop": [
                {
                    snap: [
                        "normal",
                        "always"
                    ]
                }
            ],
            /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ "snap-type": [
                {
                    snap: [
                        "none",
                        "x",
                        "y",
                        "both"
                    ]
                }
            ],
            /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ "snap-strictness": [
                {
                    snap: [
                        "mandatory",
                        "proximity"
                    ]
                }
            ],
            /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */ touch: [
                {
                    touch: [
                        "auto",
                        "none",
                        "manipulation"
                    ]
                }
            ],
            /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */ "touch-x": [
                {
                    "touch-pan": [
                        "x",
                        "left",
                        "right"
                    ]
                }
            ],
            /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */ "touch-y": [
                {
                    "touch-pan": [
                        "y",
                        "up",
                        "down"
                    ]
                }
            ],
            /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */ "touch-pz": [
                "touch-pinch-zoom"
            ],
            /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */ select: [
                {
                    select: [
                        "none",
                        "text",
                        "all",
                        "auto"
                    ]
                }
            ],
            /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */ "will-change": [
                {
                    "will-change": [
                        "auto",
                        "scroll",
                        "contents",
                        "transform",
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -----------
            // --- SVG ---
            // -----------
            /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */ fill: [
                {
                    fill: [
                        "none",
                        ...scaleColor()
                    ]
                }
            ],
            /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */ "stroke-w": [
                {
                    stroke: [
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */ stroke: [
                {
                    stroke: [
                        "none",
                        ...scaleColor()
                    ]
                }
            ],
            // ---------------------
            // --- Accessibility ---
            // ---------------------
            /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */ "forced-color-adjust": [
                {
                    "forced-color-adjust": [
                        "auto",
                        "none"
                    ]
                }
            ]
        },
        conflictingClassGroups: {
            overflow: [
                "overflow-x",
                "overflow-y"
            ],
            overscroll: [
                "overscroll-x",
                "overscroll-y"
            ],
            inset: [
                "inset-x",
                "inset-y",
                "start",
                "end",
                "top",
                "right",
                "bottom",
                "left"
            ],
            "inset-x": [
                "right",
                "left"
            ],
            "inset-y": [
                "top",
                "bottom"
            ],
            flex: [
                "basis",
                "grow",
                "shrink"
            ],
            gap: [
                "gap-x",
                "gap-y"
            ],
            p: [
                "px",
                "py",
                "ps",
                "pe",
                "pt",
                "pr",
                "pb",
                "pl"
            ],
            px: [
                "pr",
                "pl"
            ],
            py: [
                "pt",
                "pb"
            ],
            m: [
                "mx",
                "my",
                "ms",
                "me",
                "mt",
                "mr",
                "mb",
                "ml"
            ],
            mx: [
                "mr",
                "ml"
            ],
            my: [
                "mt",
                "mb"
            ],
            size: [
                "w",
                "h"
            ],
            "font-size": [
                "leading"
            ],
            "fvn-normal": [
                "fvn-ordinal",
                "fvn-slashed-zero",
                "fvn-figure",
                "fvn-spacing",
                "fvn-fraction"
            ],
            "fvn-ordinal": [
                "fvn-normal"
            ],
            "fvn-slashed-zero": [
                "fvn-normal"
            ],
            "fvn-figure": [
                "fvn-normal"
            ],
            "fvn-spacing": [
                "fvn-normal"
            ],
            "fvn-fraction": [
                "fvn-normal"
            ],
            "line-clamp": [
                "display",
                "overflow"
            ],
            rounded: [
                "rounded-s",
                "rounded-e",
                "rounded-t",
                "rounded-r",
                "rounded-b",
                "rounded-l",
                "rounded-ss",
                "rounded-se",
                "rounded-ee",
                "rounded-es",
                "rounded-tl",
                "rounded-tr",
                "rounded-br",
                "rounded-bl"
            ],
            "rounded-s": [
                "rounded-ss",
                "rounded-es"
            ],
            "rounded-e": [
                "rounded-se",
                "rounded-ee"
            ],
            "rounded-t": [
                "rounded-tl",
                "rounded-tr"
            ],
            "rounded-r": [
                "rounded-tr",
                "rounded-br"
            ],
            "rounded-b": [
                "rounded-br",
                "rounded-bl"
            ],
            "rounded-l": [
                "rounded-tl",
                "rounded-bl"
            ],
            "border-spacing": [
                "border-spacing-x",
                "border-spacing-y"
            ],
            "border-w": [
                "border-w-x",
                "border-w-y",
                "border-w-s",
                "border-w-e",
                "border-w-t",
                "border-w-r",
                "border-w-b",
                "border-w-l"
            ],
            "border-w-x": [
                "border-w-r",
                "border-w-l"
            ],
            "border-w-y": [
                "border-w-t",
                "border-w-b"
            ],
            "border-color": [
                "border-color-x",
                "border-color-y",
                "border-color-s",
                "border-color-e",
                "border-color-t",
                "border-color-r",
                "border-color-b",
                "border-color-l"
            ],
            "border-color-x": [
                "border-color-r",
                "border-color-l"
            ],
            "border-color-y": [
                "border-color-t",
                "border-color-b"
            ],
            translate: [
                "translate-x",
                "translate-y",
                "translate-none"
            ],
            "translate-none": [
                "translate",
                "translate-x",
                "translate-y",
                "translate-z"
            ],
            "scroll-m": [
                "scroll-mx",
                "scroll-my",
                "scroll-ms",
                "scroll-me",
                "scroll-mt",
                "scroll-mr",
                "scroll-mb",
                "scroll-ml"
            ],
            "scroll-mx": [
                "scroll-mr",
                "scroll-ml"
            ],
            "scroll-my": [
                "scroll-mt",
                "scroll-mb"
            ],
            "scroll-p": [
                "scroll-px",
                "scroll-py",
                "scroll-ps",
                "scroll-pe",
                "scroll-pt",
                "scroll-pr",
                "scroll-pb",
                "scroll-pl"
            ],
            "scroll-px": [
                "scroll-pr",
                "scroll-pl"
            ],
            "scroll-py": [
                "scroll-pt",
                "scroll-pb"
            ],
            touch: [
                "touch-x",
                "touch-y",
                "touch-pz"
            ],
            "touch-x": [
                "touch"
            ],
            "touch-y": [
                "touch"
            ],
            "touch-pz": [
                "touch"
            ]
        },
        conflictingClassGroupModifiers: {
            "font-size": [
                "leading"
            ]
        },
        orderSensitiveModifiers: [
            "*",
            "**",
            "after",
            "backdrop",
            "before",
            "details-content",
            "file",
            "first-letter",
            "first-line",
            "marker",
            "placeholder",
            "selection"
        ]
    };
};
const mergeConfigs = (baseConfig, { cacheSize, prefix, experimentalParseClassName, extend = {}, override = {} })=>{
    overrideProperty(baseConfig, "cacheSize", cacheSize);
    overrideProperty(baseConfig, "prefix", prefix);
    overrideProperty(baseConfig, "experimentalParseClassName", experimentalParseClassName);
    overrideConfigProperties(baseConfig.theme, override.theme);
    overrideConfigProperties(baseConfig.classGroups, override.classGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);
    overrideProperty(baseConfig, "orderSensitiveModifiers", override.orderSensitiveModifiers);
    mergeConfigProperties(baseConfig.theme, extend.theme);
    mergeConfigProperties(baseConfig.classGroups, extend.classGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);
    mergeArrayProperties(baseConfig, extend, "orderSensitiveModifiers");
    return baseConfig;
};
const overrideProperty = (baseObject, overrideKey, overrideValue)=>{
    if (overrideValue !== void 0) {
        baseObject[overrideKey] = overrideValue;
    }
};
const overrideConfigProperties = (baseObject, overrideObject)=>{
    if (overrideObject) {
        for(const key in overrideObject){
            overrideProperty(baseObject, key, overrideObject[key]);
        }
    }
};
const mergeConfigProperties = (baseObject, mergeObject)=>{
    if (mergeObject) {
        for(const key in mergeObject){
            mergeArrayProperties(baseObject, mergeObject, key);
        }
    }
};
const mergeArrayProperties = (baseObject, mergeObject, key)=>{
    const mergeValue = mergeObject[key];
    if (mergeValue !== void 0) {
        baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;
    }
};
const extendTailwindMerge = (configExtension, ...createConfig)=>typeof configExtension === "function" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(()=>mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
const companionAnchorTagName = "stagewise-companion-anchor";
function getElementAtPoint(x2, y2) {
    const elementsBelowAnnotation = document.elementsFromPoint(x2, y2);
    const refElement = elementsBelowAnnotation.find((element)=>element.nodeName !== "STAGEWISE-COMPANION-ANCHOR" && !element.closest(companionAnchorTagName) && !element.closest("svg") && isElementAtPoint(element, x2, y2)) || document.body;
    return refElement;
}
const isElementAtPoint = (element, clientX, clientY)=>{
    const boundingRect = element.getBoundingClientRect();
    const isInHorizontalBounds = clientX > boundingRect.left && clientX < boundingRect.left + boundingRect.width;
    const isInVerticalBounds = clientY > boundingRect.top && clientY < boundingRect.top + boundingRect.height;
    return isInHorizontalBounds && isInVerticalBounds;
};
var HotkeyActions = /* @__PURE__ */ ((HotkeyActions2)=>{
    HotkeyActions2[HotkeyActions2["ESC"] = 0] = "ESC";
    HotkeyActions2[HotkeyActions2["CTRL_ALT_C"] = 1] = "CTRL_ALT_C";
    return HotkeyActions2;
})(HotkeyActions || {});
const hotkeyActionDefinitions = {
    [0]: {
        keyComboDefault: "Esc",
        keyComboMac: "esc",
        isEventMatching: (ev)=>ev.code === "Escape"
    },
    [1]: {
        keyComboDefault: "Ctrl+Alt+C",
        keyComboMac: "⌘+⌥+C",
        isEventMatching: (ev)=>ev.code === "KeyC" && (ev.ctrlKey || ev.metaKey) && ev.altKey
    }
};
const customTwMerge = extendTailwindMerge({
    extend: {
        classGroups: {
            "bg-image": [
                "bg-gradient",
                "bg-gradient-light-1",
                "bg-gradient-light-2",
                "bg-gradient-light-3"
            ]
        }
    }
});
function cn(...inputs) {
    return customTwMerge(clsx(inputs));
}
function Panel({ children, alwaysFullHeight = false }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("section", {
        className: cn("flex max-h-full min-h-48 flex-col items-stretch justify-start rounded-2xl border border-border/30 bg-zinc-50/80 p-4 shadow-md backdrop-blur-md", alwaysFullHeight && "h-full"),
        children
    });
}
Panel.Header = function PanelHeader({ title, description }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("header", {
        className: "mb-3 flex flex-col gap-1 text-zinc-950",
        children: [
            title && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("h3", {
                className: "font-semibold text-lg ",
                children: title
            }),
            description && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                className: "font-medium text-zinc-600",
                children: description
            })
        ]
    });
};
Panel.Content = function PanelContent({ children }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "-mx-4 flex flex-col gap-2 overflow-y-auto border-border/30 border-t px-4 pt-4 text-zinc-950",
        children
    });
};
Panel.Footer = function PanelFooter({ children }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("footer", {
        className: "flex flex-row items-end justify-end gap-2 text-sm text-zinc-600",
        children
    });
};
;
}}),
"[project]/node_modules/@stagewise/toolbar/dist/index.es.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "initToolbar": (()=>initToolbar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@stagewise/toolbar/dist/jsx-runtime-Bf2kozQ6.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@stagewise/toolbar/dist/panel-Ci3s5SA7.js [app-client] (ecmascript)");
;
;
const appStyle = '/*! tailwindcss v4.1.5 | MIT License | https://tailwindcss.com */\n@layer properties{@supports ((-webkit-hyphens:none) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){stagewise-companion-anchor *,stagewise-companion-anchor :before,stagewise-companion-anchor :after,stagewise-companion-anchor ::backdrop{--tw-scale-x:1;--tw-scale-y:1;--tw-scale-z:1;--tw-rotate-x:initial;--tw-rotate-y:initial;--tw-rotate-z:initial;--tw-skew-x:initial;--tw-skew-y:initial;--tw-space-y-reverse:0;--tw-space-x-reverse:0;--tw-divide-y-reverse:0;--tw-border-style:solid;--tw-gradient-position:initial;--tw-gradient-from:#0000;--tw-gradient-via:#0000;--tw-gradient-to:#0000;--tw-gradient-stops:initial;--tw-gradient-via-stops:initial;--tw-gradient-from-position:0%;--tw-gradient-via-position:50%;--tw-gradient-to-position:100%;--tw-font-weight:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-outline-style:solid;--tw-blur:initial;--tw-brightness:initial;--tw-contrast:initial;--tw-grayscale:initial;--tw-hue-rotate:initial;--tw-invert:initial;--tw-opacity:initial;--tw-saturate:initial;--tw-sepia:initial;--tw-drop-shadow:initial;--tw-drop-shadow-color:initial;--tw-drop-shadow-alpha:100%;--tw-drop-shadow-size:initial;--tw-backdrop-blur:initial;--tw-backdrop-brightness:initial;--tw-backdrop-contrast:initial;--tw-backdrop-grayscale:initial;--tw-backdrop-hue-rotate:initial;--tw-backdrop-invert:initial;--tw-backdrop-opacity:initial;--tw-backdrop-saturate:initial;--tw-backdrop-sepia:initial;--tw-duration:initial;--tw-ease:initial}}}@layer theme{stagewise-companion-anchor,stagewise-companion-anchor{--font-sans:ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-red-100:oklch(93.6% .032 17.717);--color-red-200:oklch(88.5% .062 18.334);--color-red-500:oklch(63.7% .237 25.331);--color-red-600:oklch(57.7% .245 27.325);--color-red-700:oklch(50.5% .213 27.518);--color-orange-50:oklch(98% .016 73.684);--color-orange-100:oklch(95.4% .038 75.164);--color-orange-200:oklch(90.1% .076 70.697);--color-orange-300:oklch(83.7% .128 66.29);--color-orange-500:oklch(70.5% .213 47.604);--color-orange-600:oklch(64.6% .222 41.116);--color-orange-700:oklch(55.3% .195 38.402);--color-orange-800:oklch(47% .157 37.304);--color-yellow-500:oklch(79.5% .184 86.047);--color-green-500:oklch(72.3% .219 149.579);--color-green-600:oklch(62.7% .194 149.214);--color-teal-500:oklch(70.4% .14 182.503);--color-sky-600:oklch(58.8% .158 241.966);--color-sky-700:oklch(50% .134 242.749);--color-blue-50:oklch(97% .014 254.604);--color-blue-100:oklch(93.2% .032 255.585);--color-blue-200:oklch(88.2% .059 254.128);--color-blue-300:oklch(80.9% .105 251.813);--color-blue-500:oklch(62.3% .214 259.815);--color-blue-600:oklch(54.6% .245 262.881);--color-blue-700:oklch(48.8% .243 264.376);--color-blue-800:oklch(42.4% .199 265.638);--color-indigo-700:oklch(45.7% .24 277.023);--color-indigo-950:oklch(25.7% .09 281.288);--color-violet-700:oklch(49.1% .27 292.581);--color-purple-500:oklch(62.7% .265 303.9);--color-fuchsia-700:oklch(51.8% .253 323.949);--color-pink-500:oklch(65.6% .241 354.308);--color-rose-600:oklch(58.6% .253 17.585);--color-zinc-50:oklch(98.5% 0 0);--color-zinc-100:oklch(96.7% .001 286.375);--color-zinc-300:oklch(87.1% .006 286.286);--color-zinc-400:oklch(70.5% .015 286.067);--color-zinc-500:oklch(55.2% .016 285.938);--color-zinc-600:oklch(44.2% .017 285.786);--color-zinc-700:oklch(37% .013 285.805);--color-zinc-900:oklch(21% .006 285.885);--color-zinc-950:oklch(14.1% .005 285.823);--color-black:#000;--color-white:#fff;--spacing:.25rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height:calc(1.5/1);--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--radius-md:.375rem;--radius-lg:.5rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-xl:0 9px 7px #0000001a;--ease-out:cubic-bezier(0,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--blur-md:12px;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono);--color-background:var(--color-white);--color-foreground:var(--color-zinc-950);--color-border:var(--color-zinc-500)}}@layer base{stagewise-companion-anchor *,stagewise-companion-anchor :after,stagewise-companion-anchor :before,stagewise-companion-anchor ::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}stagewise-companion-anchor ::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}:where(stagewise-companion-anchor),stagewise-companion-anchor{-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}stagewise-companion-anchor hr{height:0;color:inherit;border-top-width:1px}stagewise-companion-anchor abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}stagewise-companion-anchor h1,stagewise-companion-anchor h2,stagewise-companion-anchor h3,stagewise-companion-anchor h4,stagewise-companion-anchor h5,stagewise-companion-anchor h6{font-size:inherit;font-weight:inherit}stagewise-companion-anchor a{color:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}stagewise-companion-anchor b,stagewise-companion-anchor strong{font-weight:bolder}stagewise-companion-anchor code,stagewise-companion-anchor kbd,stagewise-companion-anchor samp,stagewise-companion-anchor pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}stagewise-companion-anchor small{font-size:80%}stagewise-companion-anchor sub,stagewise-companion-anchor sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}stagewise-companion-anchor sub{bottom:-.25em}stagewise-companion-anchor sup{top:-.5em}stagewise-companion-anchor table{text-indent:0;border-color:inherit;border-collapse:collapse}stagewise-companion-anchor :-moz-focusring{outline:auto}stagewise-companion-anchor progress{vertical-align:baseline}stagewise-companion-anchor summary{display:list-item}stagewise-companion-anchor ol,stagewise-companion-anchor ul,stagewise-companion-anchor menu{list-style:none}stagewise-companion-anchor img,stagewise-companion-anchor svg,stagewise-companion-anchor video,stagewise-companion-anchor canvas,stagewise-companion-anchor audio,stagewise-companion-anchor iframe,stagewise-companion-anchor embed,stagewise-companion-anchor object{vertical-align:middle;display:block}stagewise-companion-anchor img,stagewise-companion-anchor video{max-width:100%;height:auto}stagewise-companion-anchor button,stagewise-companion-anchor input,stagewise-companion-anchor select,stagewise-companion-anchor optgroup,stagewise-companion-anchor textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}stagewise-companion-anchor ::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}stagewise-companion-anchor :where(select:is([multiple],[size])) optgroup{font-weight:bolder}stagewise-companion-anchor :where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}stagewise-companion-anchor ::file-selector-button{margin-inline-end:4px}stagewise-companion-anchor ::-moz-placeholder{opacity:1}stagewise-companion-anchor ::placeholder{opacity:1}@supports (not (-webkit-appearance:-apple-pay-button)) or (contain-intrinsic-size:1px){stagewise-companion-anchor ::-moz-placeholder{color:currentColor}stagewise-companion-anchor ::placeholder{color:currentColor}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor ::-moz-placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}stagewise-companion-anchor ::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}stagewise-companion-anchor textarea{resize:vertical}stagewise-companion-anchor ::-webkit-search-decoration{-webkit-appearance:none}stagewise-companion-anchor ::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}stagewise-companion-anchor ::-webkit-datetime-edit{display:inline-flex}stagewise-companion-anchor ::-webkit-datetime-edit-fields-wrapper{padding:0}stagewise-companion-anchor ::-webkit-datetime-edit{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-year-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-month-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-day-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-hour-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-minute-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-second-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-millisecond-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-meridiem-field{padding-block:0}stagewise-companion-anchor :-moz-ui-invalid{box-shadow:none}stagewise-companion-anchor button,stagewise-companion-anchor input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}stagewise-companion-anchor ::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}stagewise-companion-anchor ::-webkit-inner-spin-button{height:auto}stagewise-companion-anchor ::-webkit-outer-spin-button{height:auto}stagewise-companion-anchor [hidden]:where(:not([hidden=until-found])){display:none!important}stagewise-companion-anchor stagewise-companion-anchor *{min-width:0;min-height:0;position:relative}}@layer components{stagewise-companion-anchor .chat-loading-gradient{background:linear-gradient(#f8fafccc,#f8fafccc) padding-box padding-box,linear-gradient(45deg,#8b5cf6,#06b6d4,#8b5cf6) 0 0/400% 400% border-box;border:2px solid #0000;animation:2s infinite gradient-animation}stagewise-companion-anchor .chat-success-border{animation:2s ease-out blink-green-fade}stagewise-companion-anchor .chat-error-border{animation:1s ease-out blink-red-fade}@keyframes blink-green-fade{0%,50%{box-shadow:0 0 0 2px #22c55eb3}to{box-shadow:0 0 0 2px #22c55e00}}@keyframes blink-red-fade{0%,50%{box-shadow:0 0 0 2px #ef4444}to{box-shadow:0 0 0 2px #ef444400}}}@layer utilities{stagewise-companion-anchor .pointer-events-auto{pointer-events:auto!important}stagewise-companion-anchor .pointer-events-none{pointer-events:none!important}stagewise-companion-anchor .visible{visibility:visible!important}stagewise-companion-anchor .absolute{position:absolute!important}stagewise-companion-anchor .fixed{position:fixed!important}stagewise-companion-anchor .relative{position:relative!important}stagewise-companion-anchor .inset-0{inset:calc(var(--spacing)*0)!important}stagewise-companion-anchor .inset-4{inset:calc(var(--spacing)*4)!important}stagewise-companion-anchor .top-0{top:calc(var(--spacing)*0)!important}stagewise-companion-anchor .top-0\\.5{top:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .top-1\\/2{top:50%!important}stagewise-companion-anchor .top-\\[-20\\%\\]{top:-20%!important}stagewise-companion-anchor .top-\\[25\\%\\]{top:25%!important}stagewise-companion-anchor .right-0{right:calc(var(--spacing)*0)!important}stagewise-companion-anchor .right-1\\/2{right:50%!important}stagewise-companion-anchor .right-\\[100\\%\\]{right:100%!important}stagewise-companion-anchor .bottom-0{bottom:calc(var(--spacing)*0)!important}stagewise-companion-anchor .bottom-1\\/2{bottom:50%!important}stagewise-companion-anchor .bottom-3{bottom:calc(var(--spacing)*3)!important}stagewise-companion-anchor .left-0{left:calc(var(--spacing)*0)!important}stagewise-companion-anchor .left-0\\.5{left:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .left-1\\/2{left:50%!important}stagewise-companion-anchor .left-3{left:calc(var(--spacing)*3)!important}stagewise-companion-anchor .left-\\[-10\\%\\]{left:-10%!important}stagewise-companion-anchor .left-\\[25\\%\\]{left:25%!important}stagewise-companion-anchor .left-\\[100\\%\\]{left:100%!important}stagewise-companion-anchor .z-20{z-index:20!important}stagewise-companion-anchor .z-50{z-index:50!important}stagewise-companion-anchor .container{width:100%!important}@media (min-width:40rem){stagewise-companion-anchor .container{max-width:40rem!important}}@media (min-width:48rem){stagewise-companion-anchor .container{max-width:48rem!important}}@media (min-width:64rem){stagewise-companion-anchor .container{max-width:64rem!important}}@media (min-width:80rem){stagewise-companion-anchor .container{max-width:80rem!important}}@media (min-width:96rem){stagewise-companion-anchor .container{max-width:96rem!important}}stagewise-companion-anchor .-mx-4{margin-inline:calc(var(--spacing)*-4)!important}stagewise-companion-anchor .my-2{margin-block:calc(var(--spacing)*2)!important}stagewise-companion-anchor .mt-1{margin-top:calc(var(--spacing)*1)!important}stagewise-companion-anchor .mt-2{margin-top:calc(var(--spacing)*2)!important}stagewise-companion-anchor .mb-2{margin-bottom:calc(var(--spacing)*2)!important}stagewise-companion-anchor .mb-3{margin-bottom:calc(var(--spacing)*3)!important}stagewise-companion-anchor .block{display:block!important}stagewise-companion-anchor .contents{display:contents!important}stagewise-companion-anchor .flex{display:flex!important}stagewise-companion-anchor .hidden{display:none!important}stagewise-companion-anchor .inline{display:inline!important}stagewise-companion-anchor .table{display:table!important}stagewise-companion-anchor .aspect-square{aspect-ratio:1!important}stagewise-companion-anchor .size-0{width:calc(var(--spacing)*0)!important;height:calc(var(--spacing)*0)!important}stagewise-companion-anchor .size-1\\.5{width:calc(var(--spacing)*1.5)!important;height:calc(var(--spacing)*1.5)!important}stagewise-companion-anchor .size-2\\/3{width:66.6667%!important;height:66.6667%!important}stagewise-companion-anchor .size-3{width:calc(var(--spacing)*3)!important;height:calc(var(--spacing)*3)!important}stagewise-companion-anchor .size-4{width:calc(var(--spacing)*4)!important;height:calc(var(--spacing)*4)!important}stagewise-companion-anchor .size-4\\.5{width:calc(var(--spacing)*4.5)!important;height:calc(var(--spacing)*4.5)!important}stagewise-companion-anchor .size-5{width:calc(var(--spacing)*5)!important;height:calc(var(--spacing)*5)!important}stagewise-companion-anchor .size-6{width:calc(var(--spacing)*6)!important;height:calc(var(--spacing)*6)!important}stagewise-companion-anchor .size-8{width:calc(var(--spacing)*8)!important;height:calc(var(--spacing)*8)!important}stagewise-companion-anchor .size-9{width:calc(var(--spacing)*9)!important;height:calc(var(--spacing)*9)!important}stagewise-companion-anchor .size-9\\/12{width:75%!important;height:75%!important}stagewise-companion-anchor .size-12{width:calc(var(--spacing)*12)!important;height:calc(var(--spacing)*12)!important}stagewise-companion-anchor .size-\\[120\\%\\]{width:120%!important;height:120%!important}stagewise-companion-anchor .size-full{width:100%!important;height:100%!important}stagewise-companion-anchor .h-0{height:calc(var(--spacing)*0)!important}stagewise-companion-anchor .h-3{height:calc(var(--spacing)*3)!important}stagewise-companion-anchor .h-5{height:calc(var(--spacing)*5)!important}stagewise-companion-anchor .h-8{height:calc(var(--spacing)*8)!important}stagewise-companion-anchor .h-9\\.5{height:calc(var(--spacing)*9.5)!important}stagewise-companion-anchor .h-12{height:calc(var(--spacing)*12)!important}stagewise-companion-anchor .h-16{height:calc(var(--spacing)*16)!important}stagewise-companion-anchor .h-24{height:calc(var(--spacing)*24)!important}stagewise-companion-anchor .h-\\[50\\%\\]{height:50%!important}stagewise-companion-anchor .h-\\[120\\%\\]{height:120%!important}stagewise-companion-anchor .h-\\[calc\\(100vh-32px\\)\\]{height:calc(100vh - 32px)!important}stagewise-companion-anchor .h-\\[calc-size\\(auto\\)\\]{height:calc-size(auto)!important}stagewise-companion-anchor .h-\\[calc-size\\(auto\\,size\\)\\]{height:calc-size(auto,size)!important}stagewise-companion-anchor .h-auto{height:auto!important}stagewise-companion-anchor .h-full{height:100%!important}stagewise-companion-anchor .h-screen{height:100vh!important}stagewise-companion-anchor .max-h-full{max-height:100%!important}stagewise-companion-anchor .min-h-0{min-height:calc(var(--spacing)*0)!important}stagewise-companion-anchor .min-h-48{min-height:calc(var(--spacing)*48)!important}stagewise-companion-anchor .w-8{width:calc(var(--spacing)*8)!important}stagewise-companion-anchor .w-9\\.5{width:calc(var(--spacing)*9.5)!important}stagewise-companion-anchor .w-96{width:calc(var(--spacing)*96)!important}stagewise-companion-anchor .w-\\[50\\%\\]{width:50%!important}stagewise-companion-anchor .w-auto{width:auto!important}stagewise-companion-anchor .w-fit{width:-moz-fit-content!important;width:fit-content!important}stagewise-companion-anchor .w-full{width:100%!important}stagewise-companion-anchor .w-max{width:-moz-max-content!important;width:max-content!important}stagewise-companion-anchor .w-screen{width:100vw!important}stagewise-companion-anchor .max-w-8{max-width:calc(var(--spacing)*8)!important}stagewise-companion-anchor .max-w-90{max-width:calc(var(--spacing)*90)!important}stagewise-companion-anchor .max-w-\\[40vw\\]{max-width:40vw!important}stagewise-companion-anchor .max-w-full{max-width:100%!important}stagewise-companion-anchor .min-w-3{min-width:calc(var(--spacing)*3)!important}stagewise-companion-anchor .min-w-24{min-width:calc(var(--spacing)*24)!important}stagewise-companion-anchor .flex-1{flex:1!important}stagewise-companion-anchor .shrink-0{flex-shrink:0!important}stagewise-companion-anchor .border-collapse{border-collapse:collapse!important}stagewise-companion-anchor .origin-bottom{transform-origin:bottom!important}stagewise-companion-anchor .origin-bottom-left{transform-origin:0 100%!important}stagewise-companion-anchor .origin-bottom-right{transform-origin:100% 100%!important}stagewise-companion-anchor .origin-center{transform-origin:50%!important}stagewise-companion-anchor .origin-top{transform-origin:top!important}stagewise-companion-anchor .origin-top-left{transform-origin:0 0!important}stagewise-companion-anchor .origin-top-right{transform-origin:100% 0!important}stagewise-companion-anchor .scale-25{--tw-scale-x:25%!important;--tw-scale-y:25%!important;--tw-scale-z:25%!important;scale:var(--tw-scale-x)var(--tw-scale-y)!important}stagewise-companion-anchor .scale-50{--tw-scale-x:50%!important;--tw-scale-y:50%!important;--tw-scale-z:50%!important;scale:var(--tw-scale-x)var(--tw-scale-y)!important}stagewise-companion-anchor .scale-100{--tw-scale-x:100%!important;--tw-scale-y:100%!important;--tw-scale-z:100%!important;scale:var(--tw-scale-x)var(--tw-scale-y)!important}stagewise-companion-anchor .transform{transform:var(--tw-rotate-x,)var(--tw-rotate-y,)var(--tw-rotate-z,)var(--tw-skew-x,)var(--tw-skew-y,)!important}stagewise-companion-anchor .animate-pulse{animation:var(--animate-pulse)!important}stagewise-companion-anchor .animate-spin{animation:var(--animate-spin)!important}stagewise-companion-anchor .cursor-copy{cursor:copy!important}stagewise-companion-anchor .cursor-not-allowed{cursor:not-allowed!important}stagewise-companion-anchor .cursor-pointer{cursor:pointer!important}stagewise-companion-anchor .resize{resize:both!important}stagewise-companion-anchor .resize-none{resize:none!important}stagewise-companion-anchor .snap-start{scroll-snap-align:start!important}stagewise-companion-anchor .list-inside{list-style-position:inside!important}stagewise-companion-anchor .list-decimal{list-style-type:decimal!important}stagewise-companion-anchor .flex-col{flex-direction:column!important}stagewise-companion-anchor .flex-col-reverse{flex-direction:column-reverse!important}stagewise-companion-anchor .flex-row{flex-direction:row!important}stagewise-companion-anchor .flex-wrap{flex-wrap:wrap!important}stagewise-companion-anchor .items-center{align-items:center!important}stagewise-companion-anchor .items-end{align-items:flex-end!important}stagewise-companion-anchor .items-start{align-items:flex-start!important}stagewise-companion-anchor .items-stretch{align-items:stretch!important}stagewise-companion-anchor .justify-between{justify-content:space-between!important}stagewise-companion-anchor .justify-center{justify-content:center!important}stagewise-companion-anchor .justify-end{justify-content:flex-end!important}stagewise-companion-anchor .justify-start{justify-content:flex-start!important}stagewise-companion-anchor .gap-0\\.5{gap:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .gap-1{gap:calc(var(--spacing)*1)!important}stagewise-companion-anchor .gap-2{gap:calc(var(--spacing)*2)!important}stagewise-companion-anchor .gap-3{gap:calc(var(--spacing)*3)!important}stagewise-companion-anchor :where(.space-y-1>:not(:last-child)){--tw-space-y-reverse:0!important;margin-block-start:calc(calc(var(--spacing)*1)*var(--tw-space-y-reverse))!important;margin-block-end:calc(calc(var(--spacing)*1)*calc(1 - var(--tw-space-y-reverse)))!important}stagewise-companion-anchor :where(.space-y-2>:not(:last-child)){--tw-space-y-reverse:0!important;margin-block-start:calc(calc(var(--spacing)*2)*var(--tw-space-y-reverse))!important;margin-block-end:calc(calc(var(--spacing)*2)*calc(1 - var(--tw-space-y-reverse)))!important}stagewise-companion-anchor :where(.space-y-3>:not(:last-child)){--tw-space-y-reverse:0!important;margin-block-start:calc(calc(var(--spacing)*3)*var(--tw-space-y-reverse))!important;margin-block-end:calc(calc(var(--spacing)*3)*calc(1 - var(--tw-space-y-reverse)))!important}stagewise-companion-anchor :where(.space-y-4>:not(:last-child)){--tw-space-y-reverse:0!important;margin-block-start:calc(calc(var(--spacing)*4)*var(--tw-space-y-reverse))!important;margin-block-end:calc(calc(var(--spacing)*4)*calc(1 - var(--tw-space-y-reverse)))!important}stagewise-companion-anchor :where(.space-x-2>:not(:last-child)){--tw-space-x-reverse:0!important;margin-inline-start:calc(calc(var(--spacing)*2)*var(--tw-space-x-reverse))!important;margin-inline-end:calc(calc(var(--spacing)*2)*calc(1 - var(--tw-space-x-reverse)))!important}stagewise-companion-anchor :where(.divide-y>:not(:last-child)){--tw-divide-y-reverse:0!important;border-bottom-style:var(--tw-border-style)!important;border-top-style:var(--tw-border-style)!important;border-top-width:calc(1px*var(--tw-divide-y-reverse))!important;border-bottom-width:calc(1px*calc(1 - var(--tw-divide-y-reverse)))!important}stagewise-companion-anchor :where(.divide-y-reverse>:not(:last-child)){--tw-divide-y-reverse:1!important}stagewise-companion-anchor :where(.divide-blue-200>:not(:last-child)){border-color:var(--color-blue-200)!important}stagewise-companion-anchor :where(.divide-border\\/20>:not(:last-child)){border-color:#71717b33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor :where(.divide-border\\/20>:not(:last-child)){border-color:color-mix(in oklab,var(--color-border)20%,transparent)!important}}stagewise-companion-anchor :where(.divide-orange-200>:not(:last-child)){border-color:var(--color-orange-200)!important}stagewise-companion-anchor .truncate{text-overflow:ellipsis!important;white-space:nowrap!important;overflow:hidden!important}stagewise-companion-anchor .overflow-hidden{overflow:hidden!important}stagewise-companion-anchor .overflow-visible{overflow:visible!important}stagewise-companion-anchor .overflow-y-auto{overflow-y:auto!important}stagewise-companion-anchor .rounded{border-radius:.25rem!important}stagewise-companion-anchor .rounded-2xl{border-radius:var(--radius-2xl)!important}stagewise-companion-anchor .rounded-full{border-radius:3.40282e38px!important}stagewise-companion-anchor .rounded-lg{border-radius:var(--radius-lg)!important}stagewise-companion-anchor .rounded-md{border-radius:var(--radius-md)!important}stagewise-companion-anchor .rounded-t-3xl{border-top-left-radius:var(--radius-3xl)!important;border-top-right-radius:var(--radius-3xl)!important}stagewise-companion-anchor .rounded-t-lg{border-top-left-radius:var(--radius-lg)!important;border-top-right-radius:var(--radius-lg)!important}stagewise-companion-anchor .rounded-b-3xl{border-bottom-right-radius:var(--radius-3xl)!important;border-bottom-left-radius:var(--radius-3xl)!important}stagewise-companion-anchor .rounded-b-lg{border-bottom-right-radius:var(--radius-lg)!important;border-bottom-left-radius:var(--radius-lg)!important}stagewise-companion-anchor .border{border-style:var(--tw-border-style)!important;border-width:1px!important}stagewise-companion-anchor .border-2{border-style:var(--tw-border-style)!important;border-width:2px!important}stagewise-companion-anchor .border-t{border-top-style:var(--tw-border-style)!important;border-top-width:1px!important}stagewise-companion-anchor .border-solid{--tw-border-style:solid!important;border-style:solid!important}stagewise-companion-anchor .border-blue-200{border-color:var(--color-blue-200)!important}stagewise-companion-anchor .border-blue-300{border-color:var(--color-blue-300)!important}stagewise-companion-anchor .border-blue-500{border-color:var(--color-blue-500)!important}stagewise-companion-anchor .border-blue-600\\/80{border-color:#155dfccc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-blue-600\\/80{border-color:color-mix(in oklab,var(--color-blue-600)80%,transparent)!important}}stagewise-companion-anchor .border-border\\/30{border-color:#71717b4d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-border\\/30{border-color:color-mix(in oklab,var(--color-border)30%,transparent)!important}}stagewise-companion-anchor .border-green-500{border-color:var(--color-green-500)!important}stagewise-companion-anchor .border-green-600\\/80{border-color:#00a544cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-green-600\\/80{border-color:color-mix(in oklab,var(--color-green-600)80%,transparent)!important}}stagewise-companion-anchor .border-orange-200{border-color:var(--color-orange-200)!important}stagewise-companion-anchor .border-orange-300{border-color:var(--color-orange-300)!important}stagewise-companion-anchor .border-orange-500{border-color:var(--color-orange-500)!important}stagewise-companion-anchor .border-pink-500{border-color:var(--color-pink-500)!important}stagewise-companion-anchor .border-purple-500{border-color:var(--color-purple-500)!important}stagewise-companion-anchor .border-red-200{border-color:var(--color-red-200)!important}stagewise-companion-anchor .border-red-500{border-color:var(--color-red-500)!important}stagewise-companion-anchor .border-transparent{border-color:#0000!important}stagewise-companion-anchor .border-yellow-500{border-color:var(--color-yellow-500)!important}stagewise-companion-anchor .border-zinc-300{border-color:var(--color-zinc-300)!important}stagewise-companion-anchor .border-zinc-500{border-color:var(--color-zinc-500)!important}stagewise-companion-anchor .bg-background\\/60{background-color:#fff9!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-background\\/60{background-color:color-mix(in oklab,var(--color-background)60%,transparent)!important}}stagewise-companion-anchor .bg-blue-50{background-color:var(--color-blue-50)!important}stagewise-companion-anchor .bg-blue-50\\/90{background-color:#eff6ffe6!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-blue-50\\/90{background-color:color-mix(in oklab,var(--color-blue-50)90%,transparent)!important}}stagewise-companion-anchor .bg-blue-100\\/80{background-color:#dbeafecc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-blue-100\\/80{background-color:color-mix(in oklab,var(--color-blue-100)80%,transparent)!important}}stagewise-companion-anchor .bg-blue-500{background-color:var(--color-blue-500)!important}stagewise-companion-anchor .bg-blue-600{background-color:var(--color-blue-600)!important}stagewise-companion-anchor .bg-blue-600\\/20{background-color:#155dfc33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-blue-600\\/20{background-color:color-mix(in oklab,var(--color-blue-600)20%,transparent)!important}}stagewise-companion-anchor .bg-green-500{background-color:var(--color-green-500)!important}stagewise-companion-anchor .bg-green-600\\/5{background-color:#00a5440d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-green-600\\/5{background-color:color-mix(in oklab,var(--color-green-600)5%,transparent)!important}}stagewise-companion-anchor .bg-orange-50\\/90{background-color:#fff7ede6!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-orange-50\\/90{background-color:color-mix(in oklab,var(--color-orange-50)90%,transparent)!important}}stagewise-companion-anchor .bg-orange-100\\/80{background-color:#ffedd5cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-orange-100\\/80{background-color:color-mix(in oklab,var(--color-orange-100)80%,transparent)!important}}stagewise-companion-anchor .bg-orange-500{background-color:var(--color-orange-500)!important}stagewise-companion-anchor .bg-orange-600{background-color:var(--color-orange-600)!important}stagewise-companion-anchor .bg-pink-500{background-color:var(--color-pink-500)!important}stagewise-companion-anchor .bg-purple-500{background-color:var(--color-purple-500)!important}stagewise-companion-anchor .bg-red-100{background-color:var(--color-red-100)!important}stagewise-companion-anchor .bg-red-500{background-color:var(--color-red-500)!important}stagewise-companion-anchor .bg-rose-600{background-color:var(--color-rose-600)!important}stagewise-companion-anchor .bg-transparent{background-color:#0000!important}stagewise-companion-anchor .bg-white{background-color:var(--color-white)!important}stagewise-companion-anchor .bg-white\\/40{background-color:#fff6!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-white\\/40{background-color:color-mix(in oklab,var(--color-white)40%,transparent)!important}}stagewise-companion-anchor .bg-yellow-500{background-color:var(--color-yellow-500)!important}stagewise-companion-anchor .bg-zinc-50\\/80{background-color:#fafafacc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-50\\/80{background-color:color-mix(in oklab,var(--color-zinc-50)80%,transparent)!important}}stagewise-companion-anchor .bg-zinc-300{background-color:var(--color-zinc-300)!important}stagewise-companion-anchor .bg-zinc-500{background-color:var(--color-zinc-500)!important}stagewise-companion-anchor .bg-zinc-500\\/10{background-color:#71717b1a!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-500\\/10{background-color:color-mix(in oklab,var(--color-zinc-500)10%,transparent)!important}}stagewise-companion-anchor .bg-zinc-500\\/40{background-color:#71717b66!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-500\\/40{background-color:color-mix(in oklab,var(--color-zinc-500)40%,transparent)!important}}stagewise-companion-anchor .bg-zinc-700\\/80{background-color:#3f3f46cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-700\\/80{background-color:color-mix(in oklab,var(--color-zinc-700)80%,transparent)!important}}stagewise-companion-anchor .bg-gradient-to-tr{--tw-gradient-position:to top right in oklab!important;background-image:linear-gradient(var(--tw-gradient-stops))!important}stagewise-companion-anchor .bg-\\[radial-gradient\\(circle\\,rgba\\(55\\,48\\,163\\,0\\)_55\\%\\,rgba\\(55\\,48\\,163\\,0\\.35\\)_73\\%\\)\\]{background-image:radial-gradient(circle,#3730a300 55%,#3730a359 73%)!important}stagewise-companion-anchor .bg-\\[radial-gradient\\(circle\\,rgba\\(219\\,39\\,119\\,0\\.2\\)_0\\%\\,rgba\\(219\\,39\\,119\\,0\\)_100\\%\\)\\]{background-image:radial-gradient(circle,#db277733 0%,#db277700 100%)!important}stagewise-companion-anchor .bg-\\[radial-gradient\\(circle\\,rgba\\(255\\,255\\,255\\,0\\)_60\\%\\,rgba\\(255\\,255\\,255\\,0\\.2\\)_70\\%\\)\\]{background-image:radial-gradient(circle,#fff0 60%,#fff3 70%)!important}stagewise-companion-anchor .from-blue-600{--tw-gradient-from:var(--color-blue-600)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .from-indigo-700{--tw-gradient-from:var(--color-indigo-700)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .from-orange-600{--tw-gradient-from:var(--color-orange-600)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .from-sky-700{--tw-gradient-from:var(--color-sky-700)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .via-blue-500{--tw-gradient-via:var(--color-blue-500)!important;--tw-gradient-via-stops:var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-via)var(--tw-gradient-via-position),var(--tw-gradient-to)var(--tw-gradient-to-position)!important;--tw-gradient-stops:var(--tw-gradient-via-stops)!important}stagewise-companion-anchor .to-fuchsia-700{--tw-gradient-to:var(--color-fuchsia-700)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .to-red-600{--tw-gradient-to:var(--color-red-600)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .to-sky-600{--tw-gradient-to:var(--color-sky-600)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .to-teal-500{--tw-gradient-to:var(--color-teal-500)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .fill-current{fill:currentColor!important}stagewise-companion-anchor .fill-white{fill:var(--color-white)!important}stagewise-companion-anchor .fill-zinc-500\\/50{fill:#71717b80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .fill-zinc-500\\/50{fill:color-mix(in oklab,var(--color-zinc-500)50%,transparent)!important}}stagewise-companion-anchor .fill-zinc-950{fill:var(--color-zinc-950)!important}stagewise-companion-anchor .stroke-black\\/30{stroke:#0000004d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .stroke-black\\/30{stroke:color-mix(in oklab,var(--color-black)30%,transparent)!important}}stagewise-companion-anchor .stroke-none{stroke:none!important}stagewise-companion-anchor .stroke-white{stroke:var(--color-white)!important}stagewise-companion-anchor .stroke-zinc-950{stroke:var(--color-zinc-950)!important}stagewise-companion-anchor .stroke-1{stroke-width:1px!important}stagewise-companion-anchor .p-0\\.5{padding:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .p-1{padding:calc(var(--spacing)*1)!important}stagewise-companion-anchor .p-2{padding:calc(var(--spacing)*2)!important}stagewise-companion-anchor .p-3{padding:calc(var(--spacing)*3)!important}stagewise-companion-anchor .p-4{padding:calc(var(--spacing)*4)!important}stagewise-companion-anchor .px-0\\.5{padding-inline:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .px-1{padding-inline:calc(var(--spacing)*1)!important}stagewise-companion-anchor .px-2{padding-inline:calc(var(--spacing)*2)!important}stagewise-companion-anchor .px-3{padding-inline:calc(var(--spacing)*3)!important}stagewise-companion-anchor .px-4{padding-inline:calc(var(--spacing)*4)!important}stagewise-companion-anchor .py-0{padding-block:calc(var(--spacing)*0)!important}stagewise-companion-anchor .py-0\\.5{padding-block:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .py-2{padding-block:calc(var(--spacing)*2)!important}stagewise-companion-anchor .pt-2{padding-top:calc(var(--spacing)*2)!important}stagewise-companion-anchor .pt-4{padding-top:calc(var(--spacing)*4)!important}stagewise-companion-anchor .pr-6{padding-right:calc(var(--spacing)*6)!important}stagewise-companion-anchor .pb-4{padding-bottom:calc(var(--spacing)*4)!important}stagewise-companion-anchor .pl-2{padding-left:calc(var(--spacing)*2)!important}stagewise-companion-anchor .text-base{font-size:var(--text-base)!important;line-height:var(--tw-leading,var(--text-base--line-height))!important}stagewise-companion-anchor .text-lg{font-size:var(--text-lg)!important;line-height:var(--tw-leading,var(--text-lg--line-height))!important}stagewise-companion-anchor .text-sm{font-size:var(--text-sm)!important;line-height:var(--tw-leading,var(--text-sm--line-height))!important}stagewise-companion-anchor .text-xs{font-size:var(--text-xs)!important;line-height:var(--tw-leading,var(--text-xs--line-height))!important}stagewise-companion-anchor .text-\\[0\\.5em\\]{font-size:.5em!important}stagewise-companion-anchor .font-bold{--tw-font-weight:var(--font-weight-bold)!important;font-weight:var(--font-weight-bold)!important}stagewise-companion-anchor .font-medium{--tw-font-weight:var(--font-weight-medium)!important;font-weight:var(--font-weight-medium)!important}stagewise-companion-anchor .font-normal{--tw-font-weight:var(--font-weight-normal)!important;font-weight:var(--font-weight-normal)!important}stagewise-companion-anchor .font-semibold{--tw-font-weight:var(--font-weight-semibold)!important;font-weight:var(--font-weight-semibold)!important}stagewise-companion-anchor .text-blue-500{color:var(--color-blue-500)!important}stagewise-companion-anchor .text-blue-600{color:var(--color-blue-600)!important}stagewise-companion-anchor .text-blue-700{color:var(--color-blue-700)!important}stagewise-companion-anchor .text-blue-800{color:var(--color-blue-800)!important}stagewise-companion-anchor .text-foreground{color:var(--color-foreground)!important}stagewise-companion-anchor .text-indigo-700{color:var(--color-indigo-700)!important}stagewise-companion-anchor .text-orange-600{color:var(--color-orange-600)!important}stagewise-companion-anchor .text-orange-700{color:var(--color-orange-700)!important}stagewise-companion-anchor .text-orange-800{color:var(--color-orange-800)!important}stagewise-companion-anchor .text-red-600{color:var(--color-red-600)!important}stagewise-companion-anchor .text-red-700{color:var(--color-red-700)!important}stagewise-companion-anchor .text-transparent{color:#0000!important}stagewise-companion-anchor .text-violet-700{color:var(--color-violet-700)!important}stagewise-companion-anchor .text-white{color:var(--color-white)!important}stagewise-companion-anchor .text-zinc-500{color:var(--color-zinc-500)!important}stagewise-companion-anchor .text-zinc-600{color:var(--color-zinc-600)!important}stagewise-companion-anchor .text-zinc-700{color:var(--color-zinc-700)!important}stagewise-companion-anchor .text-zinc-950{color:var(--color-zinc-950)!important}stagewise-companion-anchor .opacity-0{opacity:0!important}stagewise-companion-anchor .opacity-20{opacity:.2!important}stagewise-companion-anchor .opacity-30{opacity:.3!important}stagewise-companion-anchor .opacity-80{opacity:.8!important}stagewise-companion-anchor .opacity-100{opacity:1!important}stagewise-companion-anchor .shadow{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-lg{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-md{--tw-shadow:0 4px 6px -1px var(--tw-shadow-color,#0000001a),0 2px 4px -2px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-sm{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .ring{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(1px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-black\\/50{--tw-shadow-color:#00000080!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .shadow-black\\/50{--tw-shadow-color:color-mix(in oklab,color-mix(in oklab,var(--color-black)50%,transparent)var(--tw-shadow-alpha),transparent)!important}}stagewise-companion-anchor .ring-transparent{--tw-ring-color:transparent!important}stagewise-companion-anchor .ring-zinc-950\\/20{--tw-ring-color:#09090b33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .ring-zinc-950\\/20{--tw-ring-color:color-mix(in oklab,var(--color-zinc-950)20%,transparent)!important}}stagewise-companion-anchor .outline{outline-style:var(--tw-outline-style)!important;outline-width:1px!important}stagewise-companion-anchor .blur{--tw-blur:blur(8px)!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .blur-md{--tw-blur:blur(var(--blur-md))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .blur-none{--tw-blur: !important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-md{--tw-drop-shadow-size:drop-shadow(0 3px 3px var(--tw-drop-shadow-color,#0000001f))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-md))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-xl{--tw-drop-shadow-size:drop-shadow(0 9px 7px var(--tw-drop-shadow-color,#0000001a))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-xl))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-xs{--tw-drop-shadow-size:drop-shadow(0 1px 1px var(--tw-drop-shadow-color,#0000000d))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-xs))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-black{--tw-drop-shadow-color:#000!important;--tw-drop-shadow:var(--tw-drop-shadow-size)!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .drop-shadow-black{--tw-drop-shadow-color:color-mix(in oklab,var(--color-black)var(--tw-drop-shadow-alpha),transparent)!important}}stagewise-companion-anchor .drop-shadow-indigo-950{--tw-drop-shadow-color:oklch(25.7% .09 281.288)!important;--tw-drop-shadow:var(--tw-drop-shadow-size)!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .drop-shadow-indigo-950{--tw-drop-shadow-color:color-mix(in oklab,var(--color-indigo-950)var(--tw-drop-shadow-alpha),transparent)!important}}stagewise-companion-anchor .filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .backdrop-blur{--tw-backdrop-blur:blur(8px)!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .backdrop-blur-md{--tw-backdrop-blur:blur(var(--blur-md))!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .backdrop-saturate-150{--tw-backdrop-saturate:saturate(150%)!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,visibility,content-visibility,overlay,pointer-events!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .transition-all{transition-property:all!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .transition-colors{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .duration-0{--tw-duration:0s!important;transition-duration:0s!important}stagewise-companion-anchor .duration-100{--tw-duration:.1s!important;transition-duration:.1s!important}stagewise-companion-anchor .duration-150{--tw-duration:.15s!important;transition-duration:.15s!important}stagewise-companion-anchor .duration-300{--tw-duration:.3s!important;transition-duration:.3s!important}stagewise-companion-anchor .duration-500{--tw-duration:.5s!important;transition-duration:.5s!important}stagewise-companion-anchor .ease-out{--tw-ease:var(--ease-out)!important;transition-timing-function:var(--ease-out)!important}stagewise-companion-anchor .outline-none{--tw-outline-style:none!important;outline-style:none!important}stagewise-companion-anchor .select-none{-webkit-user-select:none!important;-moz-user-select:none!important;user-select:none!important}stagewise-companion-anchor :is(.\\*\\:size-full>*){width:100%!important;height:100%!important}stagewise-companion-anchor .placeholder\\:text-zinc-400::-moz-placeholder{color:var(--color-zinc-400)!important}stagewise-companion-anchor .placeholder\\:text-zinc-400::placeholder{color:var(--color-zinc-400)!important}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/50::-moz-placeholder{color:#09090b80!important}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/50::placeholder{color:#09090b80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .placeholder\\:text-zinc-950\\/50::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)!important}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/50::placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)!important}}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/70::-moz-placeholder{color:#09090bb3!important}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/70::placeholder{color:#09090bb3!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .placeholder\\:text-zinc-950\\/70::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)!important}stagewise-companion-anchor .placeholder\\:text-zinc-950\\/70::placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)!important}}@media (hover:hover){stagewise-companion-anchor .hover\\:border-red-600\\/80:hover{border-color:#e40014cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\:border-red-600\\/80:hover{border-color:color-mix(in oklab,var(--color-red-600)80%,transparent)!important}}stagewise-companion-anchor .hover\\:bg-orange-200:hover{background-color:var(--color-orange-200)!important}stagewise-companion-anchor .hover\\:bg-orange-700:hover{background-color:var(--color-orange-700)!important}stagewise-companion-anchor .hover\\:bg-red-600\\/20:hover{background-color:#e4001433!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\:bg-red-600\\/20:hover{background-color:color-mix(in oklab,var(--color-red-600)20%,transparent)!important}}stagewise-companion-anchor .hover\\:bg-zinc-500\\/20:hover{background-color:#71717b33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\:bg-zinc-500\\/20:hover{background-color:color-mix(in oklab,var(--color-zinc-500)20%,transparent)!important}}stagewise-companion-anchor .hover\\:bg-zinc-950\\/5:hover{background-color:#09090b0d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\:bg-zinc-950\\/5:hover{background-color:color-mix(in oklab,var(--color-zinc-950)5%,transparent)!important}}stagewise-companion-anchor .hover\\:bg-zinc-950\\/10:hover{background-color:#09090b1a!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\:bg-zinc-950\\/10:hover{background-color:color-mix(in oklab,var(--color-zinc-950)10%,transparent)!important}}stagewise-companion-anchor .hover\\:text-orange-800:hover{color:var(--color-orange-800)!important}stagewise-companion-anchor .hover\\:text-white:hover{color:var(--color-white)!important}stagewise-companion-anchor .hover\\:underline:hover{text-decoration-line:underline!important}stagewise-companion-anchor .hover\\:opacity-100:hover{opacity:1!important}stagewise-companion-anchor .hover\\:shadow-lg:hover{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}}stagewise-companion-anchor .focus\\:border-zinc-500:focus{border-color:var(--color-zinc-500)!important}stagewise-companion-anchor .focus\\:text-zinc-900:focus{color:var(--color-zinc-900)!important}stagewise-companion-anchor .focus\\:outline-none:focus{--tw-outline-style:none!important;outline-style:none!important}stagewise-companion-anchor .disabled\\:opacity-50:disabled{opacity:.5!important}stagewise-companion-anchor .data-focus\\:outline-none[data-focus]{--tw-outline-style:none!important;outline-style:none!important}stagewise-companion-anchor .animate-shake{animation:.5s ease-in-out 2 shake}}@keyframes shake{0%,to{transform:translate(0)}10%,30%,50%,70%,90%{transform:translate(-2px)}20%,40%,60%,80%{transform:translate(2px)}}@keyframes gradient-animation{0%{background-position:0%}50%{background-position:100%}to{background-position:0%}}stagewise-companion-anchor stagewise-companion-anchor{all:initial;interpolate-size:allow-keywords;transform:translate(0);color:var(--color-zinc-950)!important;letter-spacing:normal!important;text-rendering:auto!important;font-family:Inter,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important;font-weight:400!important;line-height:normal!important}@supports (font-variation-settings:normal){stagewise-companion-anchor stagewise-companion-anchor{font-optical-sizing:auto!important;font-family:InterVariable,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important}}stagewise-companion-anchor #headlessui-portal-root{z-index:50!important;width:100vw!important;height:100vh!important;position:fixed!important}stagewise-companion-anchor #headlessui-portal-root>*{pointer-events:auto!important}@property --tw-scale-x{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-y{syntax:"*";inherits:false;initial-value:1}@property --tw-scale-z{syntax:"*";inherits:false;initial-value:1}@property --tw-rotate-x{syntax:"*";inherits:false}@property --tw-rotate-y{syntax:"*";inherits:false}@property --tw-rotate-z{syntax:"*";inherits:false}@property --tw-skew-x{syntax:"*";inherits:false}@property --tw-skew-y{syntax:"*";inherits:false}@property --tw-space-y-reverse{syntax:"*";inherits:false;initial-value:0}@property --tw-space-x-reverse{syntax:"*";inherits:false;initial-value:0}@property --tw-divide-y-reverse{syntax:"*";inherits:false;initial-value:0}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-gradient-position{syntax:"*";inherits:false}@property --tw-gradient-from{syntax:"<color>";inherits:false;initial-value:#0000}@property --tw-gradient-via{syntax:"<color>";inherits:false;initial-value:#0000}@property --tw-gradient-to{syntax:"<color>";inherits:false;initial-value:#0000}@property --tw-gradient-stops{syntax:"*";inherits:false}@property --tw-gradient-via-stops{syntax:"*";inherits:false}@property --tw-gradient-from-position{syntax:"<length-percentage>";inherits:false;initial-value:0%}@property --tw-gradient-via-position{syntax:"<length-percentage>";inherits:false;initial-value:50%}@property --tw-gradient-to-position{syntax:"<length-percentage>";inherits:false;initial-value:100%}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-outline-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-blur{syntax:"*";inherits:false}@property --tw-brightness{syntax:"*";inherits:false}@property --tw-contrast{syntax:"*";inherits:false}@property --tw-grayscale{syntax:"*";inherits:false}@property --tw-hue-rotate{syntax:"*";inherits:false}@property --tw-invert{syntax:"*";inherits:false}@property --tw-opacity{syntax:"*";inherits:false}@property --tw-saturate{syntax:"*";inherits:false}@property --tw-sepia{syntax:"*";inherits:false}@property --tw-drop-shadow{syntax:"*";inherits:false}@property --tw-drop-shadow-color{syntax:"*";inherits:false}@property --tw-drop-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-drop-shadow-size{syntax:"*";inherits:false}@property --tw-backdrop-blur{syntax:"*";inherits:false}@property --tw-backdrop-brightness{syntax:"*";inherits:false}@property --tw-backdrop-contrast{syntax:"*";inherits:false}@property --tw-backdrop-grayscale{syntax:"*";inherits:false}@property --tw-backdrop-hue-rotate{syntax:"*";inherits:false}@property --tw-backdrop-invert{syntax:"*";inherits:false}@property --tw-backdrop-opacity{syntax:"*";inherits:false}@property --tw-backdrop-saturate{syntax:"*";inherits:false}@property --tw-backdrop-sepia{syntax:"*";inherits:false}@property --tw-duration{syntax:"*";inherits:false}@property --tw-ease{syntax:"*";inherits:false}@keyframes spin{to{transform:rotate(360deg)}}@keyframes pulse{50%{opacity:.5}}\n';
function getElementAttributes(element) {
    const attrs = {};
    const priorityAttrs = [
        "id",
        "class",
        "name",
        "type",
        "href",
        "src",
        "alt",
        "for",
        "placeholder"
    ];
    const dataAttrs = [];
    for(let i2 = 0; i2 < element.attributes.length; i2++){
        const attr = element.attributes[i2];
        if (attr.name.startsWith("data-")) {
            dataAttrs.push({
                name: attr.name,
                value: attr.value
            });
        } else if (priorityAttrs.includes(attr.name.toLowerCase()) || attr.name.toLowerCase() !== "style") {
            attrs[attr.name] = attr.value;
        }
    }
    dataAttrs.forEach((da)=>{
        attrs[da.name] = da.value;
    });
    return attrs;
}
function generateElementContext(element, index) {
    var _a;
    let context = `<element index="${index + 1}">
`;
    context += `  <tag>${element.tagName.toLowerCase()}</tag>
`;
    const id = element.id;
    if (id) {
        context += `  <id>${id}</id>
`;
    }
    const classes = Array.from(element.classList).join(", ");
    if (classes) {
        context += `  <classes>${classes}</classes>
`;
    }
    const attributes = getElementAttributes(element);
    if (Object.keys(attributes).length > 0) {
        context += `  <attributes>
`;
        for (const [key, value] of Object.entries(attributes)){
            if (key.toLowerCase() !== "class" || !classes) {
                context += `    <${key}>${value}</${key}>
`;
            }
        }
        context += `  </attributes>
`;
    }
    const text = (_a = element.innerText) == null ? void 0 : _a.trim();
    if (text) {
        const maxLength = 100;
        context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>
`;
    }
    context += `  <structural_context>
`;
    if (element.parentElement) {
        const parent = element.parentElement;
        context += `    <parent>
`;
        context += `      <tag>${parent.tagName.toLowerCase()}</tag>
`;
        if (parent.id) {
            context += `      <id>${parent.id}</id>
`;
        }
        const parentClasses = Array.from(parent.classList).join(", ");
        if (parentClasses) {
            context += `      <classes>${parentClasses}</classes>
`;
        }
        context += `    </parent>
`;
    } else {
        context += `    <parent>No parent element found (likely root or disconnected)</parent>
`;
    }
    context += `  </structural_context>
`;
    try {
        const styles = window.getComputedStyle(element);
        const relevantStyles = {
            color: styles.color,
            backgroundColor: styles.backgroundColor,
            fontSize: styles.fontSize,
            fontWeight: styles.fontWeight,
            display: styles.display
        };
        context += `  <styles>
`;
        for (const [key, value] of Object.entries(relevantStyles)){
            context += `    <${key}>${value}</${key}>
`;
        }
        context += `  </styles>
`;
    } catch (e2) {
        context += `  <styles>Could not retrieve computed styles</styles>
`;
    }
    context += `</element>
`;
    return context;
}
function createPrompt(selectedElements, userPrompt, url, contextSnippets) {
    const pluginContext = contextSnippets.map((snippet)=>`
      <plugin_contexts>
<${snippet.pluginName}>
${snippet.contextSnippets.map((snippet2)=>`    <${snippet2.promptContextName}>${snippet2.content}</${snippet2.promptContextName}>`).join("\n")}
</${snippet.pluginName}>
</plugin_contexts>
`.trim()).join("\n");
    if (!selectedElements || selectedElements.length === 0) {
        return `
    <request>
      <user_goal>${userPrompt}</user_goal>
      <url>${url}</url>
  <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>
  ${pluginContext}
</request>`.trim();
    }
    let detailedContext = "";
    selectedElements.forEach((element, index)=>{
        detailedContext += generateElementContext(element, index);
    });
    return `
<request>
  <user_goal>${userPrompt}</user_goal>
  <url>${url}</url>
  <selected_elements>
    ${detailedContext.trim()}
  </selected_elements>
  ${pluginContext}
</request>`.trim();
}
const createStoreImpl = (createState)=>{
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace)=>{
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
            const previousState = state;
            state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener)=>listener(state, previousState));
        }
    };
    const getState = ()=>state;
    const getInitialState = ()=>initialState;
    const subscribe = (listener)=>{
        listeners.add(listener);
        return ()=>listeners.delete(listener);
    };
    const api = {
        setState,
        getState,
        getInitialState,
        subscribe
    };
    const initialState = state = createState(setState, getState, api);
    return api;
};
const createStore = (createState)=>createState ? createStoreImpl(createState) : createStoreImpl;
const identity = (arg)=>arg;
function useStore(api, selector = identity) {
    const slice = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].useSyncExternalStore(api.subscribe, {
        "useStore.useSyncExternalStore[slice]": ()=>selector(api.getState())
    }["useStore.useSyncExternalStore[slice]"], {
        "useStore.useSyncExternalStore[slice]": ()=>selector(api.getInitialState())
    }["useStore.useSyncExternalStore[slice]"]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].useDebugValue(slice);
    return slice;
}
const createImpl = (createState)=>{
    const api = createStore(createState);
    const useBoundStore = (selector)=>useStore(api, selector);
    Object.assign(useBoundStore, api);
    return useBoundStore;
};
const create = (createState)=>createState ? createImpl(createState) : createImpl;
class DoubleIndexedKV {
    constructor(){
        this.keyToValue = /* @__PURE__ */ new Map();
        this.valueToKey = /* @__PURE__ */ new Map();
    }
    set(key, value) {
        this.keyToValue.set(key, value);
        this.valueToKey.set(value, key);
    }
    getByKey(key) {
        return this.keyToValue.get(key);
    }
    getByValue(value) {
        return this.valueToKey.get(value);
    }
    clear() {
        this.keyToValue.clear();
        this.valueToKey.clear();
    }
}
class Registry {
    constructor(generateIdentifier){
        this.generateIdentifier = generateIdentifier;
        this.kv = new DoubleIndexedKV();
    }
    register(value, identifier) {
        if (this.kv.getByValue(value)) {
            return;
        }
        if (!identifier) {
            identifier = this.generateIdentifier(value);
        }
        this.kv.set(identifier, value);
    }
    clear() {
        this.kv.clear();
    }
    getIdentifier(value) {
        return this.kv.getByValue(value);
    }
    getValue(identifier) {
        return this.kv.getByKey(identifier);
    }
}
class ClassRegistry extends Registry {
    constructor(){
        super((c2)=>c2.name);
        this.classToAllowedProps = /* @__PURE__ */ new Map();
    }
    register(value, options) {
        if (typeof options === "object") {
            if (options.allowProps) {
                this.classToAllowedProps.set(value, options.allowProps);
            }
            super.register(value, options.identifier);
        } else {
            super.register(value, options);
        }
    }
    getAllowedProps(value) {
        return this.classToAllowedProps.get(value);
    }
}
function valuesOfObj(record) {
    if ("values" in Object) {
        return Object.values(record);
    }
    const values = [];
    for(const key in record){
        if (record.hasOwnProperty(key)) {
            values.push(record[key]);
        }
    }
    return values;
}
function find(record, predicate) {
    const values = valuesOfObj(record);
    if ("find" in values) {
        return values.find(predicate);
    }
    const valuesNotNever = values;
    for(let i2 = 0; i2 < valuesNotNever.length; i2++){
        const value = valuesNotNever[i2];
        if (predicate(value)) {
            return value;
        }
    }
    return void 0;
}
function forEach(record, run) {
    Object.entries(record).forEach(([key, value])=>run(value, key));
}
function includes(arr, value) {
    return arr.indexOf(value) !== -1;
}
function findArr(record, predicate) {
    for(let i2 = 0; i2 < record.length; i2++){
        const value = record[i2];
        if (predicate(value)) {
            return value;
        }
    }
    return void 0;
}
class CustomTransformerRegistry {
    constructor(){
        this.transfomers = {};
    }
    register(transformer) {
        this.transfomers[transformer.name] = transformer;
    }
    findApplicable(v2) {
        return find(this.transfomers, (transformer)=>transformer.isApplicable(v2));
    }
    findByName(name) {
        return this.transfomers[name];
    }
}
const getType$1 = (payload)=>Object.prototype.toString.call(payload).slice(8, -1);
const isUndefined = (payload)=>typeof payload === "undefined";
const isNull = (payload)=>payload === null;
const isPlainObject$1 = (payload)=>{
    if (typeof payload !== "object" || payload === null) return false;
    if (payload === Object.prototype) return false;
    if (Object.getPrototypeOf(payload) === null) return true;
    return Object.getPrototypeOf(payload) === Object.prototype;
};
const isEmptyObject = (payload)=>isPlainObject$1(payload) && Object.keys(payload).length === 0;
const isArray$1 = (payload)=>Array.isArray(payload);
const isString = (payload)=>typeof payload === "string";
const isNumber = (payload)=>typeof payload === "number" && !isNaN(payload);
const isBoolean = (payload)=>typeof payload === "boolean";
const isRegExp = (payload)=>payload instanceof RegExp;
const isMap = (payload)=>payload instanceof Map;
const isSet = (payload)=>payload instanceof Set;
const isSymbol = (payload)=>getType$1(payload) === "Symbol";
const isDate = (payload)=>payload instanceof Date && !isNaN(payload.valueOf());
const isError = (payload)=>payload instanceof Error;
const isNaNValue = (payload)=>typeof payload === "number" && isNaN(payload);
const isPrimitive = (payload)=>isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);
const isBigint = (payload)=>typeof payload === "bigint";
const isInfinite = (payload)=>payload === Infinity || payload === -Infinity;
const isTypedArray = (payload)=>ArrayBuffer.isView(payload) && !(payload instanceof DataView);
const isURL = (payload)=>payload instanceof URL;
const escapeKey = (key)=>key.replace(/\./g, "\\.");
const stringifyPath = (path)=>path.map(String).map(escapeKey).join(".");
const parsePath = (string)=>{
    const result = [];
    let segment = "";
    for(let i2 = 0; i2 < string.length; i2++){
        let char = string.charAt(i2);
        const isEscapedDot = char === "\\" && string.charAt(i2 + 1) === ".";
        if (isEscapedDot) {
            segment += ".";
            i2++;
            continue;
        }
        const isEndOfSegment = char === ".";
        if (isEndOfSegment) {
            result.push(segment);
            segment = "";
            continue;
        }
        segment += char;
    }
    const lastSegment = segment;
    result.push(lastSegment);
    return result;
};
function simpleTransformation(isApplicable, annotation, transform, untransform) {
    return {
        isApplicable,
        annotation,
        transform,
        untransform
    };
}
const simpleRules = [
    simpleTransformation(isUndefined, "undefined", ()=>null, ()=>void 0),
    simpleTransformation(isBigint, "bigint", (v2)=>v2.toString(), (v2)=>{
        if (typeof BigInt !== "undefined") {
            return BigInt(v2);
        }
        console.error("Please add a BigInt polyfill.");
        return v2;
    }),
    simpleTransformation(isDate, "Date", (v2)=>v2.toISOString(), (v2)=>new Date(v2)),
    simpleTransformation(isError, "Error", (v2, superJson)=>{
        const baseError = {
            name: v2.name,
            message: v2.message
        };
        superJson.allowedErrorProps.forEach((prop)=>{
            baseError[prop] = v2[prop];
        });
        return baseError;
    }, (v2, superJson)=>{
        const e2 = new Error(v2.message);
        e2.name = v2.name;
        e2.stack = v2.stack;
        superJson.allowedErrorProps.forEach((prop)=>{
            e2[prop] = v2[prop];
        });
        return e2;
    }),
    simpleTransformation(isRegExp, "regexp", (v2)=>"" + v2, (regex)=>{
        const body = regex.slice(1, regex.lastIndexOf("/"));
        const flags = regex.slice(regex.lastIndexOf("/") + 1);
        return new RegExp(body, flags);
    }),
    simpleTransformation(isSet, "set", // (sets only exist in es6+)
    // eslint-disable-next-line es5/no-es6-methods
    (v2)=>[
            ...v2.values()
        ], (v2)=>new Set(v2)),
    simpleTransformation(isMap, "map", (v2)=>[
            ...v2.entries()
        ], (v2)=>new Map(v2)),
    simpleTransformation((v2)=>isNaNValue(v2) || isInfinite(v2), "number", (v2)=>{
        if (isNaNValue(v2)) {
            return "NaN";
        }
        if (v2 > 0) {
            return "Infinity";
        } else {
            return "-Infinity";
        }
    }, Number),
    simpleTransformation((v2)=>v2 === 0 && 1 / v2 === -Infinity, "number", ()=>{
        return "-0";
    }, Number),
    simpleTransformation(isURL, "URL", (v2)=>v2.toString(), (v2)=>new URL(v2))
];
function compositeTransformation(isApplicable, annotation, transform, untransform) {
    return {
        isApplicable,
        annotation,
        transform,
        untransform
    };
}
const symbolRule = compositeTransformation((s2, superJson)=>{
    if (isSymbol(s2)) {
        const isRegistered = !!superJson.symbolRegistry.getIdentifier(s2);
        return isRegistered;
    }
    return false;
}, (s2, superJson)=>{
    const identifier = superJson.symbolRegistry.getIdentifier(s2);
    return [
        "symbol",
        identifier
    ];
}, (v2)=>v2.description, (_2, a2, superJson)=>{
    const value = superJson.symbolRegistry.getValue(a2[1]);
    if (!value) {
        throw new Error("Trying to deserialize unknown symbol");
    }
    return value;
});
const constructorToName = [
    Int8Array,
    Uint8Array,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array,
    Uint8ClampedArray
].reduce((obj, ctor)=>{
    obj[ctor.name] = ctor;
    return obj;
}, {});
const typedArrayRule = compositeTransformation(isTypedArray, (v2)=>[
        "typed-array",
        v2.constructor.name
    ], (v2)=>[
        ...v2
    ], (v2, a2)=>{
    const ctor = constructorToName[a2[1]];
    if (!ctor) {
        throw new Error("Trying to deserialize unknown typed array");
    }
    return new ctor(v2);
});
function isInstanceOfRegisteredClass(potentialClass, superJson) {
    if (potentialClass == null ? void 0 : potentialClass.constructor) {
        const isRegistered = !!superJson.classRegistry.getIdentifier(potentialClass.constructor);
        return isRegistered;
    }
    return false;
}
const classRule = compositeTransformation(isInstanceOfRegisteredClass, (clazz, superJson)=>{
    const identifier = superJson.classRegistry.getIdentifier(clazz.constructor);
    return [
        "class",
        identifier
    ];
}, (clazz, superJson)=>{
    const allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);
    if (!allowedProps) {
        return {
            ...clazz
        };
    }
    const result = {};
    allowedProps.forEach((prop)=>{
        result[prop] = clazz[prop];
    });
    return result;
}, (v2, a2, superJson)=>{
    const clazz = superJson.classRegistry.getValue(a2[1]);
    if (!clazz) {
        throw new Error(`Trying to deserialize unknown class '${a2[1]}' - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564`);
    }
    return Object.assign(Object.create(clazz.prototype), v2);
});
const customRule = compositeTransformation((value, superJson)=>{
    return !!superJson.customTransformerRegistry.findApplicable(value);
}, (value, superJson)=>{
    const transformer = superJson.customTransformerRegistry.findApplicable(value);
    return [
        "custom",
        transformer.name
    ];
}, (value, superJson)=>{
    const transformer = superJson.customTransformerRegistry.findApplicable(value);
    return transformer.serialize(value);
}, (v2, a2, superJson)=>{
    const transformer = superJson.customTransformerRegistry.findByName(a2[1]);
    if (!transformer) {
        throw new Error("Trying to deserialize unknown custom value");
    }
    return transformer.deserialize(v2);
});
const compositeRules = [
    classRule,
    symbolRule,
    customRule,
    typedArrayRule
];
const transformValue = (value, superJson)=>{
    const applicableCompositeRule = findArr(compositeRules, (rule)=>rule.isApplicable(value, superJson));
    if (applicableCompositeRule) {
        return {
            value: applicableCompositeRule.transform(value, superJson),
            type: applicableCompositeRule.annotation(value, superJson)
        };
    }
    const applicableSimpleRule = findArr(simpleRules, (rule)=>rule.isApplicable(value, superJson));
    if (applicableSimpleRule) {
        return {
            value: applicableSimpleRule.transform(value, superJson),
            type: applicableSimpleRule.annotation
        };
    }
    return void 0;
};
const simpleRulesByAnnotation = {};
simpleRules.forEach((rule)=>{
    simpleRulesByAnnotation[rule.annotation] = rule;
});
const untransformValue = (json, type, superJson)=>{
    if (isArray$1(type)) {
        switch(type[0]){
            case "symbol":
                return symbolRule.untransform(json, type, superJson);
            case "class":
                return classRule.untransform(json, type, superJson);
            case "custom":
                return customRule.untransform(json, type, superJson);
            case "typed-array":
                return typedArrayRule.untransform(json, type, superJson);
            default:
                throw new Error("Unknown transformation: " + type);
        }
    } else {
        const transformation = simpleRulesByAnnotation[type];
        if (!transformation) {
            throw new Error("Unknown transformation: " + type);
        }
        return transformation.untransform(json, superJson);
    }
};
const getNthKey = (value, n2)=>{
    if (n2 > value.size) throw new Error("index out of bounds");
    const keys = value.keys();
    while(n2 > 0){
        keys.next();
        n2--;
    }
    return keys.next().value;
};
function validatePath(path) {
    if (includes(path, "__proto__")) {
        throw new Error("__proto__ is not allowed as a property");
    }
    if (includes(path, "prototype")) {
        throw new Error("prototype is not allowed as a property");
    }
    if (includes(path, "constructor")) {
        throw new Error("constructor is not allowed as a property");
    }
}
const getDeep = (object, path)=>{
    validatePath(path);
    for(let i2 = 0; i2 < path.length; i2++){
        const key = path[i2];
        if (isSet(object)) {
            object = getNthKey(object, +key);
        } else if (isMap(object)) {
            const row = +key;
            const type = +path[++i2] === 0 ? "key" : "value";
            const keyOfRow = getNthKey(object, row);
            switch(type){
                case "key":
                    object = keyOfRow;
                    break;
                case "value":
                    object = object.get(keyOfRow);
                    break;
            }
        } else {
            object = object[key];
        }
    }
    return object;
};
const setDeep = (object, path, mapper)=>{
    validatePath(path);
    if (path.length === 0) {
        return mapper(object);
    }
    let parent = object;
    for(let i2 = 0; i2 < path.length - 1; i2++){
        const key = path[i2];
        if (isArray$1(parent)) {
            const index = +key;
            parent = parent[index];
        } else if (isPlainObject$1(parent)) {
            parent = parent[key];
        } else if (isSet(parent)) {
            const row = +key;
            parent = getNthKey(parent, row);
        } else if (isMap(parent)) {
            const isEnd = i2 === path.length - 2;
            if (isEnd) {
                break;
            }
            const row = +key;
            const type = +path[++i2] === 0 ? "key" : "value";
            const keyOfRow = getNthKey(parent, row);
            switch(type){
                case "key":
                    parent = keyOfRow;
                    break;
                case "value":
                    parent = parent.get(keyOfRow);
                    break;
            }
        }
    }
    const lastKey = path[path.length - 1];
    if (isArray$1(parent)) {
        parent[+lastKey] = mapper(parent[+lastKey]);
    } else if (isPlainObject$1(parent)) {
        parent[lastKey] = mapper(parent[lastKey]);
    }
    if (isSet(parent)) {
        const oldValue = getNthKey(parent, +lastKey);
        const newValue = mapper(oldValue);
        if (oldValue !== newValue) {
            parent.delete(oldValue);
            parent.add(newValue);
        }
    }
    if (isMap(parent)) {
        const row = +path[path.length - 2];
        const keyToRow = getNthKey(parent, row);
        const type = +lastKey === 0 ? "key" : "value";
        switch(type){
            case "key":
                {
                    const newKey = mapper(keyToRow);
                    parent.set(newKey, parent.get(keyToRow));
                    if (newKey !== keyToRow) {
                        parent.delete(keyToRow);
                    }
                    break;
                }
            case "value":
                {
                    parent.set(keyToRow, mapper(parent.get(keyToRow)));
                    break;
                }
        }
    }
    return object;
};
function traverse(tree, walker2, origin = []) {
    if (!tree) {
        return;
    }
    if (!isArray$1(tree)) {
        forEach(tree, (subtree, key)=>traverse(subtree, walker2, [
                ...origin,
                ...parsePath(key)
            ]));
        return;
    }
    const [nodeValue, children] = tree;
    if (children) {
        forEach(children, (child, key)=>{
            traverse(child, walker2, [
                ...origin,
                ...parsePath(key)
            ]);
        });
    }
    walker2(nodeValue, origin);
}
function applyValueAnnotations(plain, annotations, superJson) {
    traverse(annotations, (type, path)=>{
        plain = setDeep(plain, path, (v2)=>untransformValue(v2, type, superJson));
    });
    return plain;
}
function applyReferentialEqualityAnnotations(plain, annotations) {
    function apply(identicalPaths, path) {
        const object = getDeep(plain, parsePath(path));
        identicalPaths.map(parsePath).forEach((identicalObjectPath)=>{
            plain = setDeep(plain, identicalObjectPath, ()=>object);
        });
    }
    if (isArray$1(annotations)) {
        const [root, other] = annotations;
        root.forEach((identicalPath)=>{
            plain = setDeep(plain, parsePath(identicalPath), ()=>plain);
        });
        if (other) {
            forEach(other, apply);
        }
    } else {
        forEach(annotations, apply);
    }
    return plain;
}
const isDeep = (object, superJson)=>isPlainObject$1(object) || isArray$1(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);
function addIdentity(object, path, identities) {
    const existingSet = identities.get(object);
    if (existingSet) {
        existingSet.push(path);
    } else {
        identities.set(object, [
            path
        ]);
    }
}
function generateReferentialEqualityAnnotations(identitites, dedupe) {
    const result = {};
    let rootEqualityPaths = void 0;
    identitites.forEach((paths)=>{
        if (paths.length <= 1) {
            return;
        }
        if (!dedupe) {
            paths = paths.map((path)=>path.map(String)).sort((a2, b2)=>a2.length - b2.length);
        }
        const [representativePath, ...identicalPaths] = paths;
        if (representativePath.length === 0) {
            rootEqualityPaths = identicalPaths.map(stringifyPath);
        } else {
            result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);
        }
    });
    if (rootEqualityPaths) {
        if (isEmptyObject(result)) {
            return [
                rootEqualityPaths
            ];
        } else {
            return [
                rootEqualityPaths,
                result
            ];
        }
    } else {
        return isEmptyObject(result) ? void 0 : result;
    }
}
const walker = (object, identities, superJson, dedupe, path = [], objectsInThisPath = [], seenObjects = /* @__PURE__ */ new Map())=>{
    const primitive = isPrimitive(object);
    if (!primitive) {
        addIdentity(object, path, identities);
        const seen = seenObjects.get(object);
        if (seen) {
            return dedupe ? {
                transformedValue: null
            } : seen;
        }
    }
    if (!isDeep(object, superJson)) {
        const transformed2 = transformValue(object, superJson);
        const result2 = transformed2 ? {
            transformedValue: transformed2.value,
            annotations: [
                transformed2.type
            ]
        } : {
            transformedValue: object
        };
        if (!primitive) {
            seenObjects.set(object, result2);
        }
        return result2;
    }
    if (includes(objectsInThisPath, object)) {
        return {
            transformedValue: null
        };
    }
    const transformationResult = transformValue(object, superJson);
    const transformed = (transformationResult == null ? void 0 : transformationResult.value) ?? object;
    const transformedValue = isArray$1(transformed) ? [] : {};
    const innerAnnotations = {};
    forEach(transformed, (value, index)=>{
        if (index === "__proto__" || index === "constructor" || index === "prototype") {
            throw new Error(`Detected property ${index}. This is a prototype pollution risk, please remove it from your object.`);
        }
        const recursiveResult = walker(value, identities, superJson, dedupe, [
            ...path,
            index
        ], [
            ...objectsInThisPath,
            object
        ], seenObjects);
        transformedValue[index] = recursiveResult.transformedValue;
        if (isArray$1(recursiveResult.annotations)) {
            innerAnnotations[index] = recursiveResult.annotations;
        } else if (isPlainObject$1(recursiveResult.annotations)) {
            forEach(recursiveResult.annotations, (tree, key)=>{
                innerAnnotations[escapeKey(index) + "." + key] = tree;
            });
        }
    });
    const result = isEmptyObject(innerAnnotations) ? {
        transformedValue,
        annotations: !!transformationResult ? [
            transformationResult.type
        ] : void 0
    } : {
        transformedValue,
        annotations: !!transformationResult ? [
            transformationResult.type,
            innerAnnotations
        ] : innerAnnotations
    };
    if (!primitive) {
        seenObjects.set(object, result);
    }
    return result;
};
function getType(payload) {
    return Object.prototype.toString.call(payload).slice(8, -1);
}
function isArray(payload) {
    return getType(payload) === "Array";
}
function isPlainObject(payload) {
    if (getType(payload) !== "Object") return false;
    const prototype = Object.getPrototypeOf(payload);
    return !!prototype && prototype.constructor === Object && prototype === Object.prototype;
}
function assignProp(carry, key, newVal, originalObject, includeNonenumerable) {
    const propType = ({}).propertyIsEnumerable.call(originalObject, key) ? "enumerable" : "nonenumerable";
    if (propType === "enumerable") carry[key] = newVal;
    if (includeNonenumerable && propType === "nonenumerable") {
        Object.defineProperty(carry, key, {
            value: newVal,
            enumerable: false,
            writable: true,
            configurable: true
        });
    }
}
function copy(target, options = {}) {
    if (isArray(target)) {
        return target.map((item)=>copy(item, options));
    }
    if (!isPlainObject(target)) {
        return target;
    }
    const props = Object.getOwnPropertyNames(target);
    const symbols = Object.getOwnPropertySymbols(target);
    return [
        ...props,
        ...symbols
    ].reduce((carry, key)=>{
        if (isArray(options.props) && !options.props.includes(key)) {
            return carry;
        }
        const val = target[key];
        const newVal = copy(val, options);
        assignProp(carry, key, newVal, target, options.nonenumerable);
        return carry;
    }, {});
}
class SuperJSON {
    /**
   * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.
   */ constructor({ dedupe = false } = {}){
        this.classRegistry = new ClassRegistry();
        this.symbolRegistry = new Registry((s2)=>s2.description ?? "");
        this.customTransformerRegistry = new CustomTransformerRegistry();
        this.allowedErrorProps = [];
        this.dedupe = dedupe;
    }
    serialize(object) {
        const identities = /* @__PURE__ */ new Map();
        const output = walker(object, identities, this, this.dedupe);
        const res = {
            json: output.transformedValue
        };
        if (output.annotations) {
            res.meta = {
                ...res.meta,
                values: output.annotations
            };
        }
        const equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);
        if (equalityAnnotations) {
            res.meta = {
                ...res.meta,
                referentialEqualities: equalityAnnotations
            };
        }
        return res;
    }
    deserialize(payload) {
        const { json, meta } = payload;
        let result = copy(json);
        if (meta == null ? void 0 : meta.values) {
            result = applyValueAnnotations(result, meta.values, this);
        }
        if (meta == null ? void 0 : meta.referentialEqualities) {
            result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);
        }
        return result;
    }
    stringify(object) {
        return JSON.stringify(this.serialize(object));
    }
    parse(string) {
        return this.deserialize(JSON.parse(string));
    }
    registerClass(v2, options) {
        this.classRegistry.register(v2, options);
    }
    registerSymbol(v2, identifier) {
        this.symbolRegistry.register(v2, identifier);
    }
    registerCustom(transformer, name) {
        this.customTransformerRegistry.register({
            name,
            ...transformer
        });
    }
    allowErrorProps(...props) {
        this.allowedErrorProps.push(...props);
    }
}
SuperJSON.defaultInstance = new SuperJSON();
SuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);
SuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);
SuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);
SuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);
SuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);
SuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);
SuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);
SuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);
SuperJSON.serialize;
SuperJSON.deserialize;
SuperJSON.stringify;
SuperJSON.parse;
SuperJSON.registerClass;
SuperJSON.registerCustom;
SuperJSON.registerSymbol;
SuperJSON.allowErrorProps;
function createJSONStorage(getStorage, options) {
    let storage;
    try {
        storage = getStorage();
    } catch (e2) {
        return;
    }
    const persistStorage = {
        getItem: (name)=>{
            var _a;
            const parse = (str2)=>{
                if (str2 === null) {
                    return null;
                }
                return JSON.parse(str2, void 0);
            };
            const str = (_a = storage.getItem(name)) != null ? _a : null;
            if (str instanceof Promise) {
                return str.then(parse);
            }
            return parse(str);
        },
        setItem: (name, newValue)=>storage.setItem(name, JSON.stringify(newValue, void 0)),
        removeItem: (name)=>storage.removeItem(name)
    };
    return persistStorage;
}
const toThenable = (fn)=>(input)=>{
        try {
            const result = fn(input);
            if (result instanceof Promise) {
                return result;
            }
            return {
                then (onFulfilled) {
                    return toThenable(onFulfilled)(result);
                },
                catch (_onRejected) {
                    return this;
                }
            };
        } catch (e2) {
            return {
                then (_onFulfilled) {
                    return this;
                },
                catch (onRejected) {
                    return toThenable(onRejected)(e2);
                }
            };
        }
    };
const persistImpl = (config, baseOptions)=>(set, get, api)=>{
        let options = {
            storage: createJSONStorage(()=>localStorage),
            partialize: (state)=>state,
            version: 0,
            merge: (persistedState, currentState)=>({
                    ...currentState,
                    ...persistedState
                }),
            ...baseOptions
        };
        let hasHydrated = false;
        const hydrationListeners = /* @__PURE__ */ new Set();
        const finishHydrationListeners = /* @__PURE__ */ new Set();
        let storage = options.storage;
        if (!storage) {
            return config((...args)=>{
                console.warn(`[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`);
                set(...args);
            }, get, api);
        }
        const setItem = ()=>{
            const state = options.partialize({
                ...get()
            });
            return storage.setItem(options.name, {
                state,
                version: options.version
            });
        };
        const savedSetState = api.setState;
        api.setState = (state, replace)=>{
            savedSetState(state, replace);
            void setItem();
        };
        const configResult = config((...args)=>{
            set(...args);
            void setItem();
        }, get, api);
        api.getInitialState = ()=>configResult;
        let stateFromStorage;
        const hydrate = ()=>{
            var _a, _b;
            if (!storage) return;
            hasHydrated = false;
            hydrationListeners.forEach((cb)=>{
                var _a2;
                return cb((_a2 = get()) != null ? _a2 : configResult);
            });
            const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;
            return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue)=>{
                if (deserializedStorageValue) {
                    if (typeof deserializedStorageValue.version === "number" && deserializedStorageValue.version !== options.version) {
                        if (options.migrate) {
                            const migration = options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);
                            if (migration instanceof Promise) {
                                return migration.then((result)=>[
                                        true,
                                        result
                                    ]);
                            }
                            return [
                                true,
                                migration
                            ];
                        }
                        console.error(`State loaded from storage couldn't be migrated since no migrate function was provided`);
                    } else {
                        return [
                            false,
                            deserializedStorageValue.state
                        ];
                    }
                }
                return [
                    false,
                    void 0
                ];
            }).then((migrationResult)=>{
                var _a2;
                const [migrated, migratedState] = migrationResult;
                stateFromStorage = options.merge(migratedState, (_a2 = get()) != null ? _a2 : configResult);
                set(stateFromStorage, true);
                if (migrated) {
                    return setItem();
                }
            }).then(()=>{
                postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);
                stateFromStorage = get();
                hasHydrated = true;
                finishHydrationListeners.forEach((cb)=>cb(stateFromStorage));
            }).catch((e2)=>{
                postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e2);
            });
        };
        api.persist = {
            setOptions: (newOptions)=>{
                options = {
                    ...options,
                    ...newOptions
                };
                if (newOptions.storage) {
                    storage = newOptions.storage;
                }
            },
            clearStorage: ()=>{
                storage == null ? void 0 : storage.removeItem(options.name);
            },
            getOptions: ()=>options,
            rehydrate: ()=>hydrate(),
            hasHydrated: ()=>hasHydrated,
            onHydrate: (cb)=>{
                hydrationListeners.add(cb);
                return ()=>{
                    hydrationListeners.delete(cb);
                };
            },
            onFinishHydration: (cb)=>{
                finishHydrationListeners.add(cb);
                return ()=>{
                    finishHydrationListeners.delete(cb);
                };
            }
        };
        if (!options.skipHydration) {
            hydrate();
        }
        return stateFromStorage || configResult;
    };
const persist = persistImpl;
const createAppStore = (s2)=>{
    const set = s2;
    return {
        appBlockRequestList: [],
        appUnblockRequestList: [],
        lastBlockRequestNumber: 0,
        lastUnblockRequestNumber: 0,
        isMainAppBlocked: false,
        requestMainAppBlock: ()=>{
            let newHandleValue = 0;
            set((state)=>{
                newHandleValue = state.lastBlockRequestNumber + 1;
                return {
                    appBlockRequestList: [
                        ...state.appBlockRequestList,
                        newHandleValue
                    ],
                    lastBlockRequestNumber: newHandleValue,
                    isMainAppBlocked: state.appUnblockRequestList.length === 0
                };
            });
            return newHandleValue;
        },
        requestMainAppUnblock: ()=>{
            let newHandleValue = 0;
            set((state)=>{
                newHandleValue = state.lastUnblockRequestNumber + 1;
                return {
                    appUnblockRequestList: [
                        ...state.appUnblockRequestList,
                        newHandleValue
                    ],
                    lastUnblockRequestNumber: newHandleValue,
                    isMainAppBlocked: false
                };
            });
            return newHandleValue;
        },
        discardMainAppBlock: (handle)=>{
            set((state)=>{
                const newBlockRequestList = state.appBlockRequestList.filter((h2)=>h2 !== handle);
                return {
                    appBlockRequestList: newBlockRequestList,
                    isMainAppBlocked: newBlockRequestList.length > 0 && state.appUnblockRequestList.length === 0
                };
            });
        },
        discardMainAppUnblock: (handle)=>{
            set((state)=>{
                const newUnblockRequestList = state.appUnblockRequestList.filter((h2)=>h2 !== handle);
                return {
                    appUnblockRequestList: newUnblockRequestList,
                    isMainAppBlocked: state.appBlockRequestList.length > 0 && newUnblockRequestList.length === 0
                };
            });
        },
        toolbarBoxRef: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])(),
        setToolbarBoxRef: (ref)=>set(()=>({
                    toolbarBoxRef: ref
                })),
        unsetToolbarBoxRef: ()=>set(()=>({
                    toolbarBoxRef: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])()
                })),
        minimized: false,
        minimize: ()=>set(()=>({
                    minimized: true
                })),
        expand: ()=>set(()=>({
                    minimized: false
                })),
        promotedOnStartup: false,
        promotionFinished: ()=>set(()=>({
                    promotedOnStartup: true
                }))
    };
};
function createSuperJSONStorage(storage) {
    return {
        getItem: (name)=>{
            const str = storage.getItem(name);
            if (!str) return null;
            return SuperJSON.parse(str);
        },
        setItem: (name, value)=>{
            storage.setItem(name, SuperJSON.stringify(value));
        },
        removeItem: (name)=>storage.removeItem(name)
    };
}
const useAppState = create(persist(createAppStore, {
    name: "stgws:companion",
    storage: createSuperJSONStorage(sessionStorage),
    partialize: (state)=>{
        return {
            minimized: state.minimized
        };
    }
}));
const ChatContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])({
    chats: [],
    currentChatId: null,
    createChat: ()=>"",
    deleteChat: ()=>{},
    setCurrentChat: ()=>{},
    setChatInput: ()=>{},
    addChatDomContext: ()=>{},
    removeChatDomContext: ()=>{},
    addMessage: ()=>{},
    chatAreaState: "hidden",
    setChatAreaState: ()=>{},
    isPromptCreationActive: false,
    startPromptCreation: ()=>{},
    stopPromptCreation: ()=>{},
    promptState: "idle",
    resetPromptState: ()=>{}
});
const ChatStateProvider = ({ children })=>{
    const [chats, setChats] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])([
        {
            id: "new_chat",
            messages: [],
            title: "New chat",
            inputValue: "",
            domContextElements: []
        }
    ]);
    const [currentChatId, setCurrentChatId] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])("new_chat");
    const [chatAreaState, internalSetChatAreaState] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])("hidden");
    const [isPromptCreationMode, setIsPromptCreationMode] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(false);
    const [promptState, setPromptState] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])("idle");
    const resetPromptState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        setPromptState("idle");
    }, []);
    const isMinimized = useAppState({
        "ChatStateProvider.useAppState[isMinimized]": (state)=>state.minimized
    }["ChatStateProvider.useAppState[isMinimized]"]);
    const { selectedSession } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (isMinimized) {
            setIsPromptCreationMode(false);
            internalSetChatAreaState("hidden");
        }
    }, [
        isMinimized
    ]);
    const { bridge } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])();
    const createChat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        const newChatId = crypto.randomUUID();
        const newChat = {
            id: newChatId,
            title: null,
            messages: [],
            inputValue: "",
            domContextElements: []
        };
        setChats((prev)=>[
                ...prev,
                newChat
            ]);
        setCurrentChatId(newChatId);
        return newChatId;
    }, []);
    const deleteChat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((chatId)=>{
        setChats((prev)=>{
            const filteredChats = prev.filter((chat)=>chat.id !== chatId);
            if (filteredChats.length === 0) {
                return [
                    {
                        id: "new_chat",
                        messages: [],
                        title: "New chat",
                        inputValue: "",
                        domContextElements: []
                    }
                ];
            }
            return filteredChats;
        });
        if (currentChatId === chatId) {
            setChats((prev)=>{
                setCurrentChatId(prev[0].id);
                return prev;
            });
        }
    }, [
        currentChatId
    ]);
    const setCurrentChat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((chatId)=>{
        setCurrentChatId(chatId);
    }, []);
    const setChatInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((chatId, value2)=>{
        setChats((prev)=>prev.map((chat)=>chat.id === chatId ? {
                    ...chat,
                    inputValue: value2
                } : chat));
    }, []);
    const { plugins } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])();
    const startPromptCreation = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        setIsPromptCreationMode(true);
        if (chatAreaState === "hidden") {
            internalSetChatAreaState("compact");
        }
        plugins.forEach((plugin)=>{
            var _a;
            (_a = plugin.onPromptingStart) == null ? void 0 : _a.call(plugin);
        });
    }, [
        chatAreaState
    ]);
    const stopPromptCreation = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        setIsPromptCreationMode(false);
        setPromptState("idle");
        setChats((prev)=>prev.map((chat)=>chat.id === currentChatId ? {
                    ...chat,
                    domContextElements: []
                } : chat));
        if (chatAreaState === "compact") {
            internalSetChatAreaState("hidden");
        }
        plugins.forEach((plugin)=>{
            var _a;
            (_a = plugin.onPromptingAbort) == null ? void 0 : _a.call(plugin);
        });
    }, [
        currentChatId,
        chatAreaState
    ]);
    const setChatAreaState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((state)=>{
        internalSetChatAreaState(state);
        if (state === "hidden") {
            stopPromptCreation();
        }
    }, [
        internalSetChatAreaState,
        stopPromptCreation
    ]);
    const addChatDomContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((chatId, element)=>{
        const pluginsWithContextGetters = plugins.filter((plugin)=>plugin.onContextElementSelect);
        setChats((prev)=>prev.map((chat)=>{
                return chat.id === chatId ? {
                    ...chat,
                    domContextElements: [
                        ...chat.domContextElements,
                        {
                            element,
                            pluginContext: pluginsWithContextGetters.map((plugin)=>{
                                var _a;
                                return {
                                    pluginName: plugin.pluginName,
                                    context: (_a = plugin.onContextElementSelect) == null ? void 0 : _a.call(plugin, element)
                                };
                            })
                        }
                    ]
                } : chat;
            }));
    }, [
        plugins
    ]);
    const removeChatDomContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((chatId, element)=>{
        setChats((prev)=>prev.map((chat)=>chat.id === chatId ? {
                    ...chat,
                    domContextElements: chat.domContextElements.filter((e2)=>e2.element !== element)
                } : chat));
    }, []);
    const addMessage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(async (chatId, content, pluginTriggered = false)=>{
        if (!content.trim()) return;
        if (promptState === "loading") return;
        const chat = chats.find((chat2)=>chat2.id === chatId);
        setPromptState("loading");
        const pluginContextSnippets = [];
        const pluginProcessingPromises = plugins.map(async (plugin)=>{
            var _a;
            const userMessagePayload = {
                id: crypto.randomUUID(),
                text: content,
                contextElements: (chat == null ? void 0 : chat.domContextElements.map((el)=>el.element)) || [],
                sentByPlugin: pluginTriggered
            };
            const handlerResult = await ((_a = plugin.onPromptSend) == null ? void 0 : _a.call(plugin, userMessagePayload));
            if (!handlerResult || !handlerResult.contextSnippets || handlerResult.contextSnippets.length === 0) {
                return null;
            }
            const snippetPromises = handlerResult.contextSnippets.map(async (snippet)=>{
                const resolvedContent = typeof snippet.content === "string" ? snippet.content : await snippet.content();
                return {
                    promptContextName: snippet.promptContextName,
                    content: resolvedContent
                };
            });
            const resolvedSnippets = await Promise.all(snippetPromises);
            if (resolvedSnippets.length > 0) {
                const pluginSnippets = {
                    pluginName: plugin.pluginName,
                    contextSnippets: resolvedSnippets
                };
                return pluginSnippets;
            }
            return null;
        });
        const allPluginContexts = await Promise.all(pluginProcessingPromises);
        allPluginContexts.forEach((pluginCtx)=>{
            if (pluginCtx) {
                pluginContextSnippets.push(pluginCtx);
            }
        });
        const prompt = createPrompt(chat == null ? void 0 : chat.domContextElements.map((e2)=>e2.element), content, window.location.href, pluginContextSnippets);
        const newMessage = {
            id: crypto.randomUUID(),
            content: content.trim(),
            sender: "user",
            type: "regular",
            timestamp: /* @__PURE__ */ new Date()
        };
        async function triggerAgentPrompt() {
            if (bridge) {
                try {
                    const result = await bridge.call.triggerAgentPrompt({
                        prompt,
                        sessionId: selectedSession == null ? void 0 : selectedSession.sessionId
                    }, {
                        onUpdate: (update)=>{}
                    });
                    if (result.result.success) {
                        setTimeout(()=>{
                            setPromptState("success");
                        }, 1e3);
                        setChats((prev)=>prev.map((chat2)=>chat2.id === chatId ? {
                                    ...chat2,
                                    inputValue: ""
                                } : chat2));
                    } else {
                        setPromptState("error");
                        setTimeout(()=>{
                            setPromptState("idle");
                            setIsPromptCreationMode(false);
                            setChats((prev)=>prev.map((chat2)=>chat2.id === chatId ? {
                                        ...chat2,
                                        inputValue: ""
                                    } : chat2));
                        }, 1e3);
                    }
                } catch (error) {
                    setPromptState("error");
                    setTimeout(()=>{
                        setPromptState("idle");
                        setIsPromptCreationMode(false);
                        setChats((prev)=>prev.map((chat2)=>chat2.id === chatId ? {
                                    ...chat2,
                                    inputValue: ""
                                } : chat2));
                    }, 1e3);
                }
            } else {
                setPromptState("error");
                setTimeout(()=>{
                    setPromptState("idle");
                    setIsPromptCreationMode(false);
                    setChats((prev)=>prev.map((chat2)=>chat2.id === chatId ? {
                                ...chat2,
                                inputValue: ""
                            } : chat2));
                }, 1e3);
            }
        }
        triggerAgentPrompt();
        if (chatAreaState === "hidden") {
            internalSetChatAreaState("compact");
        }
        setChats((prev)=>prev.map((chat2)=>chat2.id === chatId ? {
                    ...chat2,
                    messages: [
                        ...chat2.messages,
                        newMessage
                    ],
                    inputValue: content.trim(),
                    // Keep the original prompt instead of clearing
                    domContextElements: []
                } : chat2));
    }, [
        chatAreaState,
        bridge,
        chats,
        setIsPromptCreationMode,
        internalSetChatAreaState,
        selectedSession,
        promptState,
        setPromptState,
        plugins
    ]);
    const value = {
        chats,
        currentChatId,
        createChat,
        deleteChat,
        setCurrentChat,
        setChatInput,
        addMessage,
        chatAreaState,
        setChatAreaState,
        isPromptCreationActive: isPromptCreationMode,
        startPromptCreation,
        stopPromptCreation,
        addChatDomContext,
        removeChatDomContext,
        promptState,
        resetPromptState
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ChatContext.Provider, {
        value,
        children
    });
};
function useChatState() {
    const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(ChatContext);
    if (!context) {
        throw new Error("useChatState must be used within a ChatStateProvider");
    }
    return context;
}
function useCyclicUpdate(func, frameRate) {
    const animationFrameHandle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(void 0);
    const timeBetweenFrames = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>frameRate && frameRate > 0 ? 1e3 / frameRate : 0, [
        frameRate
    ]);
    const lastCallFrameTime = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(0);
    const update = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((frameTime)=>{
        if (frameTime - lastCallFrameTime.current >= timeBetweenFrames) {
            func();
            lastCallFrameTime.current = frameTime;
        }
        animationFrameHandle.current = requestAnimationFrame(update);
    }, [
        func,
        timeBetweenFrames
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (!frameRate || frameRate > 0) {
            animationFrameHandle.current = requestAnimationFrame(update);
        }
        return ()=>{
            if (animationFrameHandle.current) {
                cancelAnimationFrame(animationFrameHandle.current);
                animationFrameHandle.current = void 0;
            }
        };
    }, [
        frameRate,
        update
    ]);
}
const LocationContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(new URL(window.location.href));
function LocationProvider({ children }) {
    const [currentUrl, setCurrentUrl] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(new URL(window.location.href));
    const update = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        setCurrentUrl(new URL(window.location.href));
    }, []);
    useCyclicUpdate(update, 15);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(LocationContext.Provider, {
        value: currentUrl,
        children
    });
}
function ContextProviders({ children, config }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"], {
        config,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(LocationProvider, {
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["S"], {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["V"], {
                    children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"], {
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ChatStateProvider, {
                            children
                        })
                    })
                })
            })
        })
    });
}
function useEventListener(eventName, handler, options, element = window) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (typeof window === "undefined") return;
        if (!element) return;
        element.addEventListener(eventName, handler, options);
        return ()=>element.removeEventListener(eventName, handler, options);
    }, [
        eventName,
        handler,
        element,
        options
    ]);
}
function HotkeyListener() {
    const { startPromptCreation, stopPromptCreation, isPromptCreationActive } = useChatState();
    const hotKeyHandlerMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>({
            // Functions that return true will prevent further propagation of the event.
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"].CTRL_ALT_C]: ()=>{
                if (!isPromptCreationActive) {
                    startPromptCreation();
                    return true;
                }
                return false;
            },
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"].ESC]: ()=>{
                if (isPromptCreationActive) {
                    stopPromptCreation();
                    return true;
                }
                return false;
            }
        }), [
        startPromptCreation,
        stopPromptCreation,
        isPromptCreationActive
    ]);
    const hotKeyListener = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((ev)=>{
        for (const [action, definition] of Object.entries(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])){
            if (definition.isEventMatching(ev)) {
                const matched = hotKeyHandlerMap[action]();
                if (matched) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
                break;
            }
        }
    }, [
        hotKeyHandlerMap
    ]);
    useEventListener("keydown", hotKeyListener, {
        capture: true
    });
    return null;
}
const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].useLayoutEffect : ()=>{};
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{
        ref.current = fn;
    }, [
        fn
    ]);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((...args)=>{
        const f2 = ref.current;
        return f2 === null || f2 === void 0 ? void 0 : f2(...args);
    }, []);
}
const $431fbd86ca7dc216$export$b204af158042fbac = (el)=>{
    var _el_ownerDocument;
    return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
const $431fbd86ca7dc216$export$f21a1ffae260145a = (el)=>{
    if (el && "window" in el && el.window === el) return el;
    const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
    return doc.defaultView || window;
};
function $431fbd86ca7dc216$var$isNode(value) {
    return value !== null && typeof value === "object" && "nodeType" in value && typeof value.nodeType === "number";
}
function $431fbd86ca7dc216$export$af51f0f06c0f328a(node) {
    return $431fbd86ca7dc216$var$isNode(node) && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && "host" in node;
}
let $f4e2df6bd15f8569$var$_shadowDOM = false;
function $f4e2df6bd15f8569$export$98658e8c59125e6a() {
    return $f4e2df6bd15f8569$var$_shadowDOM;
}
function $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {
    if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return otherNode && node ? node.contains(otherNode) : false;
    "TURBOPACK unreachable";
    let currentNode;
}
const $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document)=>{
    var _activeElement_shadowRoot;
    if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return doc.activeElement;
    "TURBOPACK unreachable";
    let activeElement;
};
function $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {
    if ($f4e2df6bd15f8569$export$98658e8c59125e6a() && event.target.shadowRoot) {
        "TURBOPACK unreachable";
    }
    return event.target;
}
function $c87311424ea30a05$var$testUserAgent(re) {
    var _window_navigator_userAgentData;
    if (typeof window === "undefined" || window.navigator == null) return false;
    return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand)=>re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
    var _window_navigator_userAgentData;
    return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    let res = null;
    return ()=>{
        if (res == null) res = fn();
        return res;
    };
}
const $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
const $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
const $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
    $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
const $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
$c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
$c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
const $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
const $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
$c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
    let globalListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(/* @__PURE__ */ new Map());
    let addGlobalListener = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((eventTarget, type, listener, options)=>{
        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args)=>{
            globalListeners.current.delete(listener);
            listener(...args);
        } : listener;
        globalListeners.current.set(listener, {
            type,
            eventTarget,
            fn,
            options
        });
        eventTarget.addEventListener(type, fn, options);
    }, []);
    let removeGlobalListener = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((eventTarget, type, listener, options)=>{
        var _globalListeners_current_get;
        let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
        eventTarget.removeEventListener(type, fn, options);
        globalListeners.current.delete(listener);
    }, []);
    let removeAllGlobalListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        globalListeners.current.forEach((value, key)=>{
            removeGlobalListener(value.eventTarget, value.type, key, value.options);
        });
    }, [
        removeGlobalListener
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        return removeAllGlobalListeners;
    }, [
        removeAllGlobalListeners
    ]);
    return {
        addGlobalListener,
        removeGlobalListener,
        removeAllGlobalListeners
    };
}
function $6a7db85432448f7f$export$60278871457622de(event) {
    if (event.mozInputSource === 0 && event.isTrusted) return true;
    if ($c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType) return event.type === "click" && event.buttons === 1;
    return event.detail === 0 && !event.pointerType;
}
function $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {
    let event = nativeEvent;
    event.nativeEvent = nativeEvent;
    event.isDefaultPrevented = ()=>event.defaultPrevented;
    event.isPropagationStopped = ()=>event.cancelBubble;
    event.persist = ()=>{};
    return event;
}
function $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {
    Object.defineProperty(event, "target", {
        value: target
    });
    Object.defineProperty(event, "currentTarget", {
        value: target
    });
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
    let stateRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])({
        isFocused: false,
        observer: null
    });
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{
        const state = stateRef.current;
        return ()=>{
            if (state.observer) {
                state.observer.disconnect();
                state.observer = null;
            }
        };
    }, []);
    let dispatchBlur = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e2)=>{
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e2);
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (e2.target instanceof HTMLButtonElement || e2.target instanceof HTMLInputElement || e2.target instanceof HTMLTextAreaElement || e2.target instanceof HTMLSelectElement) {
            stateRef.current.isFocused = true;
            let target = e2.target;
            let onBlurHandler = (e3)=>{
                stateRef.current.isFocused = false;
                if (target.disabled) {
                    let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e3);
                    dispatchBlur(event);
                }
                if (stateRef.current.observer) {
                    stateRef.current.observer.disconnect();
                    stateRef.current.observer = null;
                }
            };
            target.addEventListener("focusout", onBlurHandler, {
                once: true
            });
            stateRef.current.observer = new MutationObserver(()=>{
                if (stateRef.current.isFocused && target.disabled) {
                    var _stateRef_current_observer;
                    (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
                    let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
                    target.dispatchEvent(new FocusEvent("blur", {
                        relatedTarget: relatedTargetEl
                    }));
                    target.dispatchEvent(new FocusEvent("focusout", {
                        bubbles: true,
                        relatedTarget: relatedTargetEl
                    }));
                }
            });
            stateRef.current.observer.observe(target, {
                attributes: true,
                attributeFilter: [
                    "disabled"
                ]
            });
        }
    }, [
        dispatchBlur
    ]);
}
let $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
let $507fabe10e71c6fb$var$currentModality = null;
let $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
let $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e2) {
    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e2);
}
function $507fabe10e71c6fb$var$isValidKey(e2) {
    return !(e2.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e2.altKey || e2.ctrlKey || e2.key === "Control" || e2.key === "Shift" || e2.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e2) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    if ($507fabe10e71c6fb$var$isValidKey(e2)) {
        $507fabe10e71c6fb$var$currentModality = "keyboard";
        $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e2);
    }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e2) {
    $507fabe10e71c6fb$var$currentModality = "pointer";
    if (e2.type === "mousedown" || e2.type === "pointerdown") {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e2);
    }
}
function $507fabe10e71c6fb$var$handleClickEvent(e2) {
    if ($6a7db85432448f7f$export$60278871457622de(e2)) {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        $507fabe10e71c6fb$var$currentModality = "virtual";
    }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e2) {
    if (e2.target === window || e2.target === document || $8a9cb279dc87e130$export$fda7da73ab5d4c48 || !e2.isTrusted) return;
    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
        $507fabe10e71c6fb$var$currentModality = "virtual";
        $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e2);
    }
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
    if (typeof window === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get($431fbd86ca7dc216$export$f21a1ffae260145a(element))) return;
    const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);
    const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
    let focus = windowObject.HTMLElement.prototype.focus;
    windowObject.HTMLElement.prototype.focus = function() {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        focus.apply(this, arguments);
    };
    documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
    windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
    windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== "undefined") {
        documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    windowObject.addEventListener("beforeunload", ()=>{
        $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
    }, {
        once: true
    });
    $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
        focus
    });
}
const $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener)=>{
    const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);
    const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
    if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
    if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
    windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
    documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
    windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
    windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== "undefined") {
        documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
    const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
    let loadListener;
    if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
    else {
        loadListener = ()=>{
            $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
        };
        documentObject.addEventListener("DOMContentLoaded", loadListener);
    }
    return ()=>$507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
}
if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
    return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
const $507fabe10e71c6fb$var$nonTextInputTypes = /* @__PURE__ */ new Set([
    "checkbox",
    "radio",
    "range",
    "color",
    "file",
    "image",
    "button",
    "submit",
    "reset"
]);
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e2) {
    let document1 = $431fbd86ca7dc216$export$b204af158042fbac(e2 === null || e2 === void 0 ? void 0 : e2.target);
    const IHTMLInputElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLInputElement : HTMLInputElement;
    const IHTMLTextAreaElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLTextAreaElement : HTMLTextAreaElement;
    const IHTMLElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLElement : HTMLElement;
    const IKeyboardEvent = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).KeyboardEvent : KeyboardEvent;
    isTextInput = isTextInput || document1.activeElement instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(document1.activeElement.type) || document1.activeElement instanceof IHTMLTextAreaElement || document1.activeElement instanceof IHTMLElement && document1.activeElement.isContentEditable;
    return !(isTextInput && modality === "keyboard" && e2 instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e2.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        let handler = (modality, e2)=>{
            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality, e2)) return;
            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
        };
        $507fabe10e71c6fb$var$changeHandlers.add(handler);
        return ()=>{
            $507fabe10e71c6fb$var$changeHandlers.delete(handler);
        };
    }, deps);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
    let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
    const onBlur = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (e2.target === e2.currentTarget) {
            if (onBlurProp) onBlurProp(e2);
            if (onFocusChange) onFocusChange(false);
            return true;
        }
    }, [
        onBlurProp,
        onFocusChange
    ]);
    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    const onFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target);
        const activeElement = ownerDocument ? $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument) : $d4ee10de306f2510$export$cd4e5573fbe2b576();
        if (e2.target === e2.currentTarget && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent)) {
            if (onFocusProp) onFocusProp(e2);
            if (onFocusChange) onFocusChange(true);
            onSyntheticFocus(e2);
        }
    }, [
        onFocusChange,
        onFocusProp,
        onSyntheticFocus
    ]);
    return {
        focusProps: {
            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
        }
    };
}
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
    let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
    let state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])({
        isFocusWithin: false
    });
    let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let onBlur = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (!e2.currentTarget.contains(e2.target)) return;
        if (state.current.isFocusWithin && !e2.currentTarget.contains(e2.relatedTarget)) {
            state.current.isFocusWithin = false;
            removeAllGlobalListeners();
            if (onBlurWithin) onBlurWithin(e2);
            if (onFocusWithinChange) onFocusWithinChange(false);
        }
    }, [
        onBlurWithin,
        onFocusWithinChange,
        state,
        removeAllGlobalListeners
    ]);
    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    let onFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (!e2.currentTarget.contains(e2.target)) return;
        const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target);
        const activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
        if (!state.current.isFocusWithin && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent)) {
            if (onFocusWithin) onFocusWithin(e2);
            if (onFocusWithinChange) onFocusWithinChange(true);
            state.current.isFocusWithin = true;
            onSyntheticFocus(e2);
            let currentTarget = e2.currentTarget;
            addGlobalListener(ownerDocument, "focus", (e3)=>{
                if (state.current.isFocusWithin && !$d4ee10de306f2510$export$4282f70798064fe0(currentTarget, e3.target)) {
                    let nativeEvent = new ownerDocument.defaultView.FocusEvent("blur", {
                        relatedTarget: e3.target
                    });
                    $8a9cb279dc87e130$export$c2b7abe5d61ec696(nativeEvent, currentTarget);
                    let event = $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent);
                    onBlur(event);
                }
            }, {
                capture: true
            });
        }
    }, [
        onFocusWithin,
        onFocusWithinChange,
        onSyntheticFocus,
        addGlobalListener,
        onBlur
    ]);
    if (isDisabled) return {
        focusWithinProps: {
            // These cannot be null, that would conflict in mergeProps
            onFocus: void 0,
            onBlur: void 0
        }
    };
    return {
        focusWithinProps: {
            onFocus,
            onBlur
        }
    };
}
let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
    setTimeout(()=>{
        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
    }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e2) {
    if (e2.pointerType === "touch") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
    if (typeof document === "undefined") return;
    if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
    else if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    $6179b936705e76d3$var$hoverCount++;
    return ()=>{
        $6179b936705e76d3$var$hoverCount--;
        if ($6179b936705e76d3$var$hoverCount > 0) return;
        if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
        else if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
    };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
    let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
    let [isHovered, setHovered] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(false);
    let state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])({
        isHovered: false,
        ignoreEmulatedMouseEvents: false,
        pointerType: "",
        target: null
    }).current;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])($6179b936705e76d3$var$setupGlobalTouchEvents, []);
    let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let { hoverProps, triggerHoverEnd } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>{
        let triggerHoverStart = (event, pointerType)=>{
            state.pointerType = pointerType;
            if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
            state.isHovered = true;
            let target = event.currentTarget;
            state.target = target;
            addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(event.target), "pointerover", (e2)=>{
                if (state.isHovered && state.target && !$d4ee10de306f2510$export$4282f70798064fe0(state.target, e2.target)) triggerHoverEnd2(e2, e2.pointerType);
            }, {
                capture: true
            });
            if (onHoverStart) onHoverStart({
                type: "hoverstart",
                target,
                pointerType
            });
            if (onHoverChange) onHoverChange(true);
            setHovered(true);
        };
        let triggerHoverEnd2 = (event, pointerType)=>{
            let target = state.target;
            state.pointerType = "";
            state.target = null;
            if (pointerType === "touch" || !state.isHovered || !target) return;
            state.isHovered = false;
            removeAllGlobalListeners();
            if (onHoverEnd) onHoverEnd({
                type: "hoverend",
                target,
                pointerType
            });
            if (onHoverChange) onHoverChange(false);
            setHovered(false);
        };
        let hoverProps2 = {};
        if (typeof PointerEvent !== "undefined") {
            hoverProps2.onPointerEnter = (e2)=>{
                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e2.pointerType === "mouse") return;
                triggerHoverStart(e2, e2.pointerType);
            };
            hoverProps2.onPointerLeave = (e2)=>{
                if (!isDisabled && e2.currentTarget.contains(e2.target)) triggerHoverEnd2(e2, e2.pointerType);
            };
        } else if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        return {
            hoverProps: hoverProps2,
            triggerHoverEnd: triggerHoverEnd2
        };
    }, [
        onHoverStart,
        onHoverChange,
        onHoverEnd,
        isDisabled,
        state,
        addGlobalListener,
        removeAllGlobalListeners
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (isDisabled) triggerHoverEnd({
            currentTarget: state.target
        }, state.pointerType);
    }, [
        isDisabled
    ]);
    return {
        hoverProps,
        isHovered
    };
}
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
    let { autoFocus = false, isTextInput, within } = props;
    let state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])({
        isFocused: false,
        isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
    });
    let [isFocused, setFocused] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(false);
    let [isFocusVisibleState, setFocusVisible] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(()=>state.current.isFocused && state.current.isFocusVisible);
    let updateState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
    let onFocusChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((isFocused2)=>{
        state.current.isFocused = isFocused2;
        setFocused(isFocused2);
        updateState();
    }, [
        updateState
    ]);
    $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible)=>{
        state.current.isFocusVisible = isFocusVisible;
        updateState();
    }, [], {
        isTextInput
    });
    let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
        isDisabled: within,
        onFocusChange
    });
    let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
        isDisabled: !within,
        onFocusWithinChange: onFocusChange
    });
    return {
        isFocused,
        isFocusVisible: isFocusVisibleState,
        focusProps: within ? focusWithinProps : focusProps
    };
}
var i = Object.defineProperty;
var d = (t2, e2, n2)=>e2 in t2 ? i(t2, e2, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: n2
    }) : t2[e2] = n2;
var r = (t2, e2, n2)=>(d(t2, typeof e2 != "symbol" ? e2 + "" : e2, n2), n2);
let o$3 = class o {
    constructor(){
        r(this, "current", this.detect());
        r(this, "handoffState", "pending");
        r(this, "currentId", 0);
    }
    set(e2) {
        this.current !== e2 && (this.handoffState = "pending", this.currentId = 0, this.current = e2);
    }
    reset() {
        this.set(this.detect());
    }
    nextId() {
        return ++this.currentId;
    }
    get isServer() {
        return this.current === "server";
    }
    get isClient() {
        return this.current === "client";
    }
    detect() {
        return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client";
    }
    handoff() {
        this.handoffState === "pending" && (this.handoffState = "complete");
    }
    get isHandoffComplete() {
        return this.handoffState === "complete";
    }
};
let s$1 = new o$3();
function o$2(n2) {
    var e2, r2;
    return s$1.isServer ? null : n2 ? "ownerDocument" in n2 ? n2.ownerDocument : "current" in n2 ? (r2 = (e2 = n2.current) == null ? void 0 : e2.ownerDocument) != null ? r2 : document : null : document;
}
function t$1(e2) {
    typeof queueMicrotask == "function" ? queueMicrotask(e2) : Promise.resolve().then(e2).catch((o3)=>setTimeout(()=>{
            throw o3;
        }));
}
function o$1() {
    let n2 = [], r2 = {
        addEventListener (e2, t2, s2, a2) {
            return e2.addEventListener(t2, s2, a2), r2.add(()=>e2.removeEventListener(t2, s2, a2));
        },
        requestAnimationFrame (...e2) {
            let t2 = requestAnimationFrame(...e2);
            return r2.add(()=>cancelAnimationFrame(t2));
        },
        nextFrame (...e2) {
            return r2.requestAnimationFrame(()=>r2.requestAnimationFrame(...e2));
        },
        setTimeout (...e2) {
            let t2 = setTimeout(...e2);
            return r2.add(()=>clearTimeout(t2));
        },
        microTask (...e2) {
            let t2 = {
                current: true
            };
            return t$1(()=>{
                t2.current && e2[0]();
            }), r2.add(()=>{
                t2.current = false;
            });
        },
        style (e2, t2, s2) {
            let a2 = e2.style.getPropertyValue(t2);
            return Object.assign(e2.style, {
                [t2]: s2
            }), this.add(()=>{
                Object.assign(e2.style, {
                    [t2]: a2
                });
            });
        },
        group (e2) {
            let t2 = o$1();
            return e2(t2), this.add(()=>t2.dispose());
        },
        add (e2) {
            return n2.includes(e2) || n2.push(e2), ()=>{
                let t2 = n2.indexOf(e2);
                if (t2 >= 0) for (let s2 of n2.splice(t2, 1))s2();
            };
        },
        dispose () {
            for (let e2 of n2.splice(0))e2();
        }
    };
    return r2;
}
function p() {
    let [e2] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(o$1);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>()=>e2.dispose(), [
        e2
    ]), e2;
}
let n = (e2, t2)=>{
    s$1.isServer ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(e2, t2) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(e2, t2);
};
function s(e2) {
    let r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(e2);
    return n(()=>{
        r2.current = e2;
    }, [
        e2
    ]), r2;
}
let o2 = function(t2) {
    let e2 = s(t2);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].useCallback({
        "o2.useCallback": (...r2)=>e2.current(...r2)
    }["o2.useCallback"], [
        e2
    ]);
};
function E(e2) {
    let t2 = e2.width / 2, n2 = e2.height / 2;
    return {
        top: e2.clientY - n2,
        right: e2.clientX + t2,
        bottom: e2.clientY + n2,
        left: e2.clientX - t2
    };
}
function P$2(e2, t2) {
    return !(!e2 || !t2 || e2.right < t2.left || e2.left > t2.right || e2.bottom < t2.top || e2.top > t2.bottom);
}
function w({ disabled: e2 = false } = {}) {
    let t2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null), [n2, l] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(false), r2 = p(), o$12 = o2(()=>{
        t2.current = null, l(false), r2.dispose();
    }), f2 = o2((s2)=>{
        if (r2.dispose(), t2.current === null) {
            t2.current = s2.currentTarget, l(true);
            {
                let i2 = o$2(s2.currentTarget);
                r2.addEventListener(i2, "pointerup", o$12, false), r2.addEventListener(i2, "pointermove", (c2)=>{
                    if (t2.current) {
                        let p2 = E(c2);
                        l(P$2(p2, t2.current.getBoundingClientRect()));
                    }
                }, false), r2.addEventListener(i2, "pointercancel", o$12, false);
            }
        }
    });
    return {
        pressed: n2,
        pressProps: e2 ? {} : {
            onPointerDown: f2,
            onPointerUp: o$12,
            onClick: o$12
        }
    };
}
let e$1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(void 0);
function a$1() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(e$1);
}
function t(...r2) {
    return Array.from(new Set(r2.flatMap((n2)=>typeof n2 == "string" ? n2.split(" ") : []))).filter(Boolean).join(" ");
}
function u$2(r2, n2, ...a2) {
    if (r2 in n2) {
        let e2 = n2[r2];
        return typeof e2 == "function" ? e2(...a2) : e2;
    }
    let t2 = new Error(`Tried to handle "${r2}" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e2)=>`"${e2}"`).join(", ")}.`);
    throw Error.captureStackTrace && Error.captureStackTrace(t2, u$2), t2;
}
var O = ((a2)=>(a2[a2.None = 0] = "None", a2[a2.RenderStrategy = 1] = "RenderStrategy", a2[a2.Static = 2] = "Static", a2))(O || {}), A = ((e2)=>(e2[e2.Unmount = 0] = "Unmount", e2[e2.Hidden = 1] = "Hidden", e2))(A || {});
function L$1() {
    let n2 = U$2();
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((r2)=>C$1({
            mergeRefs: n2,
            ...r2
        }), [
        n2
    ]);
}
function C$1({ ourProps: n2, theirProps: r2, slot: e2, defaultTag: a2, features: s2, visible: t2 = true, name: l, mergeRefs: i2 }) {
    i2 = i2 != null ? i2 : $;
    let o3 = P$1(r2, n2);
    if (t2) return F(o3, e2, a2, l, i2);
    let y2 = s2 != null ? s2 : 0;
    if (y2 & 2) {
        let { static: f2 = false, ...u2 } = o3;
        if (f2) return F(u2, e2, a2, l, i2);
    }
    if (y2 & 1) {
        let { unmount: f2 = true, ...u2 } = o3;
        return u$2(f2 ? 0 : 1, {
            [0] () {
                return null;
            },
            [1] () {
                return F({
                    ...u2,
                    hidden: true,
                    style: {
                        display: "none"
                    }
                }, e2, a2, l, i2);
            }
        });
    }
    return F(o3, e2, a2, l, i2);
}
function F(n2, r2 = {}, e2, a2, s2) {
    let { as: t$12 = e2, children: l, refName: i2 = "ref", ...o3 } = h(n2, [
        "unmount",
        "static"
    ]), y2 = n2.ref !== void 0 ? {
        [i2]: n2.ref
    } : {}, f2 = typeof l == "function" ? l(r2) : l;
    "className" in o3 && o3.className && typeof o3.className == "function" && (o3.className = o3.className(r2)), o3["aria-labelledby"] && o3["aria-labelledby"] === o3.id && (o3["aria-labelledby"] = void 0);
    let u2 = {};
    if (r2) {
        let d2 = false, p2 = [];
        for (let [c2, T2] of Object.entries(r2))typeof T2 == "boolean" && (d2 = true), T2 === true && p2.push(c2.replace(/([A-Z])/g, (g2)=>`-${g2.toLowerCase()}`));
        if (d2) {
            u2["data-headlessui-state"] = p2.join(" ");
            for (let c2 of p2)u2[`data-${c2}`] = "";
        }
    }
    if (t$12 === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"] && (Object.keys(m(o3)).length > 0 || Object.keys(m(u2)).length > 0)) if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["m"])(f2) || Array.isArray(f2) && f2.length > 1) {
        if (Object.keys(m(o3)).length > 0) throw new Error([
            'Passing props on "Fragment"!',
            "",
            `The current component <${a2} /> is rendering a "Fragment".`,
            "However we need to passthrough the following props:",
            Object.keys(m(o3)).concat(Object.keys(m(u2))).map((d2)=>`  - ${d2}`).join(`
`),
            "",
            "You can apply a few solutions:",
            [
                'Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".',
                "Render a single element as the child so that we can forward the props onto that element."
            ].map((d2)=>`  - ${d2}`).join(`
`)
        ].join(`
`));
    } else {
        let d2 = f2.props, p2 = d2 == null ? void 0 : d2.className, c2 = typeof p2 == "function" ? (...R2)=>t(p2(...R2), o3.className) : t(p2, o3.className), T2 = c2 ? {
            className: c2
        } : {}, g2 = P$1(f2.props, m(h(o3, [
            "ref"
        ])));
        for(let R2 in u2)R2 in g2 && delete u2[R2];
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(f2, Object.assign({}, g2, u2, y2, {
            ref: s2(H$2(f2), y2.ref)
        }, T2));
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(t$12, Object.assign({}, h(o3, [
        "ref"
    ]), t$12 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"] && y2, t$12 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"] && u2), f2);
}
function U$2() {
    let n2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])([]), r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        for (let a2 of n2.current)a2 != null && (typeof a2 == "function" ? a2(e2) : a2.current = e2);
    }, []);
    return (...e2)=>{
        if (!e2.every((a2)=>a2 == null)) return n2.current = e2, r2;
    };
}
function $(...n2) {
    return n2.every((r2)=>r2 == null) ? void 0 : (r2)=>{
        for (let e2 of n2)e2 != null && (typeof e2 == "function" ? e2(r2) : e2.current = r2);
    };
}
function P$1(...n2) {
    if (n2.length === 0) return {};
    if (n2.length === 1) return n2[0];
    let r2 = {}, e2 = {};
    for (let s2 of n2)for(let t2 in s2)t2.startsWith("on") && typeof s2[t2] == "function" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];
    if (r2.disabled || r2["aria-disabled"]) for(let s2 in e2)/^(on(?:Click|Pointer|Mouse|Key)(?:Down|Up|Press)?)$/.test(s2) && (e2[s2] = [
        (t2)=>{
            var l;
            return (l = t2 == null ? void 0 : t2.preventDefault) == null ? void 0 : l.call(t2);
        }
    ]);
    for(let s2 in e2)Object.assign(r2, {
        [s2] (t2, ...l) {
            let i2 = e2[s2];
            for (let o3 of i2){
                if ((t2 instanceof Event || (t2 == null ? void 0 : t2.nativeEvent) instanceof Event) && t2.defaultPrevented) return;
                o3(t2, ...l);
            }
        }
    });
    return r2;
}
function _$1(...n2) {
    if (n2.length === 0) return {};
    if (n2.length === 1) return n2[0];
    let r2 = {}, e2 = {};
    for (let s2 of n2)for(let t2 in s2)t2.startsWith("on") && typeof s2[t2] == "function" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];
    for(let s2 in e2)Object.assign(r2, {
        [s2] (...t2) {
            let l = e2[s2];
            for (let i2 of l)i2 == null || i2(...t2);
        }
    });
    return r2;
}
function K(n2) {
    var r2;
    return Object.assign((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])(n2), {
        displayName: (r2 = n2.displayName) != null ? r2 : n2.name
    });
}
function m(n2) {
    let r2 = Object.assign({}, n2);
    for(let e2 in r2)r2[e2] === void 0 && delete r2[e2];
    return r2;
}
function h(n2, r2 = []) {
    let e2 = Object.assign({}, n2);
    for (let a2 of r2)a2 in e2 && delete e2[a2];
    return e2;
}
function H$2(n2) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].version.split(".")[0] >= "19" ? n2.props.ref : n2.ref;
}
let R = "button";
function v(a2, u2) {
    var p2;
    let l = a$1(), { disabled: e2 = l || false, autoFocus: t2 = false, ...o3 } = a2, { isFocusVisible: r2, focusProps: i2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({
        autoFocus: t2
    }), { isHovered: s2, hoverProps: T$1 } = $6179b936705e76d3$export$ae780daf29e6d456({
        isDisabled: e2
    }), { pressed: n2, pressProps: d2 } = w({
        disabled: e2
    }), f2 = _$1({
        ref: u2,
        type: (p2 = o3.type) != null ? p2 : "button",
        disabled: e2 || void 0,
        autoFocus: t2
    }, i2, T$1, d2), m2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>({
            disabled: e2,
            hover: s2,
            focus: r2,
            active: n2,
            autofocus: t2
        }), [
        e2,
        s2,
        r2,
        n2,
        t2
    ]);
    return L$1()({
        ourProps: f2,
        theirProps: o3,
        slot: m2,
        defaultTag: R,
        name: "Button"
    });
}
let H$1 = K(v);
let e = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(void 0);
function u$1() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(e);
}
let u = Symbol();
function y(...t2) {
    let n2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(t2);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        n2.current = t2;
    }, [
        t2
    ]);
    let c2 = o2((e2)=>{
        for (let o3 of n2.current)o3 != null && (typeof o3 == "function" ? o3(e2) : o3.current = e2);
    });
    return t2.every((e2)=>e2 == null || (e2 == null ? void 0 : e2[u])) ? void 0 : c2;
}
let a = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(null);
a.displayName = "DescriptionContext";
function f() {
    let r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(a);
    if (r2 === null) {
        let e2 = new Error("You used a <Description /> component, but it is not inside a relevant parent.");
        throw Error.captureStackTrace && Error.captureStackTrace(e2, f), e2;
    }
    return r2;
}
function U$1() {
    var r2, e2;
    return (e2 = (r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(a)) == null ? void 0 : r2.value) != null ? e2 : void 0;
}
let S = "p";
function C(r2, e2) {
    let d2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(), t2 = a$1(), { id: i2 = `headlessui-description-${d2}`, ...l } = r2, n$1 = f(), s2 = y(e2);
    n(()=>n$1.register(i2), [
        i2,
        n$1.register
    ]);
    let o3 = t2 || false, p2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>({
            ...n$1.slot,
            disabled: o3
        }), [
        n$1.slot,
        o3
    ]), D2 = {
        ref: s2,
        ...n$1.props,
        id: i2
    };
    return L$1()({
        ourProps: D2,
        theirProps: l,
        slot: p2,
        defaultTag: S,
        name: n$1.name || "Description"
    });
}
let _ = K(C);
Object.assign(_, {});
let c = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(null);
c.displayName = "LabelContext";
function P() {
    let r2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(c);
    if (r2 === null) {
        let l = new Error("You used a <Label /> component, but it is not inside a relevant parent.");
        throw Error.captureStackTrace && Error.captureStackTrace(l, P), l;
    }
    return r2;
}
function I(r2) {
    var a2, e2, o3;
    let l = (e2 = (a2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(c)) == null ? void 0 : a2.value) != null ? e2 : void 0;
    return ((o3 = void 0) != null ? o3 : 0) > 0 ? [
        l,
        ...r2
    ].filter(Boolean).join(" ") : l;
}
let N = "label";
function G(r2, l) {
    var y$12;
    let a2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(), e2 = P(), o$12 = u$1(), g$1 = a$1(), { id: t2 = `headlessui-label-${a2}`, htmlFor: s2 = o$12 != null ? o$12 : (y$12 = e2.props) == null ? void 0 : y$12.htmlFor, passive: m2 = false, ...i2 } = r2, p2 = y(l);
    n(()=>e2.register(t2), [
        t2,
        e2.register
    ]);
    let u2 = o2((L2)=>{
        let b2 = L2.currentTarget;
        if (b2 instanceof HTMLLabelElement && L2.preventDefault(), e2.props && "onClick" in e2.props && typeof e2.props.onClick == "function" && e2.props.onClick(L2), b2 instanceof HTMLLabelElement) {
            let n2 = document.getElementById(b2.htmlFor);
            if (n2) {
                let E2 = n2.getAttribute("disabled");
                if (E2 === "true" || E2 === "") return;
                let x2 = n2.getAttribute("aria-disabled");
                if (x2 === "true" || x2 === "") return;
                (n2 instanceof HTMLInputElement && (n2.type === "radio" || n2.type === "checkbox") || n2.role === "radio" || n2.role === "checkbox" || n2.role === "switch") && n2.click(), n2.focus({
                    preventScroll: true
                });
            }
        }
    }), d2 = g$1 || false, C2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>({
            ...e2.slot,
            disabled: d2
        }), [
        e2.slot,
        d2
    ]), f2 = {
        ref: p2,
        ...e2.props,
        id: t2,
        htmlFor: s2,
        onClick: u2
    };
    return m2 && ("onClick" in f2 && (delete f2.htmlFor, delete f2.onClick), "onClick" in i2 && delete i2.onClick), L$1()({
        ourProps: f2,
        theirProps: i2,
        slot: C2,
        defaultTag: s2 ? N : "div",
        name: e2.name || "Label"
    });
}
let U = K(G);
Object.assign(U, {});
let L = "textarea";
function H(s2, l) {
    let i2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(), d2 = u$1(), n2 = a$1(), { id: p2 = d2 || `headlessui-textarea-${i2}`, disabled: e2 = n2 || false, autoFocus: r2 = false, invalid: a2 = false, ...T$1 } = s2, f2 = I(), m2 = U$1(), { isFocused: o3, focusProps: u2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({
        autoFocus: r2
    }), { isHovered: t2, hoverProps: b2 } = $6179b936705e76d3$export$ae780daf29e6d456({
        isDisabled: e2
    }), y2 = _$1({
        ref: l,
        id: p2,
        "aria-labelledby": f2,
        "aria-describedby": m2,
        "aria-invalid": a2 ? "true" : void 0,
        disabled: e2 || void 0,
        autoFocus: r2
    }, u2, b2), x2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>({
            disabled: e2,
            invalid: a2,
            hover: t2,
            focus: o3,
            autofocus: r2
        }), [
        e2,
        a2,
        t2,
        o3,
        r2
    ]);
    return L$1()({
        ourProps: y2,
        theirProps: T$1,
        slot: x2,
        defaultTag: L,
        name: "Textarea"
    });
}
let J = K(H);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const toCamelCase = (string)=>string.replace(/^([A-Z])|[\s-_]+(\w)/g, (match, p1, p2)=>p2 ? p2.toUpperCase() : p1.toLowerCase());
const toPascalCase = (string)=>{
    const camelCase = toCamelCase(string);
    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
};
const mergeClasses = (...classes)=>classes.filter((className, index, array)=>{
        return Boolean(className) && className.trim() !== "" && array.indexOf(className) === index;
    }).join(" ").trim();
const hasA11yProp = (props)=>{
    for(const prop in props){
        if (prop.startsWith("aria-") || prop === "role" || prop === "title") {
            return true;
        }
    }
};
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
};
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const Icon = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])(({ color = "currentColor", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = "", children, iconNode, ...rest }, ref)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])("svg", {
        ref,
        ...defaultAttributes,
        width: size,
        height: size,
        stroke: color,
        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        className: mergeClasses("lucide", className),
        ...!children && !hasA11yProp(rest) && {
            "aria-hidden": "true"
        },
        ...rest
    }, [
        ...iconNode.map(([tag, attrs])=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(tag, attrs)),
        ...Array.isArray(children) ? children : [
            children
        ]
    ]);
});
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const createLucideIcon = (iconName, iconNode)=>{
    const Component = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])(({ className, ...props }, ref)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(Icon, {
            ref,
            iconNode,
            className: mergeClasses(`lucide-${toKebabCase(toPascalCase(iconName))}`, `lucide-${iconName}`, className),
            ...props
        }));
    Component.displayName = toPascalCase(iconName);
    return Component;
};
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$9 = [
    [
        "path",
        {
            d: "m6 9 6 6 6-6",
            key: "qrunsl"
        }
    ]
];
const ChevronDown = createLucideIcon("chevron-down", __iconNode$9);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$8 = [
    [
        "path",
        {
            d: "m18 15-6-6-6 6",
            key: "153udz"
        }
    ]
];
const ChevronUp = createLucideIcon("chevron-up", __iconNode$8);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$7 = [
    [
        "path",
        {
            d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z",
            key: "vv11sd"
        }
    ]
];
const MessageCircle = createLucideIcon("message-circle", __iconNode$7);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$6 = [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ],
    [
        "path",
        {
            d: "M12 5v14",
            key: "s699le"
        }
    ]
];
const Plus = createLucideIcon("plus", __iconNode$6);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$5 = [
    [
        "path",
        {
            d: "M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z",
            key: "w46dr5"
        }
    ]
];
const Puzzle = createLucideIcon("puzzle", __iconNode$5);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$4 = [
    [
        "path",
        {
            d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",
            key: "v9h5vc"
        }
    ],
    [
        "path",
        {
            d: "M21 3v5h-5",
            key: "1q7to0"
        }
    ],
    [
        "path",
        {
            d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",
            key: "3uifl3"
        }
    ],
    [
        "path",
        {
            d: "M8 16H3v5",
            key: "1cv678"
        }
    ]
];
const RefreshCw = createLucideIcon("refresh-cw", __iconNode$4);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$3 = [
    [
        "path",
        {
            d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
            key: "1ffxy3"
        }
    ],
    [
        "path",
        {
            d: "m21.854 2.147-10.94 10.939",
            key: "12cjpa"
        }
    ]
];
const Send = createLucideIcon("send", __iconNode$3);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$2 = [
    [
        "path",
        {
            d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
            key: "1qme2f"
        }
    ],
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "3",
            key: "1v7zrd"
        }
    ]
];
const Settings = createLucideIcon("settings", __iconNode$2);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode$1 = [
    [
        "path",
        {
            d: "M3 6h18",
            key: "d0wm0j"
        }
    ],
    [
        "path",
        {
            d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",
            key: "4alrt4"
        }
    ],
    [
        "path",
        {
            d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",
            key: "v07s0e"
        }
    ],
    [
        "line",
        {
            x1: "10",
            x2: "10",
            y1: "11",
            y2: "17",
            key: "1uufr5"
        }
    ],
    [
        "line",
        {
            x1: "14",
            x2: "14",
            y1: "11",
            y2: "17",
            key: "xtxkd"
        }
    ]
];
const Trash2 = createLucideIcon("trash-2", __iconNode$1);
/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ const __iconNode = [
    [
        "path",
        {
            d: "M12 20h.01",
            key: "zekei9"
        }
    ],
    [
        "path",
        {
            d: "M8.5 16.429a5 5 0 0 1 7 0",
            key: "1bycff"
        }
    ],
    [
        "path",
        {
            d: "M5 12.859a10 10 0 0 1 5.17-2.69",
            key: "1dl1wf"
        }
    ],
    [
        "path",
        {
            d: "M19 12.859a10 10 0 0 0-2.007-1.523",
            key: "4k23kn"
        }
    ],
    [
        "path",
        {
            d: "M2 8.82a15 15 0 0 1 4.177-2.643",
            key: "1grhjp"
        }
    ],
    [
        "path",
        {
            d: "M22 8.82a15 15 0 0 0-11.288-3.764",
            key: "z3jwby"
        }
    ],
    [
        "path",
        {
            d: "m2 2 20 20",
            key: "1ooewy"
        }
    ]
];
const WifiOff = createLucideIcon("wifi-off", __iconNode);
const BROWSER_ALIASES_MAP = {
    "Amazon Silk": "amazon_silk",
    "Android Browser": "android",
    Bada: "bada",
    BlackBerry: "blackberry",
    Chrome: "chrome",
    Chromium: "chromium",
    Electron: "electron",
    Epiphany: "epiphany",
    Firefox: "firefox",
    Focus: "focus",
    Generic: "generic",
    "Google Search": "google_search",
    Googlebot: "googlebot",
    "Internet Explorer": "ie",
    "K-Meleon": "k_meleon",
    Maxthon: "maxthon",
    "Microsoft Edge": "edge",
    "MZ Browser": "mz",
    "NAVER Whale Browser": "naver",
    Opera: "opera",
    "Opera Coast": "opera_coast",
    PhantomJS: "phantomjs",
    Puffin: "puffin",
    QupZilla: "qupzilla",
    QQ: "qq",
    QQLite: "qqlite",
    Safari: "safari",
    Sailfish: "sailfish",
    "Samsung Internet for Android": "samsung_internet",
    SeaMonkey: "seamonkey",
    Sleipnir: "sleipnir",
    Swing: "swing",
    Tizen: "tizen",
    "UC Browser": "uc",
    Vivaldi: "vivaldi",
    "WebOS Browser": "webos",
    WeChat: "wechat",
    "Yandex Browser": "yandex",
    Roku: "roku"
};
const BROWSER_MAP = {
    amazon_silk: "Amazon Silk",
    android: "Android Browser",
    bada: "Bada",
    blackberry: "BlackBerry",
    chrome: "Chrome",
    chromium: "Chromium",
    electron: "Electron",
    epiphany: "Epiphany",
    firefox: "Firefox",
    focus: "Focus",
    generic: "Generic",
    googlebot: "Googlebot",
    google_search: "Google Search",
    ie: "Internet Explorer",
    k_meleon: "K-Meleon",
    maxthon: "Maxthon",
    edge: "Microsoft Edge",
    mz: "MZ Browser",
    naver: "NAVER Whale Browser",
    opera: "Opera",
    opera_coast: "Opera Coast",
    phantomjs: "PhantomJS",
    puffin: "Puffin",
    qupzilla: "QupZilla",
    qq: "QQ Browser",
    qqlite: "QQ Browser Lite",
    safari: "Safari",
    sailfish: "Sailfish",
    samsung_internet: "Samsung Internet for Android",
    seamonkey: "SeaMonkey",
    sleipnir: "Sleipnir",
    swing: "Swing",
    tizen: "Tizen",
    uc: "UC Browser",
    vivaldi: "Vivaldi",
    webos: "WebOS Browser",
    wechat: "WeChat",
    yandex: "Yandex Browser"
};
const PLATFORMS_MAP = {
    tablet: "tablet",
    mobile: "mobile",
    desktop: "desktop",
    tv: "tv"
};
const OS_MAP = {
    WindowsPhone: "Windows Phone",
    Windows: "Windows",
    MacOS: "macOS",
    iOS: "iOS",
    Android: "Android",
    WebOS: "WebOS",
    BlackBerry: "BlackBerry",
    Bada: "Bada",
    Tizen: "Tizen",
    Linux: "Linux",
    ChromeOS: "Chrome OS",
    PlayStation4: "PlayStation 4",
    Roku: "Roku"
};
const ENGINE_MAP = {
    EdgeHTML: "EdgeHTML",
    Blink: "Blink",
    Trident: "Trident",
    Presto: "Presto",
    Gecko: "Gecko",
    WebKit: "WebKit"
};
class Utils {
    /**
   * Get first matched item for a string
   * @param {RegExp} regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */ static getFirstMatch(regexp, ua) {
        const match = ua.match(regexp);
        return match && match.length > 0 && match[1] || "";
    }
    /**
   * Get second matched item for a string
   * @param regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */ static getSecondMatch(regexp, ua) {
        const match = ua.match(regexp);
        return match && match.length > 1 && match[2] || "";
    }
    /**
   * Match a regexp and return a constant or undefined
   * @param {RegExp} regexp
   * @param {String} ua
   * @param {*} _const Any const that will be returned if regexp matches the string
   * @return {*}
   */ static matchAndReturnConst(regexp, ua, _const) {
        if (regexp.test(ua)) {
            return _const;
        }
        return void 0;
    }
    static getWindowsVersionName(version) {
        switch(version){
            case "NT":
                return "NT";
            case "XP":
                return "XP";
            case "NT 5.0":
                return "2000";
            case "NT 5.1":
                return "XP";
            case "NT 5.2":
                return "2003";
            case "NT 6.0":
                return "Vista";
            case "NT 6.1":
                return "7";
            case "NT 6.2":
                return "8";
            case "NT 6.3":
                return "8.1";
            case "NT 10.0":
                return "10";
            default:
                return void 0;
        }
    }
    /**
   * Get macOS version name
   *    10.5 - Leopard
   *    10.6 - Snow Leopard
   *    10.7 - Lion
   *    10.8 - Mountain Lion
   *    10.9 - Mavericks
   *    10.10 - Yosemite
   *    10.11 - El Capitan
   *    10.12 - Sierra
   *    10.13 - High Sierra
   *    10.14 - Mojave
   *    10.15 - Catalina
   *
   * @example
   *   getMacOSVersionName("10.14") // 'Mojave'
   *
   * @param  {string} version
   * @return {string} versionName
   */ static getMacOSVersionName(version) {
        const v2 = version.split(".").splice(0, 2).map((s2)=>parseInt(s2, 10) || 0);
        v2.push(0);
        if (v2[0] !== 10) return void 0;
        switch(v2[1]){
            case 5:
                return "Leopard";
            case 6:
                return "Snow Leopard";
            case 7:
                return "Lion";
            case 8:
                return "Mountain Lion";
            case 9:
                return "Mavericks";
            case 10:
                return "Yosemite";
            case 11:
                return "El Capitan";
            case 12:
                return "Sierra";
            case 13:
                return "High Sierra";
            case 14:
                return "Mojave";
            case 15:
                return "Catalina";
            default:
                return void 0;
        }
    }
    /**
   * Get Android version name
   *    1.5 - Cupcake
   *    1.6 - Donut
   *    2.0 - Eclair
   *    2.1 - Eclair
   *    2.2 - Froyo
   *    2.x - Gingerbread
   *    3.x - Honeycomb
   *    4.0 - Ice Cream Sandwich
   *    4.1 - Jelly Bean
   *    4.4 - KitKat
   *    5.x - Lollipop
   *    6.x - Marshmallow
   *    7.x - Nougat
   *    8.x - Oreo
   *    9.x - Pie
   *
   * @example
   *   getAndroidVersionName("7.0") // 'Nougat'
   *
   * @param  {string} version
   * @return {string} versionName
   */ static getAndroidVersionName(version) {
        const v2 = version.split(".").splice(0, 2).map((s2)=>parseInt(s2, 10) || 0);
        v2.push(0);
        if (v2[0] === 1 && v2[1] < 5) return void 0;
        if (v2[0] === 1 && v2[1] < 6) return "Cupcake";
        if (v2[0] === 1 && v2[1] >= 6) return "Donut";
        if (v2[0] === 2 && v2[1] < 2) return "Eclair";
        if (v2[0] === 2 && v2[1] === 2) return "Froyo";
        if (v2[0] === 2 && v2[1] > 2) return "Gingerbread";
        if (v2[0] === 3) return "Honeycomb";
        if (v2[0] === 4 && v2[1] < 1) return "Ice Cream Sandwich";
        if (v2[0] === 4 && v2[1] < 4) return "Jelly Bean";
        if (v2[0] === 4 && v2[1] >= 4) return "KitKat";
        if (v2[0] === 5) return "Lollipop";
        if (v2[0] === 6) return "Marshmallow";
        if (v2[0] === 7) return "Nougat";
        if (v2[0] === 8) return "Oreo";
        if (v2[0] === 9) return "Pie";
        return void 0;
    }
    /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */ static getVersionPrecision(version) {
        return version.split(".").length;
    }
    /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1
   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1
   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0
   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1
   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0
   *
   * @param {String} versionA versions versions to compare
   * @param {String} versionB versions versions to compare
   * @param {boolean} [isLoose] enable loose comparison
   * @return {Number} comparison result: -1 when versionA is lower,
   * 1 when versionA is bigger, 0 when both equal
   */ /* eslint consistent-return: 1 */ static compareVersions(versionA, versionB, isLoose = false) {
        const versionAPrecision = Utils.getVersionPrecision(versionA);
        const versionBPrecision = Utils.getVersionPrecision(versionB);
        let precision = Math.max(versionAPrecision, versionBPrecision);
        let lastPrecision = 0;
        const chunks = Utils.map([
            versionA,
            versionB
        ], (version)=>{
            const delta = precision - Utils.getVersionPrecision(version);
            const _version = version + new Array(delta + 1).join(".0");
            return Utils.map(_version.split("."), (chunk)=>new Array(20 - chunk.length).join("0") + chunk).reverse();
        });
        if (isLoose) {
            lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
        }
        precision -= 1;
        while(precision >= lastPrecision){
            if (chunks[0][precision] > chunks[1][precision]) {
                return 1;
            }
            if (chunks[0][precision] === chunks[1][precision]) {
                if (precision === lastPrecision) {
                    return 0;
                }
                precision -= 1;
            } else if (chunks[0][precision] < chunks[1][precision]) {
                return -1;
            }
        }
        return void 0;
    }
    /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */ static map(arr, iterator) {
        const result = [];
        let i2;
        if (Array.prototype.map) {
            return Array.prototype.map.call(arr, iterator);
        }
        for(i2 = 0; i2 < arr.length; i2 += 1){
            result.push(iterator(arr[i2]));
        }
        return result;
    }
    /**
   * Array::find polyfill
   *
   * @param  {Array} arr
   * @param  {Function} predicate
   * @return {Array}
   */ static find(arr, predicate) {
        let i2;
        let l;
        if (Array.prototype.find) {
            return Array.prototype.find.call(arr, predicate);
        }
        for(i2 = 0, l = arr.length; i2 < l; i2 += 1){
            const value = arr[i2];
            if (predicate(value, i2)) {
                return value;
            }
        }
        return void 0;
    }
    /**
   * Object::assign polyfill
   *
   * @param  {Object} obj
   * @param  {Object} ...objs
   * @return {Object}
   */ static assign(obj, ...assigners) {
        const result = obj;
        let i2;
        let l;
        if ("TURBOPACK compile-time truthy", 1) {
            return Object.assign(obj, ...assigners);
        }
        "TURBOPACK unreachable";
    }
    /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('Microsoft Edge') // edge
   *
   * @param  {string} browserName
   * @return {string}
   */ static getBrowserAlias(browserName) {
        return BROWSER_ALIASES_MAP[browserName];
    }
    /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('edge') // Microsoft Edge
   *
   * @param  {string} browserAlias
   * @return {string}
   */ static getBrowserTypeByAlias(browserAlias) {
        return BROWSER_MAP[browserAlias] || "";
    }
}
const commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
const browsersList = [
    /* Googlebot */ {
        test: [
            /googlebot/i
        ],
        describe (ua) {
            const browser = {
                name: "Googlebot"
            };
            const version = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* Opera < 13.0 */ {
        test: [
            /opera/i
        ],
        describe (ua) {
            const browser = {
                name: "Opera"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* Opera > 13.0 */ {
        test: [
            /opr\/|opios/i
        ],
        describe (ua) {
            const browser = {
                name: "Opera"
            };
            const version = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /SamsungBrowser/i
        ],
        describe (ua) {
            const browser = {
                name: "Samsung Internet for Android"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /Whale/i
        ],
        describe (ua) {
            const browser = {
                name: "NAVER Whale Browser"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /MZBrowser/i
        ],
        describe (ua) {
            const browser = {
                name: "MZ Browser"
            };
            const version = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /focus/i
        ],
        describe (ua) {
            const browser = {
                name: "Focus"
            };
            const version = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /swing/i
        ],
        describe (ua) {
            const browser = {
                name: "Swing"
            };
            const version = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /coast/i
        ],
        describe (ua) {
            const browser = {
                name: "Opera Coast"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /opt\/\d+(?:.?_?\d+)+/i
        ],
        describe (ua) {
            const browser = {
                name: "Opera Touch"
            };
            const version = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /yabrowser/i
        ],
        describe (ua) {
            const browser = {
                name: "Yandex Browser"
            };
            const version = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /ucbrowser/i
        ],
        describe (ua) {
            const browser = {
                name: "UC Browser"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /Maxthon|mxios/i
        ],
        describe (ua) {
            const browser = {
                name: "Maxthon"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /epiphany/i
        ],
        describe (ua) {
            const browser = {
                name: "Epiphany"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /puffin/i
        ],
        describe (ua) {
            const browser = {
                name: "Puffin"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /sleipnir/i
        ],
        describe (ua) {
            const browser = {
                name: "Sleipnir"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /k-meleon/i
        ],
        describe (ua) {
            const browser = {
                name: "K-Meleon"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /micromessenger/i
        ],
        describe (ua) {
            const browser = {
                name: "WeChat"
            };
            const version = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /qqbrowser/i
        ],
        describe (ua) {
            const browser = {
                name: /qqbrowserlite/i.test(ua) ? "QQ Browser Lite" : "QQ Browser"
            };
            const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /msie|trident/i
        ],
        describe (ua) {
            const browser = {
                name: "Internet Explorer"
            };
            const version = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /\sedg\//i
        ],
        describe (ua) {
            const browser = {
                name: "Microsoft Edge"
            };
            const version = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /edg([ea]|ios)/i
        ],
        describe (ua) {
            const browser = {
                name: "Microsoft Edge"
            };
            const version = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /vivaldi/i
        ],
        describe (ua) {
            const browser = {
                name: "Vivaldi"
            };
            const version = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /seamonkey/i
        ],
        describe (ua) {
            const browser = {
                name: "SeaMonkey"
            };
            const version = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /sailfish/i
        ],
        describe (ua) {
            const browser = {
                name: "Sailfish"
            };
            const version = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /silk/i
        ],
        describe (ua) {
            const browser = {
                name: "Amazon Silk"
            };
            const version = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /phantom/i
        ],
        describe (ua) {
            const browser = {
                name: "PhantomJS"
            };
            const version = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /slimerjs/i
        ],
        describe (ua) {
            const browser = {
                name: "SlimerJS"
            };
            const version = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /blackberry|\bbb\d+/i,
            /rim\stablet/i
        ],
        describe (ua) {
            const browser = {
                name: "BlackBerry"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /(web|hpw)[o0]s/i
        ],
        describe (ua) {
            const browser = {
                name: "WebOS Browser"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /bada/i
        ],
        describe (ua) {
            const browser = {
                name: "Bada"
            };
            const version = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /tizen/i
        ],
        describe (ua) {
            const browser = {
                name: "Tizen"
            };
            const version = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /qupzilla/i
        ],
        describe (ua) {
            const browser = {
                name: "QupZilla"
            };
            const version = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /firefox|iceweasel|fxios/i
        ],
        describe (ua) {
            const browser = {
                name: "Firefox"
            };
            const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /electron/i
        ],
        describe (ua) {
            const browser = {
                name: "Electron"
            };
            const version = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /MiuiBrowser/i
        ],
        describe (ua) {
            const browser = {
                name: "Miui"
            };
            const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /chromium/i
        ],
        describe (ua) {
            const browser = {
                name: "Chromium"
            };
            const version = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /chrome|crios|crmo/i
        ],
        describe (ua) {
            const browser = {
                name: "Chrome"
            };
            const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    {
        test: [
            /GSA/i
        ],
        describe (ua) {
            const browser = {
                name: "Google Search"
            };
            const version = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* Android Browser */ {
        test (parser) {
            const notLikeAndroid = !parser.test(/like android/i);
            const butAndroid = parser.test(/android/i);
            return notLikeAndroid && butAndroid;
        },
        describe (ua) {
            const browser = {
                name: "Android Browser"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* PlayStation 4 */ {
        test: [
            /playstation 4/i
        ],
        describe (ua) {
            const browser = {
                name: "PlayStation 4"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* Safari */ {
        test: [
            /safari|applewebkit/i
        ],
        describe (ua) {
            const browser = {
                name: "Safari"
            };
            const version = Utils.getFirstMatch(commonVersionIdentifier, ua);
            if (version) {
                browser.version = version;
            }
            return browser;
        }
    },
    /* Something else */ {
        test: [
            /.*/i
        ],
        describe (ua) {
            const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
            const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
            const hasDeviceSpec = ua.search("\\(") !== -1;
            const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
            return {
                name: Utils.getFirstMatch(regexp, ua),
                version: Utils.getSecondMatch(regexp, ua)
            };
        }
    }
];
const osParsersList = [
    /* Roku */ {
        test: [
            /Roku\/DVP/
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
            return {
                name: OS_MAP.Roku,
                version
            };
        }
    },
    /* Windows Phone */ {
        test: [
            /windows phone/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
            return {
                name: OS_MAP.WindowsPhone,
                version
            };
        }
    },
    /* Windows */ {
        test: [
            /windows /i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
            const versionName = Utils.getWindowsVersionName(version);
            return {
                name: OS_MAP.Windows,
                version,
                versionName
            };
        }
    },
    /* Firefox on iPad */ {
        test: [
            /Macintosh(.*?) FxiOS(.*?)\//
        ],
        describe (ua) {
            const result = {
                name: OS_MAP.iOS
            };
            const version = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
            if (version) {
                result.version = version;
            }
            return result;
        }
    },
    /* macOS */ {
        test: [
            /macintosh/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, ".");
            const versionName = Utils.getMacOSVersionName(version);
            const os = {
                name: OS_MAP.MacOS,
                version
            };
            if (versionName) {
                os.versionName = versionName;
            }
            return os;
        }
    },
    /* iOS */ {
        test: [
            /(ipod|iphone|ipad)/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, ".");
            return {
                name: OS_MAP.iOS,
                version
            };
        }
    },
    /* Android */ {
        test (parser) {
            const notLikeAndroid = !parser.test(/like android/i);
            const butAndroid = parser.test(/android/i);
            return notLikeAndroid && butAndroid;
        },
        describe (ua) {
            const version = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
            const versionName = Utils.getAndroidVersionName(version);
            const os = {
                name: OS_MAP.Android,
                version
            };
            if (versionName) {
                os.versionName = versionName;
            }
            return os;
        }
    },
    /* WebOS */ {
        test: [
            /(web|hpw)[o0]s/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
            const os = {
                name: OS_MAP.WebOS
            };
            if (version && version.length) {
                os.version = version;
            }
            return os;
        }
    },
    /* BlackBerry */ {
        test: [
            /blackberry|\bbb\d+/i,
            /rim\stablet/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || Utils.getFirstMatch(/\bbb(\d+)/i, ua);
            return {
                name: OS_MAP.BlackBerry,
                version
            };
        }
    },
    /* Bada */ {
        test: [
            /bada/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
            return {
                name: OS_MAP.Bada,
                version
            };
        }
    },
    /* Tizen */ {
        test: [
            /tizen/i
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
            return {
                name: OS_MAP.Tizen,
                version
            };
        }
    },
    /* Linux */ {
        test: [
            /linux/i
        ],
        describe () {
            return {
                name: OS_MAP.Linux
            };
        }
    },
    /* Chrome OS */ {
        test: [
            /CrOS/
        ],
        describe () {
            return {
                name: OS_MAP.ChromeOS
            };
        }
    },
    /* Playstation 4 */ {
        test: [
            /PlayStation 4/
        ],
        describe (ua) {
            const version = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
            return {
                name: OS_MAP.PlayStation4,
                version
            };
        }
    }
];
const platformParsersList = [
    /* Googlebot */ {
        test: [
            /googlebot/i
        ],
        describe () {
            return {
                type: "bot",
                vendor: "Google"
            };
        }
    },
    /* Huawei */ {
        test: [
            /huawei/i
        ],
        describe (ua) {
            const model = Utils.getFirstMatch(/(can-l01)/i, ua) && "Nova";
            const platform = {
                type: PLATFORMS_MAP.mobile,
                vendor: "Huawei"
            };
            if (model) {
                platform.model = model;
            }
            return platform;
        }
    },
    /* Nexus Tablet */ {
        test: [
            /nexus\s*(?:7|8|9|10).*/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet,
                vendor: "Nexus"
            };
        }
    },
    /* iPad */ {
        test: [
            /ipad/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
            };
        }
    },
    /* Firefox on iPad */ {
        test: [
            /Macintosh(.*?) FxiOS(.*?)\//
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
            };
        }
    },
    /* Amazon Kindle Fire */ {
        test: [
            /kftt build/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet,
                vendor: "Amazon",
                model: "Kindle Fire HD 7"
            };
        }
    },
    /* Another Amazon Tablet with Silk */ {
        test: [
            /silk/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet,
                vendor: "Amazon"
            };
        }
    },
    /* Tablet */ {
        test: [
            /tablet(?! pc)/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.tablet
            };
        }
    },
    /* iPod/iPhone */ {
        test (parser) {
            const iDevice = parser.test(/ipod|iphone/i);
            const likeIDevice = parser.test(/like (ipod|iphone)/i);
            return iDevice && !likeIDevice;
        },
        describe (ua) {
            const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
            return {
                type: PLATFORMS_MAP.mobile,
                vendor: "Apple",
                model
            };
        }
    },
    /* Nexus Mobile */ {
        test: [
            /nexus\s*[0-6].*/i,
            /galaxy nexus/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.mobile,
                vendor: "Nexus"
            };
        }
    },
    /* Mobile */ {
        test: [
            /[^-]mobi/i
        ],
        describe () {
            return {
                type: PLATFORMS_MAP.mobile
            };
        }
    },
    /* BlackBerry */ {
        test (parser) {
            return parser.getBrowserName(true) === "blackberry";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.mobile,
                vendor: "BlackBerry"
            };
        }
    },
    /* Bada */ {
        test (parser) {
            return parser.getBrowserName(true) === "bada";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.mobile
            };
        }
    },
    /* Windows Phone */ {
        test (parser) {
            return parser.getBrowserName() === "windows phone";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.mobile,
                vendor: "Microsoft"
            };
        }
    },
    /* Android Tablet */ {
        test (parser) {
            const osMajorVersion = Number(String(parser.getOSVersion()).split(".")[0]);
            return parser.getOSName(true) === "android" && osMajorVersion >= 3;
        },
        describe () {
            return {
                type: PLATFORMS_MAP.tablet
            };
        }
    },
    /* Android Mobile */ {
        test (parser) {
            return parser.getOSName(true) === "android";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.mobile
            };
        }
    },
    /* desktop */ {
        test (parser) {
            return parser.getOSName(true) === "macos";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.desktop,
                vendor: "Apple"
            };
        }
    },
    /* Windows */ {
        test (parser) {
            return parser.getOSName(true) === "windows";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.desktop
            };
        }
    },
    /* Linux */ {
        test (parser) {
            return parser.getOSName(true) === "linux";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.desktop
            };
        }
    },
    /* PlayStation 4 */ {
        test (parser) {
            return parser.getOSName(true) === "playstation 4";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.tv
            };
        }
    },
    /* Roku */ {
        test (parser) {
            return parser.getOSName(true) === "roku";
        },
        describe () {
            return {
                type: PLATFORMS_MAP.tv
            };
        }
    }
];
const enginesParsersList = [
    /* EdgeHTML */ {
        test (parser) {
            return parser.getBrowserName(true) === "microsoft edge";
        },
        describe (ua) {
            const isBlinkBased = /\sedg\//i.test(ua);
            if (isBlinkBased) {
                return {
                    name: ENGINE_MAP.Blink
                };
            }
            const version = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
            return {
                name: ENGINE_MAP.EdgeHTML,
                version
            };
        }
    },
    /* Trident */ {
        test: [
            /trident/i
        ],
        describe (ua) {
            const engine = {
                name: ENGINE_MAP.Trident
            };
            const version = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                engine.version = version;
            }
            return engine;
        }
    },
    /* Presto */ {
        test (parser) {
            return parser.test(/presto/i);
        },
        describe (ua) {
            const engine = {
                name: ENGINE_MAP.Presto
            };
            const version = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                engine.version = version;
            }
            return engine;
        }
    },
    /* Gecko */ {
        test (parser) {
            const isGecko = parser.test(/gecko/i);
            const likeGecko = parser.test(/like gecko/i);
            return isGecko && !likeGecko;
        },
        describe (ua) {
            const engine = {
                name: ENGINE_MAP.Gecko
            };
            const version = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                engine.version = version;
            }
            return engine;
        }
    },
    /* Blink */ {
        test: [
            /(apple)?webkit\/537\.36/i
        ],
        describe () {
            return {
                name: ENGINE_MAP.Blink
            };
        }
    },
    /* WebKit */ {
        test: [
            /(apple)?webkit/i
        ],
        describe (ua) {
            const engine = {
                name: ENGINE_MAP.WebKit
            };
            const version = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);
            if (version) {
                engine.version = version;
            }
            return engine;
        }
    }
];
class Parser {
    /**
   * Create instance of Parser
   *
   * @param {String} UA User-Agent string
   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance
   * improvements if you need to make a more particular parsing
   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}
   *
   * @throw {Error} in case of empty UA String
   *
   * @constructor
   */ constructor(UA, skipParsing = false){
        if (UA === void 0 || UA === null || UA === "") {
            throw new Error("UserAgent parameter can't be empty");
        }
        this._ua = UA;
        this.parsedResult = {};
        if (skipParsing !== true) {
            this.parse();
        }
    }
    /**
   * Get UserAgent string of current Parser instance
   * @return {String} User-Agent String of the current <Parser> object
   *
   * @public
   */ getUA() {
        return this._ua;
    }
    /**
   * Test a UA string for a regexp
   * @param {RegExp} regex
   * @return {Boolean}
   */ test(regex) {
        return regex.test(this._ua);
    }
    /**
   * Get parsed browser object
   * @return {Object}
   */ parseBrowser() {
        this.parsedResult.browser = {};
        const browserDescriptor = Utils.find(browsersList, (_browser)=>{
            if (typeof _browser.test === "function") {
                return _browser.test(this);
            }
            if (_browser.test instanceof Array) {
                return _browser.test.some((condition)=>this.test(condition));
            }
            throw new Error("Browser's test function is not valid");
        });
        if (browserDescriptor) {
            this.parsedResult.browser = browserDescriptor.describe(this.getUA());
        }
        return this.parsedResult.browser;
    }
    /**
   * Get parsed browser object
   * @return {Object}
   *
   * @public
   */ getBrowser() {
        if (this.parsedResult.browser) {
            return this.parsedResult.browser;
        }
        return this.parseBrowser();
    }
    /**
   * Get browser's name
   * @return {String} Browser's name or an empty string
   *
   * @public
   */ getBrowserName(toLowerCase) {
        if (toLowerCase) {
            return String(this.getBrowser().name).toLowerCase() || "";
        }
        return this.getBrowser().name || "";
    }
    /**
   * Get browser's version
   * @return {String} version of browser
   *
   * @public
   */ getBrowserVersion() {
        return this.getBrowser().version;
    }
    /**
   * Get OS
   * @return {Object}
   *
   * @example
   * this.getOS();
   * {
   *   name: 'macOS',
   *   version: '10.11.12'
   * }
   */ getOS() {
        if (this.parsedResult.os) {
            return this.parsedResult.os;
        }
        return this.parseOS();
    }
    /**
   * Parse OS and save it to this.parsedResult.os
   * @return {*|{}}
   */ parseOS() {
        this.parsedResult.os = {};
        const os = Utils.find(osParsersList, (_os)=>{
            if (typeof _os.test === "function") {
                return _os.test(this);
            }
            if (_os.test instanceof Array) {
                return _os.test.some((condition)=>this.test(condition));
            }
            throw new Error("Browser's test function is not valid");
        });
        if (os) {
            this.parsedResult.os = os.describe(this.getUA());
        }
        return this.parsedResult.os;
    }
    /**
   * Get OS name
   * @param {Boolean} [toLowerCase] return lower-cased value
   * @return {String} name of the OS — macOS, Windows, Linux, etc.
   */ getOSName(toLowerCase) {
        const { name } = this.getOS();
        if (toLowerCase) {
            return String(name).toLowerCase() || "";
        }
        return name || "";
    }
    /**
   * Get OS version
   * @return {String} full version with dots ('10.11.12', '5.6', etc)
   */ getOSVersion() {
        return this.getOS().version;
    }
    /**
   * Get parsed platform
   * @return {{}}
   */ getPlatform() {
        if (this.parsedResult.platform) {
            return this.parsedResult.platform;
        }
        return this.parsePlatform();
    }
    /**
   * Get platform name
   * @param {Boolean} [toLowerCase=false]
   * @return {*}
   */ getPlatformType(toLowerCase = false) {
        const { type } = this.getPlatform();
        if (toLowerCase) {
            return String(type).toLowerCase() || "";
        }
        return type || "";
    }
    /**
   * Get parsed platform
   * @return {{}}
   */ parsePlatform() {
        this.parsedResult.platform = {};
        const platform = Utils.find(platformParsersList, (_platform)=>{
            if (typeof _platform.test === "function") {
                return _platform.test(this);
            }
            if (_platform.test instanceof Array) {
                return _platform.test.some((condition)=>this.test(condition));
            }
            throw new Error("Browser's test function is not valid");
        });
        if (platform) {
            this.parsedResult.platform = platform.describe(this.getUA());
        }
        return this.parsedResult.platform;
    }
    /**
   * Get parsed engine
   * @return {{}}
   */ getEngine() {
        if (this.parsedResult.engine) {
            return this.parsedResult.engine;
        }
        return this.parseEngine();
    }
    /**
   * Get engines's name
   * @return {String} Engines's name or an empty string
   *
   * @public
   */ getEngineName(toLowerCase) {
        if (toLowerCase) {
            return String(this.getEngine().name).toLowerCase() || "";
        }
        return this.getEngine().name || "";
    }
    /**
   * Get parsed platform
   * @return {{}}
   */ parseEngine() {
        this.parsedResult.engine = {};
        const engine = Utils.find(enginesParsersList, (_engine)=>{
            if (typeof _engine.test === "function") {
                return _engine.test(this);
            }
            if (_engine.test instanceof Array) {
                return _engine.test.some((condition)=>this.test(condition));
            }
            throw new Error("Browser's test function is not valid");
        });
        if (engine) {
            this.parsedResult.engine = engine.describe(this.getUA());
        }
        return this.parsedResult.engine;
    }
    /**
   * Parse full information about the browser
   * @returns {Parser}
   */ parse() {
        this.parseBrowser();
        this.parseOS();
        this.parsePlatform();
        this.parseEngine();
        return this;
    }
    /**
   * Get parsed result
   * @return {ParsedResult}
   */ getResult() {
        return Utils.assign({}, this.parsedResult);
    }
    /**
   * Check if parsed browser matches certain conditions
   *
   * @param {Object} checkTree It's one or two layered object,
   * which can include a platform or an OS on the first layer
   * and should have browsers specs on the bottom-laying layer
   *
   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.
   * Returns `undefined` when the browser is no described in the checkTree object.
   *
   * @example
   * const browser = Bowser.getParser(window.navigator.userAgent);
   * if (browser.satisfies({chrome: '>118.01.1322' }))
   * // or with os
   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))
   * // or with platforms
   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))
   */ satisfies(checkTree) {
        const platformsAndOSes = {};
        let platformsAndOSCounter = 0;
        const browsers = {};
        let browsersCounter = 0;
        const allDefinitions = Object.keys(checkTree);
        allDefinitions.forEach((key)=>{
            const currentDefinition = checkTree[key];
            if (typeof currentDefinition === "string") {
                browsers[key] = currentDefinition;
                browsersCounter += 1;
            } else if (typeof currentDefinition === "object") {
                platformsAndOSes[key] = currentDefinition;
                platformsAndOSCounter += 1;
            }
        });
        if (platformsAndOSCounter > 0) {
            const platformsAndOSNames = Object.keys(platformsAndOSes);
            const OSMatchingDefinition = Utils.find(platformsAndOSNames, (name)=>this.isOS(name));
            if (OSMatchingDefinition) {
                const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);
                if (osResult !== void 0) {
                    return osResult;
                }
            }
            const platformMatchingDefinition = Utils.find(platformsAndOSNames, (name)=>this.isPlatform(name));
            if (platformMatchingDefinition) {
                const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);
                if (platformResult !== void 0) {
                    return platformResult;
                }
            }
        }
        if (browsersCounter > 0) {
            const browserNames = Object.keys(browsers);
            const matchingDefinition = Utils.find(browserNames, (name)=>this.isBrowser(name, true));
            if (matchingDefinition !== void 0) {
                return this.compareVersion(browsers[matchingDefinition]);
            }
        }
        return void 0;
    }
    /**
   * Check if the browser name equals the passed string
   * @param browserName The string to compare with the browser name
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {boolean}
   */ isBrowser(browserName, includingAlias = false) {
        const defaultBrowserName = this.getBrowserName().toLowerCase();
        let browserNameLower = browserName.toLowerCase();
        const alias = Utils.getBrowserTypeByAlias(browserNameLower);
        if (includingAlias && alias) {
            browserNameLower = alias.toLowerCase();
        }
        return browserNameLower === defaultBrowserName;
    }
    compareVersion(version) {
        let expectedResults = [
            0
        ];
        let comparableVersion = version;
        let isLoose = false;
        const currentBrowserVersion = this.getBrowserVersion();
        if (typeof currentBrowserVersion !== "string") {
            return void 0;
        }
        if (version[0] === ">" || version[0] === "<") {
            comparableVersion = version.substr(1);
            if (version[1] === "=") {
                isLoose = true;
                comparableVersion = version.substr(2);
            } else {
                expectedResults = [];
            }
            if (version[0] === ">") {
                expectedResults.push(1);
            } else {
                expectedResults.push(-1);
            }
        } else if (version[0] === "=") {
            comparableVersion = version.substr(1);
        } else if (version[0] === "~") {
            isLoose = true;
            comparableVersion = version.substr(1);
        }
        return expectedResults.indexOf(Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)) > -1;
    }
    isOS(osName) {
        return this.getOSName(true) === String(osName).toLowerCase();
    }
    isPlatform(platformType) {
        return this.getPlatformType(true) === String(platformType).toLowerCase();
    }
    isEngine(engineName) {
        return this.getEngineName(true) === String(engineName).toLowerCase();
    }
    /**
   * Is anything? Check if the browser is called "anything",
   * the OS called "anything" or the platform called "anything"
   * @param {String} anything
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {Boolean}
   */ is(anything, includingAlias = false) {
        return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);
    }
    /**
   * Check if any of the given values satisfies this.is(anything)
   * @param {String[]} anythings
   * @returns {Boolean}
   */ some(anythings = []) {
        return anythings.some((anything)=>this.is(anything));
    }
}
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */ class Bowser {
    /**
   * Creates a {@link Parser} instance
   *
   * @param {String} UA UserAgent string
   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it
   * explicitly. Same as `skipParsing` for {@link Parser}.
   * @returns {Parser}
   * @throws {Error} when UA is not a String
   *
   * @example
   * const parser = Bowser.getParser(window.navigator.userAgent);
   * const result = parser.getResult();
   */ static getParser(UA, skipParsing = false) {
        if (typeof UA !== "string") {
            throw new Error("UserAgent should be a string");
        }
        return new Parser(UA, skipParsing);
    }
    /**
   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately
   *
   * @param UA
   * @return {ParsedResult}
   *
   * @example
   * const result = Bowser.parse(window.navigator.userAgent);
   */ static parse(UA) {
        return new Parser(UA).getResult();
    }
    static get BROWSER_MAP() {
        return BROWSER_MAP;
    }
    static get ENGINE_MAP() {
        return ENGINE_MAP;
    }
    static get OS_MAP() {
        return OS_MAP;
    }
    static get PLATFORMS_MAP() {
        return PLATFORMS_MAP;
    }
}
const useBrowserInfo = ()=>{
    const browserInfo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>{
        {
            const result = Bowser.parse(window.navigator.userAgent);
            return {
                browser: result.browser,
                engine: result.engine,
                os: result.os
            };
        }
    }, []);
    return browserInfo;
};
function useHotkeyListenerComboText(action) {
    const userAgent = useBrowserInfo();
    return userAgent.os.name.toLowerCase().includes("mac") ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"][action].keyComboMac : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"][action].keyComboDefault;
}
function ToolbarChatArea() {
    const chatState = useChatState();
    const currentChat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>chatState.chats.find((c2)=>c2.id === chatState.currentChatId), [
        chatState.chats,
        chatState.currentChatId
    ]);
    const currentInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>(currentChat == null ? void 0 : currentChat.inputValue) || "", [
        currentChat == null ? void 0 : currentChat.inputValue
    ]);
    const handleInputChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((value)=>{
        chatState.setChatInput(chatState.currentChatId, value);
    }, [
        chatState.setChatInput,
        chatState.currentChatId
    ]);
    const handleSubmit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (!currentChat || !currentInput.trim()) return;
        chatState.addMessage(currentChat.id, currentInput);
    }, [
        currentChat,
        currentInput,
        chatState.addMessage
    ]);
    const handleKeyDown = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (e2.key === "Enter" && !e2.shiftKey) {
            e2.preventDefault();
            handleSubmit();
        }
    }, [
        handleSubmit
    ]);
    const inputRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        var _a, _b, _c;
        const blurHandler = ()=>{
            var _a2;
            return (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
        };
        if (chatState.isPromptCreationActive) {
            (_a = inputRef.current) == null ? void 0 : _a.focus();
            (_b = inputRef.current) == null ? void 0 : _b.addEventListener("blur", blurHandler);
        } else {
            (_c = inputRef.current) == null ? void 0 : _c.blur();
        }
        return ()=>{
            var _a2;
            (_a2 = inputRef.current) == null ? void 0 : _a2.removeEventListener("blur", blurHandler);
        };
    }, [
        chatState.isPromptCreationActive
    ]);
    const buttonClassName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("flex size-8 items-center justify-center rounded-full bg-transparent p-1 text-zinc-950 opacity-20 transition-all duration-150", currentInput.length > 0 && "bg-blue-600 text-white opacity-100", chatState.promptState === "loading" && "cursor-not-allowed bg-zinc-300 text-zinc-500 opacity-30"), [
        currentInput.length,
        chatState.promptState
    ]);
    const textareaClassName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("h-full w-full flex-1 resize-none bg-transparent text-zinc-950 transition-all duration-150 placeholder:text-zinc-950/50 focus:outline-none", chatState.promptState === "loading" && "text-zinc-500 placeholder:text-zinc-400"), [
        chatState.promptState
    ]);
    const containerClassName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>{
        const baseClasses = "flex h-24 w-full flex-1 flex-row items-end gap-1 rounded-2xl p-4 text-sm text-zinc-950 shadow-md backdrop-blur transition-all duration-150 placeholder:text-zinc-950/70";
        switch(chatState.promptState){
            case "loading":
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(baseClasses, "border-2 border-transparent bg-zinc-50/80", "chat-loading-gradient");
            case "success":
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(baseClasses, "border-2 border-transparent bg-zinc-50/80", "chat-success-border");
            case "error":
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(baseClasses, "border-2 border-transparent bg-zinc-50/80", "chat-error-border animate-shake");
            default:
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(baseClasses, "border border-border/30 bg-zinc-50/80");
        }
    }, [
        chatState.promptState
    ]);
    const ctrlAltCText = useHotkeyListenerComboText(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"].CTRL_ALT_C);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: containerClassName,
        onClick: ()=>chatState.startPromptCreation(),
        role: "button",
        tabIndex: 0,
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(J, {
                ref: inputRef,
                className: textareaClassName,
                value: currentInput,
                onChange: (e2)=>handleInputChange(e2.currentTarget.value),
                onKeyDown: handleKeyDown,
                placeholder: chatState.isPromptCreationActive ? chatState.promptState === "loading" ? "Processing..." : "Enter prompt..." : `What do you want to change? (${ctrlAltCText})`,
                disabled: chatState.promptState === "loading"
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(H$1, {
                className: buttonClassName,
                disabled: currentInput.length === 0 || chatState.promptState === "loading",
                onClick: handleSubmit,
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Send, {
                    className: "size-4"
                })
            })
        ]
    });
}
const DraggableContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(null);
const DraggableProvider = ({ containerRef, children, snapAreas, onDragStart, onDragEnd })=>{
    const [borderLocation, setBorderLocation] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])({
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (!containerRef.current) return;
        const updateBorderLocation = ()=>{
            if (containerRef.current) {
                const rect = containerRef.current.getBoundingClientRect();
                setBorderLocation({
                    top: rect.top,
                    left: rect.left,
                    right: rect.right,
                    bottom: rect.bottom
                });
            }
        };
        updateBorderLocation();
        const resizeObserver = new ResizeObserver(updateBorderLocation);
        resizeObserver.observe(containerRef.current);
        window.addEventListener("resize", updateBorderLocation);
        return ()=>{
            if (containerRef.current) {
                resizeObserver.unobserve(containerRef.current);
            }
            resizeObserver.disconnect();
            window.removeEventListener("resize", updateBorderLocation);
        };
    }, [
        containerRef
    ]);
    const dragStartListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(/* @__PURE__ */ new Set());
    const dragEndListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(/* @__PURE__ */ new Set());
    const registerDragStart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((cb)=>{
        dragStartListeners.current.add(cb);
        return ()=>dragStartListeners.current.delete(cb);
    }, []);
    const registerDragEnd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((cb)=>{
        dragEndListeners.current.add(cb);
        return ()=>dragEndListeners.current.delete(cb);
    }, []);
    const emitDragStart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (onDragStart) onDragStart();
        dragStartListeners.current.forEach((cb)=>cb());
    }, [
        onDragStart
    ]);
    const emitDragEnd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (onDragEnd) onDragEnd();
        dragEndListeners.current.forEach((cb)=>cb());
    }, [
        onDragEnd
    ]);
    const contextValue = {
        borderLocation,
        snapAreas,
        registerDragStart,
        registerDragEnd,
        emitDragStart,
        emitDragEnd
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(DraggableContext.Provider, {
        value: contextValue,
        children
    });
};
function useDraggable(config) {
    const providerData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(DraggableContext);
    const latestProviderDataRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(providerData);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        latestProviderDataRef.current = providerData;
    }, [
        providerData
    ]);
    const movingElementRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const dragInitiatorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const [movingElementNode, setMovingElementNode] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const [dragInitiatorNode, setDragInitiatorNode] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const mouseToDraggableCenterOffsetRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const mouseDownPosRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const currentMousePosRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const isDraggingRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(false);
    const persistedRelativeCenterRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(config.initialRelativeCenter);
    const [currentSnapArea, setCurrentSnapArea] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const { startThreshold = 3, areaSnapThreshold = 60, // px, default threshold for snapping
    onDragStart, onDragEnd, initialSnapArea, springStiffness = 0.2, // Default spring stiffness
    springDampness = 0.55 } = config;
    const animatedPositionRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const velocityRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])({
        x: 0,
        y: 0
    });
    const hasAnimatedOnceRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(false);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (initialSnapArea && providerData && providerData.borderLocation && providerData.snapAreas && providerData.snapAreas[initialSnapArea] && !isDraggingRef.current) {
            const { top, left, right, bottom } = providerData.borderLocation;
            const width = right - left;
            const height = bottom - top;
            const areaCenters = {
                topLeft: {
                    x: left,
                    y: top
                },
                topRight: {
                    x: right,
                    y: top
                },
                bottomLeft: {
                    x: left,
                    y: bottom
                },
                bottomRight: {
                    x: right,
                    y: bottom
                }
            };
            const center = areaCenters[initialSnapArea];
            if (center && width > 0 && height > 0) {
                const relX = (center.x - left) / width;
                const relY = (center.y - top) / height;
                persistedRelativeCenterRef.current = {
                    x: relX,
                    y: relY
                };
            } else if (center) {
                console.warn("useDraggable: Container for initialSnapArea has zero width or height. Cannot calculate relative center from snap area. Falling back to initialRelativeCenter or undefined.");
            }
        }
    }, [
        initialSnapArea,
        providerData
    ]);
    function getSnapAreaCenters(borderLocation) {
        const { top, left, right, bottom } = borderLocation;
        const centerX = (left + right) / 2;
        return {
            topLeft: {
                x: left,
                y: top
            },
            topCenter: {
                x: centerX,
                y: top
            },
            topRight: {
                x: right,
                y: top
            },
            bottomLeft: {
                x: left,
                y: bottom
            },
            bottomCenter: {
                x: centerX,
                y: bottom
            },
            bottomRight: {
                x: right,
                y: bottom
            }
        };
    }
    const updateDraggablePosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        var _a, _b;
        const draggableEl = movingElementRef.current;
        if (!draggableEl) return;
        const draggableWidth = draggableEl.offsetWidth;
        const draggableHeight = draggableEl.offsetHeight;
        const offsetParent = draggableEl.offsetParent;
        let parentViewportLeft = 0;
        let parentViewportTop = 0;
        let parentWidth = window.innerWidth;
        let parentHeight = window.innerHeight;
        if (offsetParent) {
            const opRect = offsetParent.getBoundingClientRect();
            parentViewportLeft = opRect.left;
            parentViewportTop = opRect.top;
            parentWidth = offsetParent.offsetWidth || window.innerWidth;
            parentHeight = offsetParent.offsetHeight || window.innerHeight;
        }
        let targetViewportCenterX = null;
        let targetViewportCenterY = null;
        const currentDesiredRelativeCenter = persistedRelativeCenterRef.current;
        let snapArea = null;
        let snapTarget = null;
        const provider = latestProviderDataRef.current;
        let isTopHalf = true;
        let isLeftHalf = true;
        if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current && provider && provider.borderLocation && provider.snapAreas) {
            const dragCenter = {
                x: currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x,
                y: currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y
            };
            const areaCenters = getSnapAreaCenters(provider.borderLocation);
            let minDist = Number.POSITIVE_INFINITY;
            let closestArea = null;
            let closestCenter = null;
            for(const area in provider.snapAreas){
                if (provider.snapAreas[area]) {
                    const center = areaCenters[area];
                    if (!center) continue;
                    const dist = Math.hypot(center.x - dragCenter.x, center.y - dragCenter.y);
                    if (dist < minDist) {
                        minDist = dist;
                        closestArea = area;
                        closestCenter = center;
                    }
                }
            }
            if (closestArea && closestCenter && minDist <= areaSnapThreshold) {
                snapArea = closestArea;
                snapTarget = closestCenter;
            }
            isLeftHalf = (dragCenter.x - parentViewportLeft) / parentWidth <= 0.5;
            isTopHalf = (dragCenter.y - parentViewportTop) / parentHeight <= 0.5;
        }
        if (isDraggingRef.current && snapTarget) {
            targetViewportCenterX = snapTarget.x;
            targetViewportCenterY = snapTarget.y;
            setCurrentSnapArea(snapArea);
            isLeftHalf = (snapTarget.x - parentViewportLeft) / parentWidth <= 0.5;
            isTopHalf = (snapTarget.y - parentViewportTop) / parentHeight <= 0.5;
        } else if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current) {
            targetViewportCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x;
            targetViewportCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y;
            setCurrentSnapArea(null);
            isLeftHalf = (targetViewportCenterX - parentViewportLeft) / parentWidth <= 0.5;
            isTopHalf = (targetViewportCenterY - parentViewportTop) / parentHeight <= 0.5;
        } else {
            if (currentDesiredRelativeCenter && parentWidth > 0 && parentHeight > 0) {
                isTopHalf = currentDesiredRelativeCenter.y <= 0.5;
                isLeftHalf = currentDesiredRelativeCenter.x <= 0.5;
                if (isLeftHalf) {
                    const targetCenterXInParent = parentWidth * currentDesiredRelativeCenter.x;
                    targetViewportCenterX = parentViewportLeft + targetCenterXInParent;
                } else {
                    const targetCenterXInParent = parentWidth * (1 - currentDesiredRelativeCenter.x);
                    targetViewportCenterX = parentViewportLeft + parentWidth - targetCenterXInParent;
                }
                if (isTopHalf) {
                    const targetCenterYInParent = parentHeight * currentDesiredRelativeCenter.y;
                    targetViewportCenterY = parentViewportTop + targetCenterYInParent;
                } else {
                    const targetCenterYInParent = parentHeight * (1 - currentDesiredRelativeCenter.y);
                    targetViewportCenterY = parentViewportTop + parentHeight - targetCenterYInParent;
                }
            } else {
                if (!((_a = movingElementRef.current) == null ? void 0 : _a.style.left) && !((_b = movingElementRef.current) == null ? void 0 : _b.style.top)) {
                    console.warn("useDraggable: Cannot determine position. Parent has no dimensions or initialRelativeCenter was not effectively set.");
                }
                return;
            }
            setCurrentSnapArea(null);
        }
        if (targetViewportCenterX === null || targetViewportCenterY === null) {
            return;
        }
        const { borderLocation } = latestProviderDataRef.current || {
            borderLocation: void 0
        };
        if (borderLocation && draggableWidth > 0 && draggableHeight > 0) {
            const providerRectWidth = borderLocation.right - borderLocation.left;
            const providerRectHeight = borderLocation.bottom - borderLocation.top;
            let clampedCenterX = targetViewportCenterX;
            let clampedCenterY = targetViewportCenterY;
            if (draggableWidth >= providerRectWidth) {
                clampedCenterX = borderLocation.left + providerRectWidth / 2;
            } else {
                const minX = borderLocation.left + draggableWidth / 2;
                const maxX = borderLocation.right - draggableWidth / 2;
                clampedCenterX = Math.max(minX, Math.min(clampedCenterX, maxX));
            }
            if (draggableHeight >= providerRectHeight) {
                clampedCenterY = borderLocation.top + providerRectHeight / 2;
            } else {
                const minY = borderLocation.top + draggableHeight / 2;
                const maxY = borderLocation.bottom - draggableHeight / 2;
                clampedCenterY = Math.max(minY, Math.min(clampedCenterY, maxY));
            }
            targetViewportCenterX = clampedCenterX;
            targetViewportCenterY = clampedCenterY;
        }
        if (!animatedPositionRef.current) {
            animatedPositionRef.current = {
                x: targetViewportCenterX,
                y: targetViewportCenterY
            };
            velocityRef.current = {
                x: 0,
                y: 0
            };
            const targetElementStyleX2 = targetViewportCenterX - draggableWidth / 2;
            const targetElementStyleY2 = targetViewportCenterY - draggableHeight / 2;
            const elStyle2 = draggableEl.style;
            elStyle2.right = "";
            elStyle2.bottom = "";
            elStyle2.left = "";
            elStyle2.top = "";
            if (isLeftHalf) {
                const styleLeftPx = targetElementStyleX2 - parentViewportLeft;
                elStyle2.left = parentWidth > 0 ? `${(styleLeftPx / parentWidth * 100).toFixed(2)}%` : "0px";
                elStyle2.right = "";
            } else {
                const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX2 + draggableWidth);
                elStyle2.right = parentWidth > 0 ? `${(styleRightPx / parentWidth * 100).toFixed(2)}%` : "0px";
                elStyle2.left = "";
            }
            if (isTopHalf) {
                const styleTopPx = targetElementStyleY2 - parentViewportTop;
                elStyle2.top = parentHeight > 0 ? `${(styleTopPx / parentHeight * 100).toFixed(2)}%` : "0px";
                elStyle2.bottom = "";
            } else {
                const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY2 + draggableHeight);
                elStyle2.bottom = parentHeight > 0 ? `${(styleBottomPx / parentHeight * 100).toFixed(2)}%` : "0px";
                elStyle2.top = "";
            }
            hasAnimatedOnceRef.current = true;
            return;
        }
        if (!hasAnimatedOnceRef.current) {
            hasAnimatedOnceRef.current = true;
            return;
        }
        const pos = animatedPositionRef.current;
        const vel = velocityRef.current;
        const dx = targetViewportCenterX - pos.x;
        const dy = targetViewportCenterY - pos.y;
        const ax = springStiffness * dx - springDampness * vel.x;
        const ay = springStiffness * dy - springDampness * vel.y;
        vel.x += ax;
        vel.y += ay;
        pos.x += vel.x;
        pos.y += vel.y;
        const threshold = 0.5;
        if (Math.abs(dx) < threshold && Math.abs(dy) < threshold && Math.abs(vel.x) < threshold && Math.abs(vel.y) < threshold) {
            pos.x = targetViewportCenterX;
            pos.y = targetViewportCenterY;
            vel.x = 0;
            vel.y = 0;
        }
        animatedPositionRef.current = {
            ...pos
        };
        velocityRef.current = {
            ...vel
        };
        const targetElementStyleX = pos.x - draggableWidth / 2;
        const targetElementStyleY = pos.y - draggableHeight / 2;
        const elStyle = draggableEl.style;
        elStyle.right = "";
        elStyle.bottom = "";
        elStyle.left = "";
        elStyle.top = "";
        if (isLeftHalf) {
            const styleLeftPx = targetElementStyleX - parentViewportLeft;
            elStyle.left = parentWidth > 0 ? `${(styleLeftPx / parentWidth * 100).toFixed(2)}%` : "0px";
            elStyle.right = "";
        } else {
            const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX + draggableWidth);
            elStyle.right = parentWidth > 0 ? `${(styleRightPx / parentWidth * 100).toFixed(2)}%` : "0px";
            elStyle.left = "";
        }
        if (isTopHalf) {
            const styleTopPx = targetElementStyleY - parentViewportTop;
            elStyle.top = parentHeight > 0 ? `${(styleTopPx / parentHeight * 100).toFixed(2)}%` : "0px";
            elStyle.bottom = "";
        } else {
            const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY + draggableHeight);
            elStyle.bottom = parentHeight > 0 ? `${(styleBottomPx / parentHeight * 100).toFixed(2)}%` : "0px";
            elStyle.top = "";
        }
        if (Math.abs(pos.x - targetViewportCenterX) > threshold || Math.abs(pos.y - targetViewportCenterY) > threshold || Math.abs(vel.x) > threshold || Math.abs(vel.y) > threshold || isDraggingRef.current) {
            requestAnimationFrame(updateDraggablePosition);
        }
    }, [
        areaSnapThreshold,
        springStiffness,
        springDampness
    ]);
    const [wasDragged, setWasDragged] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(false);
    const mouseUpHandler = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        var _a;
        if (isDraggingRef.current) {
            if (onDragEnd) onDragEnd();
            if ((_a = latestProviderDataRef.current) == null ? void 0 : _a.emitDragEnd) {
                latestProviderDataRef.current.emitDragEnd();
            }
            setWasDragged(true);
            setTimeout(()=>setWasDragged(false), 0);
            const draggableEl = movingElementRef.current;
            const provider = latestProviderDataRef.current;
            if (draggableEl && provider && provider.borderLocation) {
                const draggableWidth = draggableEl.offsetWidth;
                const draggableHeight = draggableEl.offsetHeight;
                const offsetParent = draggableEl.offsetParent;
                let parentViewportLeft = 0;
                let parentViewportTop = 0;
                let parentWidth = window.innerWidth;
                let parentHeight = window.innerHeight;
                if (offsetParent) {
                    const opRect = offsetParent.getBoundingClientRect();
                    parentViewportLeft = opRect.left;
                    parentViewportTop = opRect.top;
                    parentWidth = offsetParent.offsetWidth || window.innerWidth;
                    parentHeight = offsetParent.offsetHeight || window.innerHeight;
                }
                let releasedCenterX = 0;
                let releasedCenterY = 0;
                if (currentMousePosRef.current && mouseToDraggableCenterOffsetRef.current) {
                    releasedCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x;
                    releasedCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y;
                } else {
                    if (animatedPositionRef.current) {
                        releasedCenterX = animatedPositionRef.current.x;
                        releasedCenterY = animatedPositionRef.current.y;
                    }
                }
                const borderLocation = provider.borderLocation;
                const minX = borderLocation.left + draggableWidth / 2;
                const maxX = borderLocation.right - draggableWidth / 2;
                const minY = borderLocation.top + draggableHeight / 2;
                const maxY = borderLocation.bottom - draggableHeight / 2;
                releasedCenterX = Math.max(minX, Math.min(releasedCenterX, maxX));
                releasedCenterY = Math.max(minY, Math.min(releasedCenterY, maxY));
                const areaCenters = getSnapAreaCenters(borderLocation);
                let minDist = Number.POSITIVE_INFINITY;
                let closestArea = null;
                let closestCenter = null;
                for(const area in provider.snapAreas){
                    if (provider.snapAreas[area]) {
                        const center = areaCenters[area];
                        if (!center) continue;
                        const dist = Math.hypot(center.x - releasedCenterX, center.y - releasedCenterY);
                        if (dist < minDist) {
                            minDist = dist;
                            closestArea = area;
                            closestCenter = center;
                        }
                    }
                }
                if (closestArea && closestCenter) {
                    setCurrentSnapArea(closestArea);
                    const relX = (closestCenter.x - parentViewportLeft) / parentWidth;
                    const relY = (closestCenter.y - parentViewportTop) / parentHeight;
                    persistedRelativeCenterRef.current = {
                        x: relX,
                        y: relY
                    };
                } else {
                    setCurrentSnapArea(null);
                    const relX = (releasedCenterX - parentViewportLeft) / parentWidth;
                    const relY = (releasedCenterY - parentViewportTop) / parentHeight;
                    persistedRelativeCenterRef.current = {
                        x: relX,
                        y: relY
                    };
                }
            }
        }
        mouseDownPosRef.current = null;
        isDraggingRef.current = false;
        window.removeEventListener("mousemove", mouseMoveHandler, {
            capture: true
        });
        window.removeEventListener("mouseup", mouseUpHandler, {
            capture: true
        });
        if (movingElementRef.current) {
            movingElementRef.current.style.userSelect = "";
        }
        document.body.style.userSelect = "";
        document.body.style.cursor = "";
    }, [
        onDragEnd
    ]);
    const mouseMoveHandler = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        var _a;
        if (!mouseDownPosRef.current) return;
        const distance = Math.hypot(e2.clientX - mouseDownPosRef.current.x, e2.clientY - mouseDownPosRef.current.y);
        if (distance > startThreshold && !isDraggingRef.current) {
            isDraggingRef.current = true;
            if (movingElementRef.current) {
                movingElementRef.current.style.userSelect = "none";
            }
            document.body.style.userSelect = "none";
            document.body.style.cursor = "grabbing";
            if (onDragStart) onDragStart();
            if ((_a = latestProviderDataRef.current) == null ? void 0 : _a.emitDragStart) {
                latestProviderDataRef.current.emitDragStart();
            }
            requestAnimationFrame(updateDraggablePosition);
        }
        currentMousePosRef.current = {
            x: e2.clientX,
            y: e2.clientY
        };
    }, [
        startThreshold,
        onDragStart,
        updateDraggablePosition
    ]);
    const mouseDownHandler = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((e2)=>{
        if (e2.button !== 0) {
            return;
        }
        const handleNode = dragInitiatorRef.current;
        const draggableItemNode = movingElementRef.current;
        if (handleNode) {
            if (!handleNode.contains(e2.target) && e2.target !== handleNode) {
                return;
            }
        } else if (draggableItemNode) {
            if (!draggableItemNode.contains(e2.target) && e2.target !== draggableItemNode) {
                return;
            }
        } else {
            console.error("Draggable element or handle ref not set in mouseDownHandler");
            return;
        }
        mouseDownPosRef.current = {
            x: e2.clientX,
            y: e2.clientY
        };
        if (!movingElementRef.current) {
            console.error("Draggable element ref not set in mouseDownHandler");
            return;
        }
        const rect = movingElementRef.current.getBoundingClientRect();
        const currentDraggableCenterX = rect.left + rect.width / 2;
        const currentDraggableCenterY = rect.top + rect.height / 2;
        mouseToDraggableCenterOffsetRef.current = {
            x: e2.clientX - currentDraggableCenterX,
            y: e2.clientY - currentDraggableCenterY
        };
        window.addEventListener("mousemove", mouseMoveHandler, {
            capture: true
        });
        window.addEventListener("mouseup", mouseUpHandler, {
            capture: true
        });
    }, [
        mouseMoveHandler,
        mouseUpHandler
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        const elementToListenOn = dragInitiatorNode || movingElementNode;
        if (elementToListenOn) {
            elementToListenOn.addEventListener("mousedown", mouseDownHandler);
        }
        return ()=>{
            if (elementToListenOn) {
                elementToListenOn.removeEventListener("mousedown", mouseDownHandler);
            }
            if (isDraggingRef.current) {
                if (onDragEnd) {
                    onDragEnd();
                }
                isDraggingRef.current = false;
                if (movingElementNode) {
                    movingElementNode.style.userSelect = "";
                }
                document.body.style.userSelect = "";
                document.body.style.cursor = "";
                window.removeEventListener("mousemove", mouseMoveHandler, {
                    capture: true
                });
                window.removeEventListener("mouseup", mouseUpHandler, {
                    capture: true
                });
            }
        };
    }, [
        movingElementNode,
        dragInitiatorNode,
        mouseDownHandler,
        onDragEnd,
        mouseMoveHandler,
        mouseUpHandler
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        const el = movingElementRef.current;
        if (el && providerData && providerData.borderLocation && // Needed for calculations within updateDraggablePosition
        persistedRelativeCenterRef.current && // Ensure we have a center to position to
        !isDraggingRef.current && // Not currently dragging
        !hasAnimatedOnceRef.current) {
            requestAnimationFrame(()=>{
                if (movingElementRef.current) {
                    updateDraggablePosition();
                }
            });
        }
    }, [
        movingElementNode,
        // Run when element is available/changes
        providerData,
        // Run if provider context changes (for borderLocation)
        config.initialRelativeCenter,
        // If this changes, persistedRelativeCenterRef might be re-initialized
        initialSnapArea,
        // If this changes, an effect updates persistedRelativeCenterRef
        updateDraggablePosition
    ]);
    const draggableRefCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((node)=>{
        setMovingElementNode(node);
        movingElementRef.current = node;
    }, []);
    const handleRefCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((node)=>{
        setDragInitiatorNode(node);
        dragInitiatorRef.current = node;
    }, []);
    return {
        draggableRef: draggableRefCallback,
        handleRef: handleRefCallback,
        position: {
            snapArea: currentSnapArea,
            isTopHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.y <= 0.5 : true,
            isLeftHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.x <= 0.5 : true
        },
        wasDragged
    };
}
function ToolbarSection({ children }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "fade-in slide-in-from-right-2 flex max-h-sm max-w-full animate-in snap-start flex-col items-center justify-between gap-1 py-0.5",
        children
    });
}
function ToolbarItem(props) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "relative flex w-full shrink-0 items-center justify-center",
        children: [
            props.children,
            props.badgeContent && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("bg-blue-600 text-white", props.badgeClassName, "pointer-events-none absolute right-0 bottom-0 flex h-3 w-max min-w-3 max-w-8 select-none items-center justify-center truncate rounded-full px-0.5 font-semibold text-[0.5em]"),
                children: props.badgeContent
            }),
            props.statusDot && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("bg-rose-600", props.statusDotClassName, "pointer-events-none absolute top-0 right-0 size-1.5 rounded-full")
            })
        ]
    });
}
const ToolbarButton = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])(({ badgeContent, badgeClassName, statusDot, statusDotClassName, tooltipHint, variant = "default", active, ...props }, ref)=>{
    const button = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(H$1, {
        ref,
        ...props,
        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("flex items-center justify-center rounded-full p-1 text-zinc-950 ring ring-transparent transition-all duration-150 hover:bg-zinc-950/5", variant === "default" ? "size-8" : "h-8 rounded-full", active && "bg-white/40 ring-zinc-950/20", props.className)
    });
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarItem, {
        badgeContent,
        badgeClassName,
        statusDot,
        statusDotClassName,
        children: button
    });
});
ToolbarButton.displayName = "ToolbarButton";
const Logo = ({ color = "default", loading = false, loadingSpeed = "slow", ...props })=>{
    const colorStyle = {
        default: "fill-stagewise-700 stroke-none",
        black: "fill-zinc-950 stroke-none",
        white: "fill-white stroke-none",
        zinc: "fill-zinc-500/50 stroke-none",
        current: "fill-current stroke-none",
        gradient: "fill-white stroke-black/30 stroke-1"
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: `relative ${color === "gradient" ? "overflow-hidden rounded-full" : "overflow-visible"} ${props.className || ""} ${loading ? "drop-shadow-xl" : ""} aspect-square`,
        children: [
            color === "gradient" && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "absolute inset-0",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "absolute inset-0 size-full bg-gradient-to-tr from-indigo-700 via-blue-500 to-teal-500"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "absolute top-1/2 left-1/2 size-9/12 bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "absolute right-1/2 bottom-1/2 size-full bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "absolute top-0 left-[-10%] size-[120%] bg-[radial-gradient(circle,rgba(255,255,255,0)_60%,rgba(255,255,255,0.2)_70%)]"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "absolute top-[-20%] left-0 h-[120%] w-full bg-[radial-gradient(circle,rgba(55,48,163,0)_55%,rgba(55,48,163,0.35)_73%)]"
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("svg", {
                className: `absolute overflow-visible ${color === "gradient" ? "top-[25%] left-[25%] h-[50%] w-[50%] drop-shadow-indigo-950 drop-shadow-xs" : "top-0 left-0 h-full w-full"}`,
                viewBox: "0 0 2048 2048",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("title", {
                        children: "stagewise"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("ellipse", {
                        className: colorStyle[color] + (loading ? " animate-pulse" : ""),
                        id: "path3",
                        ry: "624",
                        rx: "624",
                        cy: "1024",
                        cx: "1024"
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("svg", {
                className: `absolute overflow-visible ${color === "gradient" ? "top-[25%] left-[25%] h-[50%] w-[50%]" : "top-0 left-0 h-full w-full"}`,
                viewBox: "0 0 2048 2048",
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("path", {
                    id: "path4",
                    className: `origin-center ${colorStyle[color]}${loading ? loadingSpeed === "fast" ? " animate-spin-fast" : " animate-spin-slow" : ""}`,
                    d: "M 1024 0 A 1024 1024 0 0 0 0 1024 A 1024 1024 0 0 0 1024 2048 L 1736 2048 L 1848 2048 C 1958.7998 2048 2048 1958.7998 2048 1848 L 2048 1736 L 2048 1024 A 1024 1024 0 0 0 1024 0 z M 1024.9414 200 A 824 824 0 0 1 1848.9414 1024 A 824 824 0 0 1 1024.9414 1848 A 824 824 0 0 1 200.94141 1024 A 824 824 0 0 1 1024.9414 200 z "
                })
            })
        ]
    });
};
const SettingsButton = ({ onOpenPanel, isActive = false })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarSection, {
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarButton, {
            onClick: onOpenPanel,
            active: isActive,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Settings, {
                className: "size-4"
            })
        })
    });
const SettingsPanel = ({ onClose })=>{
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["P"], {
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["P"].Header, {
                title: "Settings"
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["P"].Content, {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ConnectionSettings, {})
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["P"].Content, {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ProjectInfoSection, {})
            })
        ]
    });
};
const ConnectionSettings = ()=>{
    const { windows, isDiscovering, discoveryError, discover, selectedSession, selectSession } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])();
    const handleSessionChange = (e2)=>{
        const target = e2.target;
        const selectedSessionId = target.value || void 0;
        selectSession(selectedSessionId);
    };
    const { appName } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])();
    const handleRefresh = ()=>{
        discover();
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "space-y-4 pb-4",
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("label", {
                        htmlFor: "session-select",
                        className: "mb-2 block font-medium text-sm text-zinc-700",
                        children: [
                            "VS Code Window ",
                            appName && `(${appName})`
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("select", {
                                id: "session-select",
                                value: (selectedSession == null ? void 0 : selectedSession.sessionId) || "",
                                onChange: handleSessionChange,
                                className: "h-8 flex-1 rounded-lg border border-zinc-300 bg-zinc-500/10 px-3 text-sm backdrop-saturate-150 focus:border-zinc-500 focus:outline-none",
                                disabled: isDiscovering,
                                children: [
                                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("option", {
                                        value: "",
                                        children: "Auto-detect (any window)"
                                    }),
                                    windows.map((window2)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("option", {
                                            value: window2.sessionId,
                                            children: [
                                                window2.displayName,
                                                " - Port ",
                                                window2.port
                                            ]
                                        }, window2.sessionId))
                                ]
                            }),
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("button", {
                                type: "button",
                                onClick: handleRefresh,
                                disabled: isDiscovering,
                                className: "flex h-8 w-8 items-center justify-center rounded-lg bg-zinc-500/10 backdrop-saturate-150 transition-colors hover:bg-zinc-500/20 disabled:opacity-50",
                                title: "Refresh window list",
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                                    className: `size-4 ${isDiscovering ? "animate-spin" : ""}`
                                })
                            })
                        ]
                    }),
                    discoveryError && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                        className: "mt-1 text-red-600 text-sm",
                        children: [
                            "Error discovering windows: ",
                            discoveryError
                        ]
                    }),
                    !isDiscovering && windows.length === 0 && !discoveryError && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                        className: "mt-1 text-sm text-zinc-500",
                        children: "No VS Code windows found. Make sure the Stagewise extension is installed and running."
                    })
                ]
            }),
            selectedSession && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "rounded-lg bg-blue-50 p-3",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                        className: "text-blue-800 text-sm",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("strong", {
                                children: "Selected:"
                            }),
                            " ",
                            selectedSession.displayName
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                        className: "mt-1 text-blue-600 text-xs",
                        children: [
                            "Session ID: ",
                            selectedSession.sessionId.substring(0, 8),
                            "..."
                        ]
                    })
                ]
            }),
            !selectedSession && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                    className: "text-sm text-zinc-600",
                    children: [
                        /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("strong", {
                            children: "Auto-detect mode:"
                        }),
                        " Commands will be sent to any available VS Code window."
                    ]
                })
            })
        ]
    });
};
const ProjectInfoSection = ()=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "space-y-2 text-xs text-zinc-700",
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "my-2 flex flex-wrap items-center gap-3",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                        href: "https://github.com/stagewise-io/stagewise",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: "flex items-center gap-1 text-blue-700 hover:underline",
                        title: "GitHub Repository",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("svg", {
                                width: "16",
                                height: "16",
                                fill: "currentColor",
                                viewBox: "0 0 24 24",
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("path", {
                                    d: "M12 .5C5.73.5.5 5.73.5 12c0 5.08 3.29 9.39 7.86 10.91.58.11.79-.25.79-.56 0-.28-.01-1.02-.02-2-3.2.7-3.88-1.54-3.88-1.54-.53-1.34-1.3-1.7-1.3-1.7-1.06-.72.08-.71.08-.71 1.17.08 1.78 1.2 1.78 1.2 1.04 1.78 2.73 1.27 3.4.97.11-.75.41-1.27.74-1.56-2.56-.29-5.26-1.28-5.26-5.7 0-1.26.45-2.29 1.19-3.1-.12-.29-.52-1.46.11-3.05 0 0 .98-.31 3.2 1.18a11.1 11.1 0 0 1 2.92-.39c.99 0 1.99.13 2.92.39 2.22-1.49 3.2-1.18 3.2-1.18.63 1.59.23 2.76.11 3.05.74.81 1.19 1.84 1.19 3.1 0 4.43-2.7 5.41-5.27 5.7.42.36.79 1.08.79 2.18 0 1.57-.01 2.84-.01 3.23 0 .31.21.68.8.56C20.71 21.39 24 17.08 24 12c0-6.27-5.23-11.5-12-11.5z"
                                })
                            }),
                            "GitHub"
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                        href: "https://discord.gg/gkdGsDYaKA",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: "flex items-center gap-1 text-indigo-700 hover:underline",
                        title: "Join our Discord",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("svg", {
                                width: "16",
                                height: "16",
                                fill: "currentColor",
                                viewBox: "0 0 24 24",
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("path", {
                                    d: "M20.317 4.369A19.791 19.791 0 0 0 16.885 3.2a.117.117 0 0 0-.124.06c-.537.96-1.13 2.22-1.552 3.2a18.524 18.524 0 0 0-5.418 0c-.423-.98-1.016-2.24-1.553-3.2a.117.117 0 0 0-.124-.06A19.736 19.736 0 0 0 3.683 4.369a.105.105 0 0 0-.047.043C.533 9.043-.32 13.579.099 18.057a.12.12 0 0 0 .045.083c1.934 1.426 3.81 2.288 5.671 2.857a.116.116 0 0 0 .127-.043c.438-.602.827-1.24 1.165-1.908a.112.112 0 0 0-.062-.158c-.619-.234-1.205-.52-1.77-.853a.117.117 0 0 1-.012-.194c.119-.09.238-.183.353-.277a.112.112 0 0 1 .114-.013c3.747 1.71 7.789 1.71 11.533 0a.112.112 0 0 1 .115.012c.115.094.234.188.353.278a.117.117 0 0 1-.012.194c-.565.333-1.151.619-1.77.853a.112.112 0 0 0-.062.158c.34.668.728 1.306 1.165 1.908a.115.115 0 0 0 .127.043c1.861-.569 3.737-1.431 5.671-2.857a.12.12 0 0 0 .045-.083c.5-5.177-.838-9.673-3.636-13.645a.105.105 0 0 0-.047-.043zM8.02 15.331c-1.183 0-2.156-1.085-2.156-2.419 0-1.333.955-2.418 2.156-2.418 1.21 0 2.175 1.095 2.156 2.418 0 1.334-.955 2.419-2.156 2.419zm7.96 0c-1.183 0-2.156-1.085-2.156-2.419 0-1.333.955-2.418 2.156-2.418 1.21 0 2.175 1.095 2.156 2.418 0 1.334-.946 2.419-2.156 2.419z"
                                })
                            }),
                            "Discord"
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                        href: "https://marketplace.visualstudio.com/items?itemName=stagewise.stagewise-vscode-extension",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: "flex items-center gap-1 text-violet-700 hover:underline",
                        title: "VS Code Marketplace",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("svg", {
                                width: "16",
                                height: "16",
                                fill: "currentColor",
                                viewBox: "0 0 24 24",
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("path", {
                                    d: "M21.805 2.29a2.25 2.25 0 0 0-2.45-.49l-7.5 3.25a2.25 2.25 0 0 0-1.31 2.06v1.13l-5.13 2.22a2.25 2.25 0 0 0-1.31 2.06v3.5a2.25 2.25 0 0 0 1.31 2.06l5.13 2.22v1.13a2.25 2.25 0 0 0 1.31 2.06l7.5 3.25a2.25 2.25 0 0 0 2.45-.49A2.25 2.25 0 0 0 23 20.25V3.75a2.25 2.25 0 0 0-1.195-1.46zM12 20.25v-16.5l7.5 3.25v10l-7.5 3.25z"
                                })
                            }),
                            "VS Code Marketplace"
                        ]
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "mt-2",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                        className: "font-semibold",
                        children: "Contact:"
                    }),
                    " ",
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                        href: "mailto:sales@stagewise.io",
                        className: "text-blue-700 hover:underline",
                        children: "sales@stagewise.io"
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "mt-2 text-zinc-500",
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                    children: [
                        "Licensed under AGPL v3.",
                        " ",
                        /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                            href: "https://github.com/stagewise-io/stagewise/blob/main/LICENSE",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            className: "hover:underline",
                            children: "View license"
                        })
                    ]
                })
            })
        ]
    });
function DisconnectedStatePanel({ discover, discoveryError }) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "rounded-lg border border-orange-200 bg-orange-50/90 p-4 shadow-lg backdrop-blur",
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "mb-3 flex items-center gap-3",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(WifiOff, {
                        className: "size-5 text-orange-600"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("h3", {
                        className: "font-semibold text-orange-800",
                        children: "Not Connected"
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "space-y-3 text-orange-700 text-sm",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                        children: "The stagewise toolbar isn't connected to any IDE window."
                    }),
                    discoveryError && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "rounded border border-red-200 bg-red-100 p-2 text-red-700",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("strong", {
                                children: "Error:"
                            }),
                            " ",
                            discoveryError
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "space-y-2",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                                className: "font-medium",
                                children: "To connect:"
                            }),
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("ol", {
                                className: "list-inside list-decimal space-y-1 pl-2 text-xs",
                                children: [
                                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("li", {
                                        children: "Open your IDE (Cursor, Windsurf, etc.)"
                                    }),
                                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("li", {
                                        children: "Install the stagewise extension"
                                    }),
                                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("li", {
                                        children: "Make sure the extension is active"
                                    }),
                                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("li", {
                                        children: "Click refresh below"
                                    })
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("button", {
                        type: "button",
                        onClick: discover,
                        className: "flex w-full items-center justify-center gap-2 rounded-md bg-orange-600 px-3 py-2 font-medium text-sm text-white transition-colors hover:bg-orange-700",
                        children: [
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                                className: "size-4"
                            }),
                            "Retry Connection"
                        ]
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "border-orange-200 border-t pt-2",
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("a", {
                            href: "https://marketplace.visualstudio.com/items?itemName=stagewise.stagewise-vscode-extension",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            className: "text-orange-600 text-xs hover:text-orange-800 hover:underline",
                            children: "Get VS Code Extension →"
                        })
                    })
                ]
            })
        ]
    });
}
function LoadingStateContent() {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "rounded-lg border border-blue-200 bg-blue-50/90 p-4 shadow-lg backdrop-blur",
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "mb-3 flex items-center gap-3",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                        className: "size-5 animate-spin text-blue-600"
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("h3", {
                        className: "font-semibold text-blue-800",
                        children: "Connecting..."
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "text-blue-700 text-sm",
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("p", {
                    children: "Looking for VS Code windows..."
                })
            })
        ]
    });
}
function ConnectedStateButtons({ handleButtonClick, pluginBox, setPluginBox, openPanel, setOpenPanel, chatState }) {
    const plugins = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])();
    const pluginsWithActions = plugins.plugins.filter((plugin)=>plugin.onActionClick);
    const handleOpenSettings = ()=>setOpenPanel(openPanel === "settings" ? null : "settings");
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], {
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(SettingsButton, {
                onOpenPanel: handleOpenSettings,
                isActive: openPanel === "settings"
            }),
            pluginsWithActions.length > 0 && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarSection, {
                children: pluginsWithActions.map((plugin)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarButton, {
                        onClick: handleButtonClick(()=>{
                            if ((pluginBox == null ? void 0 : pluginBox.pluginName) !== plugin.pluginName) {
                                const component = plugin.onActionClick();
                                if (component) {
                                    setPluginBox({
                                        component: plugin.onActionClick(),
                                        pluginName: plugin.pluginName
                                    });
                                }
                            } else {
                                setPluginBox(null);
                            }
                        }),
                        active: (pluginBox == null ? void 0 : pluginBox.pluginName) === plugin.pluginName,
                        children: plugin.iconSvg ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                            className: "size-4 stroke-zinc-950 text-zinc-950 *:size-full",
                            children: plugin.iconSvg
                        }) : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Puzzle, {
                            className: "size-4"
                        })
                    }, plugin.pluginName))
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarSection, {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarButton, {
                    onClick: handleButtonClick(()=>chatState.isPromptCreationActive ? chatState.stopPromptCreation() : chatState.startPromptCreation()),
                    active: chatState.isPromptCreationActive,
                    children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(MessageCircle, {
                        className: "size-4 stroke-zinc-950"
                    })
                })
            })
        ]
    });
}
function ToolbarDraggableBox() {
    const provider = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(DraggableContext);
    const borderLocation = provider == null ? void 0 : provider.borderLocation;
    const isReady = !!borderLocation && borderLocation.right - borderLocation.left > 0 && borderLocation.bottom - borderLocation.top > 0;
    const draggable = useDraggable({
        startThreshold: 10,
        initialSnapArea: "bottomRight"
    });
    const { windows, isDiscovering, discoveryError, discover } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])();
    const isConnected = windows.length > 0;
    const [pluginBox, setPluginBox] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const [openPanel, setOpenPanel] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const chatState = useChatState();
    const minimized = useAppState({
        "ToolbarDraggableBox.useAppState[minimized]": (state)=>state.minimized
    }["ToolbarDraggableBox.useAppState[minimized]"]);
    const minimize = useAppState({
        "ToolbarDraggableBox.useAppState[minimize]": (state)=>state.minimize
    }["ToolbarDraggableBox.useAppState[minimize]"]);
    const expand = useAppState({
        "ToolbarDraggableBox.useAppState[expand]": (state)=>state.expand
    }["ToolbarDraggableBox.useAppState[expand]"]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        if (minimized) {
            setPluginBox(null);
            setOpenPanel(null);
        }
    }, [
        minimized
    ]);
    const handleButtonClick = (handler)=>(e2)=>{
            if (draggable.wasDragged) {
                e2.preventDefault();
                e2.stopPropagation();
                return;
            }
            handler();
        };
    if (!isReady) return null;
    const isLoadingState = isDiscovering;
    const isDisconnectedState = !isConnected && !isDiscovering;
    const isConnectedState = isConnected;
    const getThemeClasses = ()=>{
        if (isLoadingState) {
            return {
                border: "border-blue-300",
                bg: "bg-blue-100/80",
                divideBorder: "divide-blue-200",
                buttonBg: "from-blue-600 to-sky-600",
                buttonColor: "text-blue-700"
            };
        }
        if (isDisconnectedState) {
            return {
                border: "border-orange-300",
                bg: "bg-orange-100/80",
                divideBorder: "divide-orange-200",
                buttonBg: "from-orange-600 to-red-600",
                buttonColor: "text-orange-700"
            };
        }
        return {
            border: "border-border/30",
            bg: "bg-zinc-50/80",
            divideBorder: "divide-border/20",
            buttonBg: "from-sky-700 to-fuchsia-700",
            buttonColor: "stroke-zinc-950"
        };
    };
    const theme = getThemeClasses();
    const getMinimizedIcon = ()=>{
        if (isLoadingState) {
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                className: "size-4 animate-spin text-white"
            });
        }
        if (isDisconnectedState) {
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(WifiOff, {
                className: "size-4 text-white"
            });
        }
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Logo, {
            className: "size-4.5",
            color: "white"
        });
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        ref: draggable.draggableRef,
        className: "absolute p-0.5",
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("absolute flex h-[calc(100vh-32px)] w-96 max-w-[40vw] items-stretch justify-end transition-all duration-300 ease-out", draggable.position.isTopHalf ? "top-0 flex-col-reverse" : "bottom-0 flex-col", draggable.position.isLeftHalf ? "left-[100%]" : "right-[100%]"),
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("flex min-h-0 flex-1 origin-bottom-right flex-col items-stretch px-2 transition-all duration-300 ease-out", (pluginBox || openPanel === "settings" || !isConnectedState) && !minimized ? "pointer-events-auto scale-100 opacity-100 blur-none" : "pointer-events-none h-0 scale-50 opacity-0 blur-md", draggable.position.isTopHalf ? "justify-start" : "justify-end", draggable.position.isTopHalf ? draggable.position.isLeftHalf ? "origin-top-left" : "origin-top-right" : draggable.position.isLeftHalf ? "origin-bottom-left" : "origin-bottom-right"),
                        children: [
                            isLoadingState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(LoadingStateContent, {}),
                            isDisconnectedState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(DisconnectedStatePanel, {
                                discover,
                                discoveryError
                            }),
                            isConnectedState && openPanel === "settings" && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(SettingsPanel, {
                                onClose: ()=>setOpenPanel(null)
                            }),
                            isConnectedState && (pluginBox == null ? void 0 : pluginBox.component)
                        ]
                    }),
                    isConnectedState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("z-20 w-full px-2 transition-all duration-300 ease-out", chatState.isPromptCreationActive && !minimized ? "pointer-events-auto scale-100 opacity-100 blur-none" : "pointer-events-none h-0 scale-50 opacity-0 blur-md", draggable.position.isTopHalf ? "mb-2" : "mt-2", draggable.position.isTopHalf ? draggable.position.isLeftHalf ? "origin-top-left" : "origin-top-right" : draggable.position.isLeftHalf ? "origin-bottom-left" : "origin-bottom-right"),
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarChatArea, {})
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                ref: draggable.handleRef,
                className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("pointer-events-auto z-50 rounded-full border px-0.5 shadow-md backdrop-blur transition-all duration-300 ease-out", theme.border, theme.bg, draggable.position.isTopHalf ? "flex-col-reverse divide-y-reverse" : "flex-col", minimized ? "h-9.5 w-9.5" : "h-[calc-size(auto,size)] h-auto w-auto"),
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(H$1, {
                        onClick: ()=>expand(),
                        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("absolute right-0 left-0 z-50 flex size-9 origin-center cursor-pointer items-center justify-center rounded-full bg-gradient-to-tr transition-all duration-300 ease-out", theme.buttonBg, minimized ? "pointer-events-auto scale-100 opacity-100 blur-none" : "pointer-events-none scale-25 opacity-0 blur-md", draggable.position.isTopHalf ? "top-0" : "bottom-0"),
                        children: getMinimizedIcon()
                    }),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("flex h-[calc-size(auto)] scale-100 items-center justify-center divide-y transition-all duration-300 ease-out", theme.divideBorder, draggable.position.isTopHalf ? "origin-top flex-col-reverse divide-y-reverse" : "origin-bottom flex-col", minimized && "pointer-events-none h-0 scale-50 opacity-0 blur-md"),
                        children: [
                            isConnectedState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ConnectedStateButtons, {
                                handleButtonClick,
                                pluginBox,
                                setPluginBox,
                                openPanel,
                                setOpenPanel,
                                chatState
                            }),
                            (isLoadingState || isDisconnectedState) && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarSection, {
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarButton, {
                                    onClick: isDisconnectedState ? ()=>discover() : void 0,
                                    className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(theme.buttonColor, isDisconnectedState && "hover:bg-orange-200"),
                                    children: [
                                        isLoadingState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                                            className: "size-4 animate-spin"
                                        }),
                                        isDisconnectedState && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(RefreshCw, {
                                            className: "size-4"
                                        })
                                    ]
                                })
                            }),
                            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarSection, {
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarButton, {
                                    onClick: handleButtonClick(()=>minimize()),
                                    className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("h-5", theme.buttonColor, draggable.position.isTopHalf ? "rounded-t-3xl rounded-b-lg" : "rounded-t-lg rounded-b-3xl"),
                                    children: draggable.position.isTopHalf ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ChevronUp, {
                                        className: "size-4"
                                    }) : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ChevronDown, {
                                        className: "size-4"
                                    })
                                })
                            })
                        ]
                    })
                ]
            })
        ]
    });
}
function ToolbarArea() {
    const containerRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "absolute size-full",
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
            className: "absolute inset-4",
            ref: containerRef,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(DraggableProvider, {
                containerRef,
                snapAreas: {
                    topLeft: true,
                    topRight: true,
                    bottomLeft: true,
                    bottomRight: true,
                    topCenter: true,
                    bottomCenter: true
                },
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarDraggableBox, {})
            })
        })
    });
}
function ElementSelector(props) {
    const lastHoveredElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const handleMouseMove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((event)=>{
        const target = event.target;
        if (target.closest(".companion")) return;
        const refElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["j"])(event.clientX, event.clientY);
        if (props.ignoreList.includes(refElement)) return;
        if (lastHoveredElement.current !== refElement) {
            lastHoveredElement.current = refElement;
            props.onElementHovered(refElement);
        }
    }, [
        props
    ]);
    const handleMouseLeave = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        lastHoveredElement.current = null;
        props.onElementUnhovered();
    }, [
        props
    ]);
    const handleMouseClick = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (!lastHoveredElement.current) return;
        if (props.ignoreList.includes(lastHoveredElement.current)) return;
        props.onElementSelected(lastHoveredElement.current);
    }, [
        props
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: "pointer-events-auto fixed inset-0 h-screen w-screen cursor-copy",
        onMouseMove: handleMouseMove,
        onMouseLeave: handleMouseLeave,
        onClick: handleMouseClick,
        role: "button",
        tabIndex: 0
    });
}
function useWindowSize() {
    const [size, setSize] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])({
        width: window.innerWidth,
        height: window.innerHeight
    });
    const handleResize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>setSize({
            width: window.innerWidth,
            height: window.innerHeight
        }), []);
    useEventListener("resize", handleResize);
    return size;
}
function ContextItemProposal({ refElement, ...props }) {
    const boxRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const windowSize = useWindowSize();
    const { plugins } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])();
    const hoveredElementPluginContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>{
        if (!refElement) return [];
        const pluginsWithContextGetters = plugins.filter((plugin)=>plugin.onContextElementSelect);
        return pluginsWithContextGetters.map((plugin)=>{
            var _a;
            return {
                pluginName: plugin.pluginName,
                context: (_a = plugin.onContextElementSelect) == null ? void 0 : _a.call(plugin, refElement)
            };
        });
    }, [
        refElement
    ]);
    const updateBoxPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (boxRef.current) {
            if (refElement) {
                const referenceRect = refElement.getBoundingClientRect();
                boxRef.current.style.top = `${referenceRect.top - 2}px`;
                boxRef.current.style.left = `${referenceRect.left - 2}px`;
                boxRef.current.style.width = `${referenceRect.width + 4}px`;
                boxRef.current.style.height = `${referenceRect.height + 4}px`;
                boxRef.current.style.display = void 0;
            } else {
                boxRef.current.style.height = "0px";
                boxRef.current.style.width = "0px";
                boxRef.current.style.top = `${windowSize.height / 2}px`;
                boxRef.current.style.left = `${windowSize.width / 2}px`;
                boxRef.current.style.display = "none";
            }
        }
    }, [
        refElement,
        windowSize.height,
        windowSize.width
    ]);
    useCyclicUpdate(updateBoxPosition, 30);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        ...props,
        className: "fixed flex items-center justify-center rounded-lg border-2 border-blue-600/80 bg-blue-600/20 text-white transition-all duration-100",
        style: {
            zIndex: 1e3
        },
        ref: boxRef,
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "absolute top-0.5 left-0.5 flex w-full flex-row items-start justify-start gap-1",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs",
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                            className: "truncate",
                            children: refElement.tagName.toLowerCase()
                        })
                    }),
                    hoveredElementPluginContext.filter((plugin)=>plugin.context.annotation).map((plugin)=>{
                        var _a;
                        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                            className: "flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs",
                            children: [
                                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                                    className: "size-3 shrink-0 stroke-white text-white *:size-full",
                                    children: (_a = plugins.find((p2)=>p2.pluginName === plugin.pluginName)) == null ? void 0 : _a.iconSvg
                                }),
                                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                                    className: "truncate",
                                    children: plugin.context.annotation
                                })
                            ]
                        });
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Plus, {
                className: "size-6 drop-shadow-black drop-shadow-md"
            })
        ]
    });
}
function ContextItem({ refElement, ...props }) {
    const boxRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(null);
    const windowSize = useWindowSize();
    const updateBoxPosition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        if (boxRef.current) {
            if (refElement) {
                const referenceRect = refElement.getBoundingClientRect();
                boxRef.current.style.top = `${referenceRect.top}px`;
                boxRef.current.style.left = `${referenceRect.left}px`;
                boxRef.current.style.width = `${referenceRect.width}px`;
                boxRef.current.style.height = `${referenceRect.height}px`;
                boxRef.current.style.display = void 0;
            } else {
                boxRef.current.style.height = "0px";
                boxRef.current.style.width = "0px";
                boxRef.current.style.top = `${windowSize.height / 2}px`;
                boxRef.current.style.left = `${windowSize.width / 2}px`;
                boxRef.current.style.display = "none";
            }
        }
    }, [
        refElement,
        windowSize.height,
        windowSize.width
    ]);
    useCyclicUpdate(updateBoxPosition, 30);
    const chatState = useChatState();
    const handleDeleteClick = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(()=>{
        chatState.removeChatDomContext(chatState.currentChatId, refElement);
    }, [
        chatState,
        refElement
    ]);
    const { plugins } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])();
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        ...props,
        className: "pointer-events-auto fixed flex cursor-pointer items-center justify-center rounded-lg border-2 border-green-600/80 bg-green-600/5 text-transparent transition-all duration-0 hover:border-red-600/80 hover:bg-red-600/20 hover:text-white",
        ref: boxRef,
        onClick: handleDeleteClick,
        role: "button",
        tabIndex: 0,
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                className: "absolute top-0.5 left-0.5 flex w-full flex-row items-start justify-start gap-1",
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                        className: "flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs",
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                            className: "truncate",
                            children: refElement.tagName.toLowerCase()
                        })
                    }),
                    props.pluginContext.filter((plugin)=>plugin.context.annotation).map((plugin)=>{
                        var _a;
                        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
                            className: "flex flex-row items-center justify-center gap-0.5 overflow-hidden rounded-md bg-zinc-700/80 px-1 py-0 font-medium text-white text-xs",
                            children: [
                                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                                    className: "size-3 shrink-0 stroke-white text-white *:size-full",
                                    children: (_a = plugins.find((p2)=>p2.pluginName === plugin.pluginName)) == null ? void 0 : _a.iconSvg
                                }),
                                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("span", {
                                    className: "truncate",
                                    children: plugin.context.annotation
                                })
                            ]
                        });
                    })
                ]
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(Trash2, {
                className: "size-6 drop-shadow-black drop-shadow-md"
            })
        ]
    });
}
function SelectorCanvas() {
    const { chats, currentChatId, addChatDomContext, isPromptCreationActive, promptState } = useChatState();
    const currentChat = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>chats.find((chat)=>chat.id === currentChatId), [
        currentChatId,
        chats
    ]);
    const shouldShow = isPromptCreationActive && promptState !== "loading";
    const contextElements = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"])(()=>{
        return (currentChat == null ? void 0 : currentChat.domContextElements) || [];
    }, [
        currentChat
    ]);
    const [hoveredElement, setHoveredElement] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(null);
    const addElementToContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])((el)=>{
        addChatDomContext(currentChatId, el);
    }, [
        addChatDomContext,
        currentChatId
    ]);
    if (!shouldShow) return null;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], {
        children: [
            hoveredElement && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ContextItemProposal, {
                refElement: hoveredElement
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ElementSelector, {
                ignoreList: contextElements.map((el)=>el.element),
                onElementHovered: setHoveredElement,
                onElementSelected: addElementToContext,
                onElementUnhovered: ()=>setHoveredElement(null)
            }),
            contextElements.map((el)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ContextItem, {
                    refElement: el.element,
                    pluginContext: el.pluginContext
                }))
        ]
    });
}
function DesktopLayout() {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("fixed inset-0 h-screen w-screen"),
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(SelectorCanvas, {}),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ToolbarArea, {})
        ]
    });
}
function ClickBlocker(props) {
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])("div", {
        className: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(typeof props.enable === "undefined" || props.enable ? "pointer-events-auto" : "pointer-events-none", props.className),
        onClick: props.onClick,
        role: "button",
        tabIndex: 0
    });
}
function FocusLock() {
    const focusInCompanion = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"])(false);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(()=>{
        const originalFocus = HTMLElement.prototype.focus;
        HTMLElement.prototype.focus = function(...args) {
            const shadowRoot = this.getRootNode();
            const isInCompanion = shadowRoot instanceof ShadowRoot && shadowRoot.host instanceof HTMLElement && shadowRoot.host.nodeName === "STAGEWISE-COMPANION-ANCHOR";
            if (!isInCompanion && focusInCompanion.current) {
                return;
            }
            originalFocus.apply(this, args);
        };
        return ()=>{
            HTMLElement.prototype.focus = originalFocus;
        };
    }, []);
    useEventListener("focusin", {
        "FocusLock.useEventListener": (event)=>{
            if (event.target.localName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"]) {
                focusInCompanion.current = true;
            }
        }
    }["FocusLock.useEventListener"], {
        capture: true
    });
    useEventListener("focusout", {
        "FocusLock.useEventListener": (event)=>{
            if (event.target.localName === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"]) {
                focusInCompanion.current = false;
            }
        }
    }["FocusLock.useEventListener"], {
        capture: true
    });
    return null;
}
function VisibilityManager({ children }) {
    return children;
}
function App(config) {
    const isMainAppBlocked = useAppState({
        "App.useAppState[isMainAppBlocked]": (state)=>state.isMainAppBlocked
    }["App.useAppState[isMainAppBlocked]"]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"], {
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(FocusLock, {}),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ClickBlocker, {
                className: "fixed inset-0 h-screen w-screen",
                enable: isMainAppBlocked
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(ContextProviders, {
                config,
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(HotkeyListener, {}),
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(VisibilityManager, {
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(DesktopLayout, {})
                    })
                ]
            })
        ]
    });
}
function initToolbar(config) {
    if (!document.body) throw new Error("stagewise companion cannot find document.body");
    if (document.body.querySelector(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"])) {
        console.warn("A stagewise companion anchor already exists. Aborting this instance.");
        throw new Error("A stagewise companion anchor already exists.");
    }
    const shadowDomAnchor = document.createElement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$panel$2d$Ci3s5SA7$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"]);
    shadowDomAnchor.style.position = "fixed";
    shadowDomAnchor.style.top = "0px";
    shadowDomAnchor.style.left = "0px";
    shadowDomAnchor.style.right = "0px";
    shadowDomAnchor.style.bottom = "0px";
    shadowDomAnchor.style.pointerEvents = "none";
    shadowDomAnchor.style.zIndex = "2147483647";
    const eventBlocker = (ev)=>{
        ev.stopPropagation();
    };
    shadowDomAnchor.onclick = eventBlocker;
    shadowDomAnchor.onmousedown = eventBlocker;
    shadowDomAnchor.onmouseup = eventBlocker;
    shadowDomAnchor.onmousemove = eventBlocker;
    shadowDomAnchor.ondblclick = eventBlocker;
    shadowDomAnchor.oncontextmenu = eventBlocker;
    shadowDomAnchor.onwheel = eventBlocker;
    shadowDomAnchor.onfocus = eventBlocker;
    shadowDomAnchor.onblur = eventBlocker;
    document.body.appendChild(shadowDomAnchor);
    const fontLinkNode = document.createElement("link");
    fontLinkNode.rel = "stylesheet";
    fontLinkNode.href = `https://rsms.me/inter/inter.css`;
    document.head.appendChild(fontLinkNode);
    const styleNode = document.createElement("style");
    styleNode.append(document.createTextNode(appStyle));
    document.head.appendChild(styleNode);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$jsx$2d$runtime$2d$Bf2kozQ6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(App, config), shadowDomAnchor);
}
;
}}),
"[project]/node_modules/@stagewise/toolbar-react/dist/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "StagewiseToolbar": (()=>StagewiseToolbar)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@stagewise/toolbar/dist/index.es.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
;
function StagewiseToolbar({ config, enabled = ("TURBOPACK compile-time value", "development") === "development" }) {
    if (!enabled) {
        return null;
    }
    const isLoaded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(false);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "StagewiseToolbar.useEffect": ()=>{
            if (isLoaded.current) return;
            isLoaded.current = true;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$stagewise$2f$toolbar$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["initToolbar"])(config);
        }
    }["StagewiseToolbar.useEffect"], [
        config
    ]);
    return null;
}
;
}}),
}]);

//# sourceMappingURL=node_modules_%40stagewise_fd53696c._.js.map
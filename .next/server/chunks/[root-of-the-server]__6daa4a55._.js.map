{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/haotian/mini/%E3%80%80code/MinecraftMe-AI-Photo-Blender/src/app/api/ai-blend/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport Replicate from \"replicate\";\n\nconst replicate = new Replicate({\n  auth: process.env.REPLICATE_API_TOKEN,\n});\n\nfunction isReadableStream(obj: any): obj is ReadableStream {\n  return obj && typeof obj.getReader === \"function\";\n}\n\nasync function streamToBuffer(stream: ReadableStream): Promise<Buffer> {\n  const reader = stream.getReader();\n  const chunks: Uint8Array[] = [];\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    chunks.push(value);\n  }\n  return Buffer.concat(chunks);\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { input_image, prompt } = await request.json();\n\n    console.log(\"🖼️ input_image:\", input_image);\n    console.log(\"📝 prompt:\", prompt);\n\n    // 只传必需参数 input_image 和 prompt\n    const output = await replicate.run(\n      \"black-forest-labs/flux-kontext-pro\",\n      {\n        input: {\n          input_image,\n          prompt,\n        },\n      }\n    );\n\n    // 1. 直接返回字符串（图片 URL）\n    if (typeof output === \"string\") {\n      return NextResponse.json({ success: true, result: output });\n    }\n\n    // 2. 处理 ReadableStream（图片流转 base64）\n    if (isReadableStream(output)) {\n      const buffer = await streamToBuffer(output);\n      const base64 = buffer.toString(\"base64\");\n      const dataUrl = `data:image/png;base64,${base64}`;\n      return NextResponse.json({ success: true, result: dataUrl });\n    }\n\n    // 3. 其它异常结构\n    console.error(\"❌ Replicate 返回异常，output:\", output);\n    throw new Error(\"AI融合失败：Replicate 未返回图片 URL 或图片流，output=\" + JSON.stringify(output));\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: error instanceof Error ? error.message : \"AI 融合失败\" },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,YAAY,IAAI,oIAAA,CAAA,UAAS,CAAC;IAC9B,MAAM,QAAQ,GAAG,CAAC,mBAAmB;AACvC;AAEA,SAAS,iBAAiB,GAAQ;IAChC,OAAO,OAAO,OAAO,IAAI,SAAS,KAAK;AACzC;AAEA,eAAe,eAAe,MAAsB;IAClD,MAAM,SAAS,OAAO,SAAS;IAC/B,MAAM,SAAuB,EAAE;IAC/B,MAAO,KAAM;QACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,IAAI;QACzC,IAAI,MAAM;QACV,OAAO,IAAI,CAAC;IACd;IACA,OAAO,OAAO,MAAM,CAAC;AACvB;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAElD,QAAQ,GAAG,CAAC,oBAAoB;QAChC,QAAQ,GAAG,CAAC,cAAc;QAE1B,8BAA8B;QAC9B,MAAM,SAAS,MAAM,UAAU,GAAG,CAChC,sCACA;YACE,OAAO;gBACL;gBACA;YACF;QACF;QAGF,qBAAqB;QACrB,IAAI,OAAO,WAAW,UAAU;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,QAAQ;YAAO;QAC3D;QAEA,oCAAoC;QACpC,IAAI,iBAAiB,SAAS;YAC5B,MAAM,SAAS,MAAM,eAAe;YACpC,MAAM,SAAS,OAAO,QAAQ,CAAC;YAC/B,MAAM,UAAU,CAAC,sBAAsB,EAAE,QAAQ;YACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAM,QAAQ;YAAQ;QAC5D;QAEA,YAAY;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM,IAAI,MAAM,4CAA4C,KAAK,SAAS,CAAC;IAC7E,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAU,GAC5E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}